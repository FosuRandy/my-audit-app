{"file_contents":{"app.py":{"content":"import os\nimport logging\nfrom flask import Flask\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom firebase_config import firebase_config\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"audit-management-fallback-key-2025\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Firebase configuration\napp.config['FIREBASE_CONFIG'] = firebase_config\n\n# File upload configuration\napp.config['UPLOAD_FOLDER'] = 'uploads'\napp.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max file size\n\n# Initialize Firebase and create default data\ndef init_firebase():\n    \"\"\"Initialize Firebase with default data\"\"\"\n    try:\n        from firebase_models import UserModel, DepartmentModel\n        \n        # Initialize models\n        user_model = UserModel()\n        dept_model = DepartmentModel()\n        \n        # Create default admin user\n        admin_email = 'admin@audit.system'\n        existing_admin = user_model.get_user_by_email(admin_email)\n        \n        if not existing_admin:\n            admin_data = {\n                'email': admin_email,\n                'role': 'director',\n                'first_name': 'System',\n                'last_name': 'Administrator',\n                'username': 'admin',\n                'phone': '+1-555-0001',\n                'is_active': True,\n                'password_reset_required': False\n            }\n            user_model.create_user(admin_data)\n            logging.info(\"Default admin user created in Firebase\")\n        \n        # Create default departments\n        default_departments = [\n            {'name': 'Internal Audit', 'description': 'Internal audit department'},\n            {'name': 'Finance', 'description': 'Finance and accounting department'},\n            {'name': 'Operations', 'description': 'Operations department'},\n            {'name': 'IT', 'description': 'Information technology department'},\n            {'name': 'Human Resources', 'description': 'Human resources department'}\n        ]\n        \n        existing_depts = dept_model.get_all()\n        if not existing_depts:\n            for dept_data in default_departments:\n                dept_model.create_department(dept_data)\n            logging.info(\"Default departments created in Firebase\")\n            \n    except Exception as e:\n        logging.error(f\"Error initializing Firebase data: {str(e)}\")\n\n# Note: Firebase/data_store backend is being used instead of SQLAlchemy\n# Sample data will be initialized by data_store.py automatically\n","size_bytes":2583},"auth.py":{"content":"from flask import session, request, redirect, url_for, flash\nfrom functools import wraps\nfrom data_store import DATA_STORE\nfrom datetime import datetime\nimport logging\nimport uuid\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            flash('Please log in to access this page.', 'warning')\n            return redirect(url_for('landing'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef role_required(*roles):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if 'user_id' not in session:\n                flash('Please log in to access this page.', 'warning')\n                return redirect(url_for('landing'))\n            \n            user = DATA_STORE['users'].get(session['user_id'])\n            \n            # Map old role names to new ones for compatibility\n            role_mapping = {\n                'admin': 'director',\n                'supervisor': 'head_of_business_control'\n            }\n            \n            # Map allowed roles to actual roles\n            mapped_roles = []\n            for role in roles:\n                mapped_roles.append(role_mapping.get(role, role))\n            \n            if not user or user.get('role') not in mapped_roles:\n                flash('You do not have permission to access this page.', 'error')\n                return redirect(url_for('dashboard'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\ndef get_current_user():\n    if 'user_id' in session:\n        user = DATA_STORE['users'].get(session['user_id'])\n        if user and user.get('is_active', False):\n            return user\n    return None\n\ndef log_audit_action(action, entity_type, entity_id=None, details=None):\n    \"\"\"Log user actions for audit trail\"\"\"\n    try:\n        user = get_current_user()\n        if user:\n            audit_log_id = str(uuid.uuid4())\n            audit_log = {\n                'id': audit_log_id,\n                'user_id': user.get('id'),\n                'action': action,\n                'entity_type': entity_type,\n                'entity_id': entity_id,\n                'details': details,\n                'ip_address': request.remote_addr,\n                'created_at': datetime.now()\n            }\n            DATA_STORE['audit_logs'][audit_log_id] = audit_log\n            logging.info(f\"Audit log created: {action} by {user.get('username', 'unknown')}\")\n    except Exception as e:\n        logging.error(f\"Failed to create audit log: {str(e)}\")\n\ndef check_password_reset_required():\n    \"\"\"Check if current user needs to reset password\"\"\"\n    user = get_current_user()\n    if user and user.get('password_reset_required', False):\n        return True\n    return False\n","size_bytes":2806},"data_store.py":{"content":"\"\"\"\nGlobal data store for the audit management system\nThis provides a centralized in-memory storage that can work with or without Firebase\n\"\"\"\nfrom datetime import datetime\nimport uuid\n\n# Global in-memory data store\nDATA_STORE = {\n    'users': {},\n    'departments': {},\n    'audits': {},\n    'risk_assessments': {},\n    'risks': {},  # Alias for risk_assessments for compatibility\n    'findings': {},\n    'corrective_actions': {},\n    'messages': {},\n    'evidence_files': {},\n    'audit_reports': {},\n    'audit_logs': {}\n}\n\ndef initialize_sample_data():\n    \"\"\"Initialize the system with only the head of business control user\"\"\"\n    \n    # Create only head of business control user\n    head_id = str(uuid.uuid4())\n    head_data = {\n        'id': head_id,\n        'email': 'head@audit.system',\n        'role': 'head_of_business_control',\n        'first_name': 'Business',\n        'last_name': 'Control',\n        'username': 'head_control',\n        'phone': '+1-555-0000',\n        'is_active': True,\n        'password_reset_required': False,\n        'firebase_uid': 'test-head-uid',  # For development authentication\n        'created_at': datetime.utcnow(),\n        'last_login': None\n    }\n    DATA_STORE['users'][head_id] = head_data\n    \n    print(f\"Initialized head of business control user: {head_data['email']}\")\n\ndef get_data_store():\n    \"\"\"Get the global data store\"\"\"\n    return DATA_STORE\n\ndef find_user_by_email(email):\n    \"\"\"Find user by email address\"\"\"\n    for user_id, user in DATA_STORE['users'].items():\n        if user.get('email') == email:\n            return user\n    return None\n\ndef add_audit_log(user_id, action, entity_type, entity_id=None, details=None, ip_address=None, user_agent=None):\n    \"\"\"Add audit log entry\"\"\"\n    log_id = str(uuid.uuid4())\n    log_data = {\n        'id': log_id,\n        'user_id': user_id,\n        'action': action,\n        'entity_type': entity_type,\n        'entity_id': entity_id,\n        'details': details,\n        'ip_address': ip_address,\n        'user_agent': user_agent,\n        'created_at': datetime.now()\n    }\n    DATA_STORE['audit_logs'][log_id] = log_data\n    return log_id","size_bytes":2144},"firebase_auth.py":{"content":"from flask import session, request, redirect, url_for, flash\nfrom functools import wraps\nfrom data_store import DATA_STORE, find_user_by_email, add_audit_log\nimport logging\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            flash('Please log in to access this page.', 'warning')\n            return redirect(url_for('landing'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef role_required(*required_roles):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if 'user_id' not in session:\n                flash('Please log in to access this page.', 'warning')\n                return redirect(url_for('landing'))\n            \n            user = get_current_user()\n            \n            # Map old role names to new ones for compatibility\n            role_mapping = {\n                'admin': 'director',\n                'supervisor': 'head_of_business_control'\n            }\n            \n            # Get the mapped roles\n            mapped_roles = []\n            for role in required_roles:\n                mapped_roles.append(role_mapping.get(role, role))\n            \n            if not user or user.get('role') not in mapped_roles or not user.get('is_active', False):\n                flash('You do not have permission to access this page.', 'error')\n                return redirect(url_for('landing'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\ndef get_current_user():\n    \"\"\"Get current user from session\"\"\"\n    if 'user_id' in session:\n        try:\n            # Get user from data store\n            user_id = session['user_id']\n            if user_id in DATA_STORE['users']:\n                user = DATA_STORE['users'][user_id]\n                if user and user.get('is_active', False):\n                    return user\n        except Exception as e:\n            logging.error(f\"Error getting current user: {e}\")\n    return None\n\ndef log_audit_action(action, entity_type, entity_id=None, details=None):\n    \"\"\"Log user actions for audit trail\"\"\"\n    try:\n        user = get_current_user()\n        if user:\n            log_id = add_audit_log(\n                user_id=user['id'],\n                action=action,\n                entity_type=entity_type,\n                entity_id=entity_id,\n                details=details,\n                ip_address=request.remote_addr,\n                user_agent=request.user_agent.string\n            )\n            logging.info(f\"Audit log created: {action} by {user.get('username', 'unknown')}\")\n    except Exception as e:\n        logging.error(f\"Failed to create audit log: {str(e)}\")\n\ndef check_password_reset_required():\n    \"\"\"Check if current user needs to reset password\"\"\"\n    user = get_current_user()\n    if user and user.get('password_reset_required', False):\n        return True\n    return False","size_bytes":2946},"firebase_config.py":{"content":"import os\nimport json\nimport logging\nimport uuid\n\n# Try importing Firebase with fallback\ntry:\n    import firebase_admin\n    from firebase_admin import credentials, firestore, auth as firebase_auth\n    FIREBASE_AVAILABLE = True\nexcept ImportError:\n    print(\"Firebase Admin not available, using mock implementation\")\n    FIREBASE_AVAILABLE = False\n\ntry:\n    import requests\n    REQUESTS_AVAILABLE = True\nexcept ImportError:\n    REQUESTS_AVAILABLE = False\n\n# Firebase configuration from environment variables or default config\nfirebase_config = {\n    \"apiKey\": os.environ.get(\"FIREBASE_API_KEY\", \"AIzaSyD2twe6wE5tIz5cSeyn-BPV8ozDGAAfEcQ\"),\n    \"authDomain\": \"audit-management-system-271ea.firebaseapp.com\",\n    \"projectId\": os.environ.get(\"FIREBASE_PROJECT_ID\", \"audit-management-system-271ea\"),\n    \"storageBucket\": \"audit-management-system-271ea.firebasestorage.app\",\n    \"messagingSenderId\": \"1013634535800\",\n    \"appId\": os.environ.get(\"FIREBASE_APP_ID\", \"1:1013634535800:web:e009d73f0101318678f88d\"),\n    \"measurementId\": \"G-T675PTHTQ0\",\n    \"databaseURL\": \"https://audit-management-system-271ea-default-rtdb.firebaseio.com/\"\n}\n\n# Initialize Firebase or Mock implementation\nif FIREBASE_AVAILABLE:\n    try:\n        # Check for service account key in environment\n        service_account_key = os.environ.get('FIREBASE_SERVICE_ACCOUNT_KEY')\n        \n        if service_account_key:\n            # Initialize with service account credentials\n            cred_dict = json.loads(service_account_key)\n            cred = credentials.Certificate(cred_dict)\n            firebase_admin.initialize_app(cred)\n            db = firestore.client()\n            print(\"Firebase Admin initialized successfully with service account\")\n        else:\n            # Fallback: try to initialize without credentials (will fail, triggering mock mode)\n            print(\"No Firebase service account key found, using mock implementation\")\n            FIREBASE_AVAILABLE = False\n    except Exception as e:\n        print(f\"Firebase initialization error: {e}, using mock implementation\")\n        FIREBASE_AVAILABLE = False\n\nif not FIREBASE_AVAILABLE:\n    # Create comprehensive mock database for development\n    import uuid\n    from datetime import datetime\n    \n    # In-memory storage for development\n    mock_data_store = {\n        'users': {},\n        'departments': {},\n        'audits': {},\n        'risk_assessments': {},\n        'findings': {},\n        'corrective_actions': {},\n        'messages': {},\n        'evidence_files': {},\n        'audit_reports': {},\n        'audit_logs': {}\n    }\n    \n    class MockFirestore:\n        def collection(self, name):\n            return MockCollection(name)\n    \n    class MockCollection:\n        def __init__(self, collection_name):\n            self.collection_name = collection_name\n            if collection_name not in mock_data_store:\n                mock_data_store[collection_name] = {}\n        \n        def add(self, data):\n            doc_id = str(uuid.uuid4())\n            data['id'] = doc_id\n            data['created_at'] = datetime.now()\n            mock_data_store[self.collection_name][doc_id] = data\n            print(f\"Mock: Added document {doc_id} to {self.collection_name}\")\n            return (None, type('MockDoc', (), {'id': doc_id}))\n        \n        def document(self, doc_id):\n            return MockDocument(self.collection_name, doc_id)\n        \n        def stream(self):\n            docs = []\n            for doc_id, data in mock_data_store[self.collection_name].items():\n                mock_doc = type('MockDocStream', (), {\n                    'to_dict': lambda: data,\n                    'id': doc_id\n                })\n                docs.append(mock_doc)\n            return docs\n        \n        def where(self, field, op, value):\n            filtered_collection = MockCollection(f\"{self.collection_name}_filtered\")\n            mock_data_store[filtered_collection.collection_name] = {}\n            \n            for doc_id, data in mock_data_store[self.collection_name].items():\n                if field in data:\n                    if op == '==' and data[field] == value:\n                        mock_data_store[filtered_collection.collection_name][doc_id] = data\n                    elif op == '!=' and data[field] != value:\n                        mock_data_store[filtered_collection.collection_name][doc_id] = data\n            \n            return filtered_collection\n    \n    class MockDocument:\n        def __init__(self, collection_name, doc_id):\n            self.collection_name = collection_name\n            self.doc_id = doc_id\n        \n        def get(self):\n            if self.doc_id in mock_data_store[self.collection_name]:\n                data = mock_data_store[self.collection_name][self.doc_id]\n                return type('MockDocGet', (), {\n                    'exists': True,\n                    'to_dict': lambda: data,\n                    'id': self.doc_id\n                })\n            return type('MockDocGet', (), {'exists': False})\n        \n        def update(self, data):\n            if self.doc_id in mock_data_store[self.collection_name]:\n                data['updated_at'] = datetime.now()\n                mock_data_store[self.collection_name][self.doc_id].update(data)\n                print(f\"Mock: Updated document {self.doc_id} in {self.collection_name}\")\n        \n        def delete(self):\n            if self.doc_id in mock_data_store[self.collection_name]:\n                del mock_data_store[self.collection_name][self.doc_id]\n                print(f\"Mock: Deleted document {self.doc_id} from {self.collection_name}\")\n    \n    db = MockFirestore()\n    print(\"Using comprehensive mock Firestore for development\")\n\n# Simplified auth functions using requests instead of pyrebase\nauth_client = None\ndb_client = None\n\ndef get_firestore_db():\n    \"\"\"Get Firestore database instance\"\"\"\n    return db\n\ndef authenticate_user(email, password):\n    \"\"\"Authenticate user with Firebase\"\"\"\n    try:\n        # For development, use mock authentication for known test accounts\n        test_accounts = {\n            \"admin@audit.system\": \"admin123\",\n            \"head@audit.system\": \"admin123\", \n            \"auditor@audit.system\": \"admin123\",\n            \"auditee@audit.system\": \"admin123\",\n            \"test\": \"test\"  # Generic test credentials\n        }\n        \n        if email in test_accounts and (password == test_accounts[email] or password == 'test'):\n            print(f\"Development: Authenticating test user {email}\")\n            return {\n                \"localId\": f\"test-{email.split('@')[0]}\",\n                \"email\": email,\n                \"idToken\": f\"test-token-{email.split('@')[0]}\",\n                \"refreshToken\": f\"test-refresh-{email.split('@')[0]}\"\n            }\n        \n        # For production users, try Firebase authentication\n        if REQUESTS_AVAILABLE:\n            api_key = firebase_config[\"apiKey\"]\n            url = f\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={api_key}\"\n            payload = {\n                \"email\": email,\n                \"password\": password,\n                \"returnSecureToken\": True\n            }\n            response = requests.post(url, json=payload)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f\"Firebase authentication failed: {response.text}\")\n                return None\n        \n        return None\n    except Exception as e:\n        print(f\"Authentication error: {e}\")\n        return None\n\ndef create_user_account(email, password, display_name):\n    \"\"\"Create new user account - simplified for development\"\"\"\n    try:\n        if REQUESTS_AVAILABLE and FIREBASE_AVAILABLE:\n            # Use Firebase REST API for user creation\n            api_key = firebase_config[\"apiKey\"]\n            url = f\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key={api_key}\"\n            payload = {\n                \"email\": email,\n                \"password\": password,\n                \"returnSecureToken\": True\n            }\n            response = requests.post(url, json=payload)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                print(f\"User creation failed: {response.text}\")\n                print(f\"Development: Falling back to mock user creation for {email}\")\n                # Fall back to mock user creation\n                return {\n                    \"localId\": f\"mock-{uuid.uuid4()}\",\n                    \"email\": email,\n                    \"idToken\": \"mock-id-token\"\n                }\n        else:\n            # Mock user creation\n            print(f\"Mock: Creating user {email}\")\n            return {\n                \"localId\": f\"mock-{uuid.uuid4()}\",\n                \"email\": email,\n                \"idToken\": \"mock-id-token\"\n            }\n    except Exception as e:\n        print(f\"User creation error: {e}\")\n        # Fall back to mock user creation on any exception\n        print(f\"Development: Falling back to mock user creation for {email}\")\n        return {\n            \"localId\": f\"mock-{uuid.uuid4()}\",\n            \"email\": email,\n            \"idToken\": \"mock-id-token\"\n        }\n\ndef get_user_info(id_token):\n    \"\"\"Get user information from token - simplified for development\"\"\"\n    try:\n        if REQUESTS_AVAILABLE and FIREBASE_AVAILABLE:\n            # Use Firebase REST API\n            api_key = firebase_config[\"apiKey\"]\n            url = f\"https://identitytoolkit.googleapis.com/v1/accounts:lookup?key={api_key}\"\n            payload = {\"idToken\": id_token}\n            response = requests.post(url, json=payload)\n            if response.status_code == 200:\n                return response.json()\n        else:\n            # Mock user info\n            return {\"users\": [{\"email\": \"admin@audit.system\", \"localId\": \"mock-admin-id\"}]}\n    except Exception as e:\n        print(f\"Get user info error: {e}\")\n        return None","size_bytes":9964},"firebase_models.py":{"content":"from datetime import datetime\nfrom firebase_config import get_firestore_db\nimport uuid\n\nclass FirebaseModel:\n    \"\"\"Base class for Firebase models\"\"\"\n    \n    def __init__(self, collection_name):\n        self.db = get_firestore_db()\n        self.collection_name = collection_name\n        self.collection = self.db.collection(collection_name) if self.db else None\n    \n    def create(self, data):\n        \"\"\"Create a new document\"\"\"\n        try:\n            data['created_at'] = datetime.now()\n            data['updated_at'] = datetime.now()\n            doc_ref = self.collection.add(data)\n            return doc_ref[1].id\n        except Exception as e:\n            print(f\"Error creating document: {e}\")\n            return None\n    \n    def get(self, doc_id):\n        \"\"\"Get document by ID\"\"\"\n        try:\n            doc = self.collection.document(doc_id).get()\n            if doc.exists:\n                data = doc.to_dict()\n                data['id'] = doc.id\n                return data\n            return None\n        except Exception as e:\n            print(f\"Error getting document: {e}\")\n            return None\n    \n    def update(self, doc_id, data):\n        \"\"\"Update document\"\"\"\n        try:\n            data['updated_at'] = datetime.now()\n            self.collection.document(doc_id).update(data)\n            return True\n        except Exception as e:\n            print(f\"Error updating document: {e}\")\n            return False\n    \n    def delete(self, doc_id):\n        \"\"\"Delete document\"\"\"\n        try:\n            self.collection.document(doc_id).delete()\n            return True\n        except Exception as e:\n            print(f\"Error deleting document: {e}\")\n            return False\n    \n    def get_all(self):\n        \"\"\"Get all documents\"\"\"\n        try:\n            docs = self.collection.stream()\n            results = []\n            for doc in docs:\n                data = doc.to_dict()\n                data['id'] = doc.id\n                results.append(data)\n            return results\n        except Exception as e:\n            print(f\"Error getting all documents: {e}\")\n            return []\n    \n    def query(self, field, operator, value):\n        \"\"\"Query documents\"\"\"\n        try:\n            docs = self.collection.where(field, operator, value).stream()\n            results = []\n            for doc in docs:\n                data = doc.to_dict()\n                data['id'] = doc.id\n                results.append(data)\n            return results\n        except Exception as e:\n            print(f\"Error querying documents: {e}\")\n            return []\n\nclass UserModel(FirebaseModel):\n    \"\"\"User management with Firebase\"\"\"\n    \n    def __init__(self):\n        super().__init__('users')\n    \n    def create_user(self, user_data):\n        \"\"\"Create user with validation\"\"\"\n        required_fields = ['email', 'role', 'first_name', 'last_name']\n        for field in required_fields:\n            if field not in user_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        user_data['is_active'] = True\n        user_data['password_reset_required'] = True\n        user_data['last_login'] = None\n        \n        return self.create(user_data)\n    \n    def get_user_by_email(self, email):\n        \"\"\"Get user by email\"\"\"\n        users = self.query('email', '==', email)\n        return users[0] if users else None\n    \n    def get_users_by_role(self, role):\n        \"\"\"Get all users with specific role\"\"\"\n        return self.query('role', '==', role)\n\nclass DepartmentModel(FirebaseModel):\n    \"\"\"Department management\"\"\"\n    \n    def __init__(self):\n        super().__init__('departments')\n    \n    def create_department(self, dept_data):\n        \"\"\"Create department with validation\"\"\"\n        required_fields = ['name']\n        for field in required_fields:\n            if field not in dept_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        dept_data['is_active'] = True\n        return self.create(dept_data)\n\nclass RiskAssessmentModel(FirebaseModel):\n    \"\"\"Risk assessment management\"\"\"\n    \n    def __init__(self):\n        super().__init__('risk_assessments')\n    \n    def create_risk(self, risk_data):\n        \"\"\"Create risk assessment\"\"\"\n        required_fields = ['risk_description', 'department_id', 'impact_level', 'likelihood_level']\n        for field in required_fields:\n            if field not in risk_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        # Calculate risk score\n        impact_scores = {'low': 1, 'medium': 2, 'high': 3, 'critical': 4}\n        likelihood_scores = {'rare': 1, 'unlikely': 2, 'possible': 3, 'likely': 4, 'almost_certain': 5}\n        \n        impact_score = impact_scores.get(risk_data['impact_level'], 2)\n        likelihood_score = likelihood_scores.get(risk_data['likelihood_level'], 3)\n        risk_data['risk_score'] = impact_score * likelihood_score\n        \n        # Determine risk level\n        if risk_data['risk_score'] <= 4:\n            risk_data['risk_level'] = 'low'\n        elif risk_data['risk_score'] <= 9:\n            risk_data['risk_level'] = 'medium'\n        elif risk_data['risk_score'] <= 12:\n            risk_data['risk_level'] = 'high'\n        else:\n            risk_data['risk_level'] = 'critical'\n        \n        return self.create(risk_data)\n\nclass AuditModel(FirebaseModel):\n    \"\"\"Audit management with complete workflow\"\"\"\n    \n    def __init__(self):\n        super().__init__('audits')\n    \n    def create_audit(self, audit_data):\n        \"\"\"Create audit with validation\"\"\"\n        required_fields = ['title', 'audit_type', 'department_id']\n        for field in required_fields:\n            if field not in audit_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        # Generate reference number\n        audit_data['reference_number'] = f\"AUD-{datetime.now().year}-{str(uuid.uuid4())[:8].upper()}\"\n        audit_data['status'] = 'draft'  # Initial status\n        audit_data['priority'] = audit_data.get('priority', 'medium')\n        \n        return self.create(audit_data)\n    \n    def get_audits_by_status(self, status):\n        \"\"\"Get audits by status\"\"\"\n        return self.query('status', '==', status)\n    \n    def get_audits_by_auditor(self, auditor_id):\n        \"\"\"Get audits assigned to specific auditor\"\"\"\n        return self.query('auditor_id', '==', auditor_id)\n    \n    def get_audits_by_auditee(self, auditee_id):\n        \"\"\"Get audits for specific auditee\"\"\"\n        return self.query('auditee_id', '==', auditee_id)\n\nclass FindingModel(FirebaseModel):\n    \"\"\"Audit findings management\"\"\"\n    \n    def __init__(self):\n        super().__init__('findings')\n    \n    def create_finding(self, finding_data):\n        \"\"\"Create audit finding\"\"\"\n        required_fields = ['audit_id', 'title', 'description', 'severity']\n        for field in required_fields:\n            if field not in finding_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        finding_data['status'] = 'open'\n        finding_data['finding_number'] = f\"F-{str(uuid.uuid4())[:6].upper()}\"\n        \n        return self.create(finding_data)\n    \n    def get_findings_by_audit(self, audit_id):\n        \"\"\"Get findings for specific audit\"\"\"\n        return self.query('audit_id', '==', audit_id)\n\nclass CorrectiveActionModel(FirebaseModel):\n    \"\"\"Corrective actions management\"\"\"\n    \n    def __init__(self):\n        super().__init__('corrective_actions')\n    \n    def create_corrective_action(self, action_data):\n        \"\"\"Create corrective action\"\"\"\n        required_fields = ['finding_id', 'action_description', 'responsible_person', 'target_date']\n        for field in required_fields:\n            if field not in action_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        action_data['status'] = 'pending'\n        action_data['action_number'] = f\"CA-{str(uuid.uuid4())[:6].upper()}\"\n        \n        return self.create(action_data)\n\nclass MessageModel(FirebaseModel):\n    \"\"\"Messaging system for auditor-auditee communication\"\"\"\n    \n    def __init__(self):\n        super().__init__('messages')\n    \n    def send_message(self, message_data):\n        \"\"\"Send message between auditor and auditee\"\"\"\n        required_fields = ['audit_id', 'sender_id', 'recipient_id', 'message_content']\n        for field in required_fields:\n            if field not in message_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        message_data['is_read'] = False\n        message_data['message_type'] = message_data.get('message_type', 'general')\n        \n        return self.create(message_data)\n    \n    def get_audit_messages(self, audit_id):\n        \"\"\"Get all messages for specific audit\"\"\"\n        return self.query('audit_id', '==', audit_id)\n\nclass EvidenceModel(FirebaseModel):\n    \"\"\"Evidence file management\"\"\"\n    \n    def __init__(self):\n        super().__init__('evidence_files')\n    \n    def create_evidence(self, evidence_data):\n        \"\"\"Create evidence record\"\"\"\n        required_fields = ['audit_id', 'filename', 'file_path', 'uploaded_by']\n        for field in required_fields:\n            if field not in evidence_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        evidence_data['file_size'] = evidence_data.get('file_size', 0)\n        evidence_data['file_type'] = evidence_data.get('file_type', 'unknown')\n        \n        return self.create(evidence_data)\n\nclass ReportModel(FirebaseModel):\n    \"\"\"Audit report management\"\"\"\n    \n    def __init__(self):\n        super().__init__('audit_reports')\n    \n    def create_report(self, report_data):\n        \"\"\"Create audit report\"\"\"\n        required_fields = ['audit_id', 'report_title', 'report_content']\n        for field in required_fields:\n            if field not in report_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        report_data['status'] = 'draft'\n        report_data['report_number'] = f\"RPT-{str(uuid.uuid4())[:8].upper()}\"\n        \n        return self.create(report_data)\n\nclass AuditLogModel(FirebaseModel):\n    \"\"\"Audit logging for tracking user actions\"\"\"\n    \n    def __init__(self):\n        super().__init__('audit_logs')\n    \n    def log_action(self, log_data):\n        \"\"\"Log user action\"\"\"\n        required_fields = ['user_id', 'action', 'entity_type']\n        for field in required_fields:\n            if field not in log_data:\n                raise ValueError(f\"Missing required field: {field}\")\n        \n        log_data['timestamp'] = datetime.now()\n        log_data['session_id'] = log_data.get('session_id', 'unknown')\n        \n        return self.create(log_data)","size_bytes":10775},"firebase_routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, session, jsonify, send_file, make_response, abort\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom app import app\nfrom firebase_auth import login_required, role_required, get_current_user, log_audit_action, check_password_reset_required\nfrom firebase_config import authenticate_user, create_user_account, get_user_info\nfrom data_store import DATA_STORE, find_user_by_email, initialize_sample_data\nfrom firebase_models import UserModel, DepartmentModel, AuditModel, RiskAssessmentModel, FindingModel, CorrectiveActionModel, MessageModel, EvidenceModel, ReportModel, AuditLogModel\n# Import utilities - will create these functions if needed\nimport secrets\nimport string\nimport os\nimport uuid\nimport hashlib\n\ndef generate_password(length=12):\n    \"\"\"Generate a secure random password\"\"\"\n    characters = string.ascii_letters + string.digits + \"!@#$%^&*\"\n    return ''.join(secrets.choice(characters) for _ in range(length))\n\ndef generate_csrf_token():\n    \"\"\"Generate a CSRF token and store it in session\"\"\"\n    if 'csrf_token' not in session:\n        session['csrf_token'] = secrets.token_hex(32)\n    return session['csrf_token']\n\ndef validate_csrf_token(token):\n    \"\"\"Validate CSRF token against session\"\"\"\n    return token and session.get('csrf_token') == token\n\ndef save_uploaded_file(file):\n    \"\"\"Save uploaded file and return filename\"\"\"\n    if not os.path.exists('uploads'):\n        os.makedirs('uploads')\n    \n    filename = f\"{uuid.uuid4()}_{file.filename}\"\n    filepath = os.path.join('uploads', filename)\n    file.save(filepath)\n    return filename\nfrom datetime import datetime, timedelta\nimport os\nimport uuid\nimport json\nfrom uuid import uuid4\n# Try importing reportlab with fallback\ntry:\n    from reportlab.pdfgen import canvas\n    from reportlab.lib.pagesizes import letter, A4\n    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle\n    from reportlab.lib import colors\n    from reportlab.lib.units import inch\n    REPORTLAB_AVAILABLE = True\nexcept ImportError:\n    print(\"ReportLab not available, PDF generation disabled\")\n    REPORTLAB_AVAILABLE = False\nimport io\n\n# Initialize sample data on first import\ninitialize_sample_data()\n\n# Initialize model instances\nuser_model = UserModel()\ndept_model = DepartmentModel() \naudit_model = AuditModel()\nrisk_model = RiskAssessmentModel()\nfinding_model = FindingModel()\naction_model = CorrectiveActionModel()\nmessage_model = MessageModel()\nevidence_model = EvidenceModel()\nreport_model = ReportModel()\naudit_log_model = AuditLogModel()\n\n@app.route('/')\ndef landing():\n    \"\"\"Landing page with role-based login options\"\"\"\n    if 'user_id' in session:\n        # Check if user actually exists before redirecting\n        user = get_current_user()\n        if user:\n            return redirect(url_for('dashboard'))\n        else:\n            # Clear invalid session\n            session.clear()\n    return render_template('landing.html')\n\n@app.route('/login/<role>')\ndef login_form(role):\n    \"\"\"Display login form for specific role\"\"\"\n    valid_roles = ['director', 'head_of_business_control', 'auditor', 'auditee']\n    if role not in valid_roles:\n        flash('Invalid role specified.', 'error')\n        return redirect(url_for('landing'))\n    return render_template('login.html', role=role)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    \"\"\"Process login with Firebase authentication\"\"\"\n    email = request.form['email']\n    password = request.form['password']\n    role = request.form['role']\n    \n    # Authenticate with Firebase or mock\n    firebase_user = authenticate_user(email, password)\n    if not firebase_user:\n        flash('Invalid email or password.', 'error')\n        return redirect(url_for('login_form', role=role))\n    \n    # Get user data from data store\n    user_data = find_user_by_email(email)\n    if not user_data or user_data.get('role') != role or not user_data.get('is_active', False):\n        flash('Invalid email, role, or account inactive.', 'error')\n        return redirect(url_for('login_form', role=role))\n    \n    # Set session\n    session['user_id'] = user_data['id']\n    session['user_role'] = user_data['role']\n    session['firebase_token'] = firebase_user['idToken']\n    \n    # Update last login\n    # Update last login time in data store\n    if user_data['id'] in DATA_STORE['users']:\n        DATA_STORE['users'][user_data['id']]['last_login'] = datetime.now()\n    \n    log_audit_action('login', 'user', user_data['id'], f'User {email} logged in')\n    \n    # Check password reset requirement - skip for development\n    if user_data.get('password_reset_required', False) and email not in [\"admin@audit.system\", \"head@audit.system\", \"auditor@audit.system\", \"auditee@audit.system\"]:\n        flash('You must change your password before continuing.', 'warning')\n        return redirect(url_for('profile'))\n    \n    flash(f'Welcome, {user_data.get(\"first_name\", \"\")} {user_data.get(\"last_name\", \"\")}!', 'success')\n    return redirect(url_for('dashboard'))\n\n@app.route('/logout')\n@login_required\ndef logout():\n    \"\"\"Logout user\"\"\"\n    user = get_current_user()\n    if user:\n        log_audit_action('logout', 'user', user['id'], f'User {user.get(\"email\", \"\")} logged out')\n    \n    session.clear()\n    flash('You have been logged out.', 'info')\n    return redirect(url_for('landing'))\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    \"\"\"Role-based dashboard\"\"\"\n    user = get_current_user()\n    if not user:\n        session.clear()  # Clear invalid session\n        flash('Please log in to access the dashboard.', 'warning')\n        return redirect(url_for('landing'))\n    \n    role = user.get('role')\n    \n    if role == 'director':\n        return director_dashboard()\n    elif role == 'head_of_business_control':\n        return head_of_business_control_dashboard()\n    elif role == 'auditor':\n        return auditor_dashboard()\n    elif role == 'auditee':\n        return auditee_dashboard()\n    else:\n        flash('Invalid role.', 'error')\n        session.clear()  # Clear invalid session\n        return redirect(url_for('landing'))\n\n@app.route('/director_dashboard')\n@login_required\n@role_required('director')\ndef director_dashboard():\n    \"\"\"Director dashboard - approve plans and review reports\"\"\"\n    # Get audits pending approval\n    pending_audits = [audit for audit in DATA_STORE['audits'].values() \n                     if audit.get('status') == 'pending_director_approval']\n    \n    # Get completed reports for review  \n    completed_audits = [audit for audit in DATA_STORE['audits'].values() \n                       if audit.get('status') == 'completed']\n    \n    # Get all audits for overview\n    all_audits = list(DATA_STORE['audits'].values())\n    \n    # Risk overview\n    risks = list(DATA_STORE['risk_assessments'].values())\n    \n    # Dashboard statistics\n    stats = {\n        'pending_approvals': len(pending_audits),\n        'completed_audits': len(completed_audits),\n        'total_risks': len(risks),\n        'high_risks': len([r for r in risks if r.get('risk_level') == 'high'])\n    }\n    \n    # Get user notifications  \n    user = get_current_user()\n    notifications = []\n    if user:\n        notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('director/dashboard.html', \n                         pending_audits=pending_audits,\n                         pending_plans=pending_audits,\n                         completed_audits=completed_audits,\n                         all_audits=all_audits,\n                         risks=risks,\n                         stats=stats,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/head_of_business_control_dashboard')\n@login_required\n@role_required('head_of_business_control')\ndef head_of_business_control_dashboard():\n    \"\"\"Head of Business Control dashboard - create plans, assign auditors\"\"\"\n    # Get audits in various workflow stages\n    draft_audits = [audit for audit in DATA_STORE['audits'].values() \n                   if audit.get('status') == 'draft']\n    director_approved_audits = [audit for audit in DATA_STORE['audits'].values() \n                               if audit.get('status') == 'director_approved']\n    auditor_plan_submitted_audits = [audit for audit in DATA_STORE['audits'].values() \n                                    if audit.get('status') == 'auditor_plan_submitted']\n    ready_audits = [audit for audit in DATA_STORE['audits'].values() \n                   if audit.get('status') == 'ready_for_fieldwork']\n    \n    # Enrich audits with department names\n    for audit in draft_audits + director_approved_audits + auditor_plan_submitted_audits + ready_audits:\n        dept = DATA_STORE.get('departments', {}).get(audit.get('department_id'))\n        if dept:\n            audit['department_name'] = dept.get('name', 'N/A')\n    \n    # Get auditors for assignment\n    auditors = [user for user in DATA_STORE['users'].values() \n               if user.get('role') == 'auditor']\n    auditees = [user for user in DATA_STORE['users'].values() \n               if user.get('role') == 'auditee']\n    \n    # Enrich auditors and auditees with department names\n    for user_obj in auditors + auditees:\n        dept = DATA_STORE.get('departments', {}).get(user_obj.get('department_id'))\n        if dept:\n            user_obj['department_name'] = dept.get('name', 'N/A')\n    \n    # Risk assessments\n    risks = list(DATA_STORE['risk_assessments'].values())\n    \n    # Corrective actions tracking\n    all_actions = list(DATA_STORE['corrective_actions'].values())\n    overdue_actions = [a for a in all_actions if a.get('target_date') and \n                      datetime.fromisoformat(a['target_date']) < datetime.now() and \n                      a.get('status') != 'completed']\n    \n    # Calculate available auditors count\n    active_auditors = [a for a in auditors if a.get('is_active', True)]\n    \n    # Calculate active audits count\n    active_audits = [a for a in DATA_STORE['audits'].values() \n                    if a.get('status') not in ['draft', 'completed', 'rejected']]\n    \n    # Calculate high/medium/low risk counts\n    high_risk = len([r for r in risks if r.get('risk_level') == 'high'])\n    medium_risk = len([r for r in risks if r.get('risk_level') == 'medium'])\n    low_risk = len([r for r in risks if r.get('risk_level') == 'low'])\n    \n    stats = {\n        'draft_audits': len(draft_audits),\n        'director_approved_audits': len(director_approved_audits), \n        'auditor_plan_submitted_audits': len(auditor_plan_submitted_audits),\n        'ready_audits': len(ready_audits),\n        'active_audits': len(active_audits),\n        'available_auditors': len(active_auditors),\n        'risk_areas': len(risks),\n        'total_risks': len(risks),\n        'high_risk': high_risk,\n        'medium_risk': medium_risk,\n        'low_risk': low_risk,\n        'overdue_actions': len(overdue_actions)\n    }\n    \n    # Get user notifications  \n    user = get_current_user()\n    notifications = []\n    if user:\n        notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('head_of_business_control/dashboard.html',\n                         draft_audits=draft_audits,\n                         director_approved_audits=director_approved_audits,\n                         auditor_plan_submitted_audits=auditor_plan_submitted_audits,\n                         ready_audits=ready_audits,\n                         auditors=auditors,\n                         available_auditors=active_auditors,\n                         auditees=auditees,\n                         risks=risks,\n                         overdue_actions=overdue_actions,\n                         stats=stats,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/auditor_dashboard')\n@login_required\n@role_required('auditor')\ndef auditor_dashboard():\n    \"\"\"Auditor dashboard - manage assigned audits\"\"\"\n    user = get_current_user()\n    \n    # Check if user exists\n    if not user:\n        flash('User session invalid. Please log in again.', 'error')\n        return redirect(url_for('landing'))\n        \n    # Get audits assigned to this auditor\n    assigned_audits = [audit for audit in DATA_STORE['audits'].values() \n                      if audit.get('auditor_id') == user.get('id')]\n    \n    # Get findings for audits\n    auditor_findings = [finding for finding in DATA_STORE['findings'].values() \n                       if finding.get('audit_id') in [a['id'] for a in assigned_audits]]\n    \n    # Get messages\n    auditor_messages = [msg for msg in DATA_STORE['messages'].values() \n                       if msg.get('recipient_id') == user.get('id') or msg.get('sender_id') == user.get('id')]\n    \n    # Get evidence files\n    evidence_files = [evidence for evidence in DATA_STORE['evidence_files'].values() \n                     if evidence.get('audit_id') in [a['id'] for a in assigned_audits]]\n    \n    stats = {\n        'assigned_audits': len(assigned_audits),\n        'total_findings': len(auditor_findings),\n        'open_findings': len([f for f in auditor_findings if f.get('status') == 'open']),\n        'unread_messages': len([m for m in auditor_messages if not m.get('is_read', True)])\n    }\n    \n    # Get user notifications  \n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user.get('id')]\n    \n    return render_template('auditor/dashboard.html',\n                         assigned_audits=assigned_audits,\n                         findings=auditor_findings,\n                         messages=auditor_messages,\n                         evidence_files=evidence_files,\n                         stats=stats,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/auditee_dashboard')\n@login_required\n@role_required('auditee')\ndef auditee_dashboard():\n    \"\"\"Auditee dashboard - respond to audit requests\"\"\"\n    user = get_current_user()\n    \n    # Check if user exists\n    if not user:\n        flash('User session invalid. Please log in again.', 'error')\n        return redirect(url_for('landing'))\n        \n    # Get audits where this user is auditee\n    auditee_audits = [audit for audit in DATA_STORE.get('audits', {}).values() \n                     if audit.get('auditee_id') == user.get('id')]\n    \n    # Get corrective actions assigned to this auditee\n    my_actions = [action for action in DATA_STORE['corrective_actions'].values() \n                 if action.get('responsible_person_id') == user.get('id')]\n    \n    # Get messages for this auditee\n    auditee_messages = [msg for msg in DATA_STORE['messages'].values() \n                       if msg.get('recipient_id') == user.get('id')]\n    \n    # Get evidence files uploaded by this auditee\n    my_evidence = [evidence for evidence in DATA_STORE['evidence_files'].values() \n                  if evidence.get('uploaded_by') == user.get('id')]\n    \n    stats = {\n        'active_audits': len([a for a in auditee_audits if a.get('status') in ['in_progress', 'review']]),\n        'pending_actions': len([a for a in my_actions if a.get('status') == 'pending']),\n        'overdue_actions': len([a for a in my_actions if a.get('target_date') and \n                               datetime.fromisoformat(a['target_date']) < datetime.now() and \n                               a.get('status') != 'completed']),\n        'unread_messages': len([m for m in auditee_messages if not m.get('is_read', True)])\n    }\n    \n    # Get user notifications  \n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('auditee/dashboard.html',\n                         my_audits=auditee_audits,\n                         corrective_actions=my_actions,\n                         messages=auditee_messages,\n                         evidence_files=my_evidence,\n                         stats=stats,\n                         current_user=user,\n                         notifications=notifications)\n\n# Risk Assessment Routes\n@app.route('/risk-assessment')\n@login_required\n@role_required('head_of_business_control', 'director')\ndef risk_assessment():\n    \"\"\"Risk assessment management\"\"\"\n    risks = list(DATA_STORE['risks'].values())\n    departments = list(DATA_STORE['departments'].values())\n    \n    # Calculate risk statistics\n    risk_stats = {\n        'critical': len([r for r in risks if r.get('risk_level') == 'critical']),\n        'high': len([r for r in risks if r.get('risk_level') == 'high']), \n        'medium': len([r for r in risks if r.get('risk_level') == 'medium']),\n        'low': len([r for r in risks if r.get('risk_level') == 'low']),\n        'total': len(risks)\n    }\n    \n    return render_template('risk_assessment.html', risks=risks, departments=departments, risk_stats=risk_stats)\n\n@app.route('/risk-assessment/create', methods=['GET', 'POST'])\n@login_required\n@role_required('head_of_business_control')\ndef create_risk_assessment():\n    \"\"\"Create new risk assessment\"\"\"\n    if request.method == 'POST':\n        try:\n            risk_data = {\n                'risk_description': request.form['risk_description'],\n                'department_id': request.form['department_id'],\n                'impact_level': request.form['impact_level'],\n                'likelihood_level': request.form['likelihood_level'],\n                'mitigation_measures': request.form.get('mitigation_measures', ''),\n                'risk_owner': request.form.get('risk_owner', ''),\n                'created_by': get_current_user().get('id') if get_current_user() else None\n            }\n            \n            risk_id = str(uuid.uuid4())\n            risk_data['id'] = risk_id\n            risk_data['created_at'] = datetime.now()\n            DATA_STORE['risks'][risk_id] = risk_data\n            log_audit_action('create', 'risk_assessment', risk_id, 'Risk assessment created')\n            \n            flash('Risk assessment created successfully.', 'success')\n            return redirect(url_for('risk_assessment'))\n            \n        except Exception as e:\n            flash(f'Error creating risk assessment: {str(e)}', 'error')\n    \n    departments = list(DATA_STORE['departments'].values())\n    return render_template('create_risk_assessment.html', departments=departments)\n\n# Audit Planning Routes\n@app.route('/audit-planning')\n@login_required\n@role_required('head_of_business_control', 'director')\ndef audit_planning():\n    \"\"\"Audit planning interface\"\"\"\n    audits = list(DATA_STORE['audits'].values())\n    risks = list(DATA_STORE['risks'].values())\n    departments = list(DATA_STORE['departments'].values())\n    \n    # Calculate planning statistics\n    planning_stats = {\n        'draft': len([a for a in audits if a.get('status') == 'draft']),\n        'pending': len([a for a in audits if a.get('status') == 'pending_director_approval']),\n        'director_approved': len([a for a in audits if a.get('status') == 'director_approved']),\n        'ready_for_fieldwork': len([a for a in audits if a.get('status') == 'ready_for_fieldwork']),\n        'total': len(audits)\n    }\n    \n    return render_template('audit_planning.html', audits=audits, risks=risks, departments=departments, planning_stats=planning_stats)\n\n@app.route('/audit-planning/create', methods=['GET', 'POST'])\n@login_required\n@role_required('head_of_business_control')\ndef create_audit_plan():\n    \"\"\"Create new audit plan\"\"\"\n    if request.method == 'POST':\n        try:\n            audit_data = {\n                'title': request.form['title'],\n                'description': request.form.get('description', ''),\n                'audit_type': request.form['audit_type'],\n                'department_id': request.form['department_id'],\n                'audit_scope': request.form.get('audit_scope', ''),\n                'audit_objectives': request.form.get('audit_objectives', ''),\n                'planned_start_date': request.form.get('planned_start_date'),\n                'planned_end_date': request.form.get('planned_end_date'),\n                'priority': request.form.get('priority', 'medium'),\n                'created_by_id': get_current_user()['id'],\n                'status': 'draft'\n            }\n            \n            audit_id = str(uuid.uuid4())\n            audit_data['id'] = audit_id\n            audit_data['created_at'] = datetime.now()\n            DATA_STORE['audits'][audit_id] = audit_data\n            log_audit_action('create', 'audit', audit_id, 'Audit plan created')\n            \n            flash('Audit plan created successfully.', 'success')\n            return redirect(url_for('audit_planning'))\n            \n        except Exception as e:\n            flash(f'Error creating audit plan: {str(e)}', 'error')\n    \n    departments = list(DATA_STORE['departments'].values())\n    risks = list(DATA_STORE['risks'].values())\n    return render_template('create_audit_plan.html', departments=departments, risks=risks)\n\n@app.route('/audit-planning/<audit_id>/submit-for-approval', methods=['POST'])\n@login_required\n@role_required('head_of_business_control')\ndef submit_audit_for_approval(audit_id):\n    \"\"\"Submit audit plan to Director for approval\"\"\"\n    try:\n        audit_data = {\n            'status': 'pending_director_approval',\n            'plan_submitted_at': datetime.now().isoformat()\n        }\n        \n        if audit_id in DATA_STORE['audits']:\n            audit = DATA_STORE['audits'][audit_id]\n            audit.update(audit_data)\n            \n            # Notify Director\n            create_notification(\n                user_role='director',\n                title='Audit Plan Approval Required',\n                message=f'Audit \"{audit.get(\"title\", \"\")}\" has been submitted for your review and approval.',\n                notification_type='plan_approval_needed',\n                related_entity_type='audit',\n                related_entity_id=audit_id\n            )\n            \n        log_audit_action('submit_for_approval', 'audit', audit_id, 'Audit plan submitted for director approval')\n        \n        flash('Audit plan submitted for Director approval.', 'success')\n        \n    except Exception as e:\n        flash(f'Error submitting audit plan: {str(e)}', 'error')\n    \n    return redirect(url_for('audit_planning'))\n\n@app.route('/audit/submit-for-approval/<plan_id>', methods=['POST'])\n@login_required\n@role_required('head_of_business_control')\ndef submit_for_approval(plan_id):\n    \"\"\"Submit audit plan for director approval (alternative route for dashboard)\"\"\"\n    return submit_audit_for_approval(plan_id)\n\n@app.route('/director/approve-audit/<audit_id>', methods=['POST'])\n@login_required\n@role_required('director')\ndef approve_audit_plan(audit_id):\n    \"\"\"Director approves audit plan\"\"\"\n    try:\n        audit_data = {\n            'status': 'director_approved',\n            'director_approved_at': datetime.now().isoformat(),\n            'director_feedback': request.form.get('director_feedback', '')\n        }\n        \n        if audit_id in DATA_STORE['audits']:\n            audit = DATA_STORE['audits'][audit_id]\n            audit.update(audit_data)\n            \n            # Notify HBC\n            create_notification(\n                user_role='head_of_business_control',\n                title='Audit Plan Approved',\n                message=f'Director approved audit plan: \"{audit.get(\"title\", \"\")}\". You can now assign an auditor.',\n                notification_type='plan_approved',\n                related_entity_type='audit',\n                related_entity_id=audit_id\n            )\n            \n        log_audit_action('approve', 'audit', audit_id, 'Audit plan approved by director')\n        \n        flash('Audit plan approved successfully.', 'success')\n        \n    except Exception as e:\n        flash(f'Error approving audit plan: {str(e)}', 'error')\n    \n    return redirect(url_for('dashboard'))\n\n@app.route('/assign-auditor/<audit_id>', methods=['GET', 'POST'])\n@login_required\n@role_required('head_of_business_control')\ndef assign_auditor(audit_id):\n    \"\"\"Head of Business Control assigns auditor\"\"\"\n    audit = DATA_STORE.get('audits', {}).get(audit_id)\n    \n    if not audit:\n        flash('Audit not found.', 'error')\n        return redirect(url_for('dashboard'))\n    \n    if request.method == 'POST':\n        try:\n            auditor_id = request.form['auditor_id']\n            auditee_id = request.form['auditee_id']\n            \n            audit_data = {\n                'auditor_id': auditor_id,\n                'auditee_id': auditee_id,\n                'status': 'assigned',\n                'auditor_assigned_at': datetime.now().isoformat()\n            }\n            \n            if audit_id in DATA_STORE['audits']:\n                DATA_STORE['audits'][audit_id].update(audit_data)\n                \n                # Notify auditor\n                create_notification(\n                    user_id=auditor_id,\n                    title='New Audit Assignment',\n                    message=f'You have been assigned to audit: \"{audit.get(\"title\", \"\")}\". Please acknowledge this assignment.',\n                    notification_type='audit_assigned',\n                    related_entity_type='audit',\n                    related_entity_id=audit_id\n                )\n                \n                # Notify auditee\n                create_notification(\n                    user_id=auditee_id,\n                    title='Audit Assignment',\n                    message=f'You have been assigned as auditee for audit: \"{audit.get(\"title\", \"\")}\". The auditor will contact you soon.',\n                    notification_type='auditee_assigned',\n                    related_entity_type='audit',\n                    related_entity_id=audit_id\n                )\n                \n            log_audit_action('assign_auditor', 'audit', audit_id, f'Auditor and auditee assigned to audit')\n            \n            flash('Auditor and auditee assigned successfully.', 'success')\n            \n        except KeyError as e:\n            flash(f'Missing required field: {str(e)}', 'error')\n        except Exception as e:\n            flash(f'Error assigning auditor: {str(e)}', 'error')\n        \n        return redirect(url_for('dashboard'))\n    \n    # GET request - show assignment page\n    # Enrich audit data\n    dept = DATA_STORE.get('departments', {}).get(audit.get('department_id'))\n    if dept:\n        audit['department_name'] = dept.get('name', 'N/A')\n    \n    # Get available auditors\n    auditors = [user for user in DATA_STORE['users'].values() \n               if user.get('role') == 'auditor' and user.get('is_active', True)]\n    \n    # Enrich auditors with department names\n    for auditor in auditors:\n        dept_id = auditor.get('department_id')\n        if dept_id and dept_id in DATA_STORE.get('departments', {}):\n            auditor['department_name'] = DATA_STORE['departments'][dept_id].get('name', 'N/A')\n    \n    # Get available auditees\n    auditees = [user for user in DATA_STORE['users'].values() \n               if user.get('role') == 'auditee' and user.get('is_active', True)]\n    \n    # Enrich auditees with department names\n    for auditee in auditees:\n        dept_id = auditee.get('department_id')\n        if dept_id and dept_id in DATA_STORE.get('departments', {}):\n            auditee['department_name'] = DATA_STORE['departments'][dept_id].get('name', 'N/A')\n    \n    user = get_current_user()\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('head_of_business_control/assign_auditor.html',\n                         audit=audit,\n                         available_auditors=auditors,\n                         available_auditees=auditees,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/assign-auditors')\n@login_required\n@role_required('head_of_business_control')\ndef assign_auditors():\n    \"\"\"Head of Business Control - General assign auditors page\"\"\"\n    user = get_current_user()\n    \n    # Get director-approved audits that need auditor assignment\n    available_audits = [audit for audit in DATA_STORE['audits'].values() \n                       if audit.get('status') == 'director_approved' and not audit.get('auditor_id')]\n    \n    # Get all available auditors\n    auditors = [user for user in DATA_STORE['users'].values() \n               if user.get('role') == 'auditor' and user.get('is_active', True)]\n    \n    # Get all available auditees \n    auditees = [user for user in DATA_STORE['users'].values() \n               if user.get('role') == 'auditee' and user.get('is_active', True)]\n    \n    # Get departments for context\n    departments = {dept['id']: dept for dept in DATA_STORE['departments'].values()}\n    \n    # Enrich audits with department names\n    for audit in available_audits:\n        if audit.get('department_id') and audit['department_id'] in departments:\n            audit['department_name'] = departments[audit['department_id']]['name']\n    \n    # Enrich auditors with department names  \n    for auditor in auditors:\n        if auditor.get('department_id') and auditor['department_id'] in departments:\n            auditor['department_name'] = departments[auditor['department_id']]['name']\n    \n    # Enrich auditees with department names\n    for auditee in auditees:\n        if auditee.get('department_id') and auditee['department_id'] in departments:\n            auditee['department_name'] = departments[auditee['department_id']]['name']\n    \n    return render_template('head_of_business_control/assign_auditors.html',\n                         available_audits=available_audits,\n                         auditors=auditors,\n                         auditees=auditees,\n                         current_user=user)\n\n# Messaging System Routes\n@app.route('/messages')\n@login_required\ndef messages():\n    \"\"\"View messages\"\"\"\n    user = get_current_user()\n    \n    # Check if user exists\n    if not user:\n        flash('User session invalid. Please log in again.', 'error')\n        return redirect(url_for('landing'))\n    \n    # Get all messages for current user (both received and sent)\n    user_messages = []\n    for msg in DATA_STORE['messages'].values():\n        if msg.get('recipient_id') == user.get('id') or msg.get('sender_id') == user.get('id'):\n            user_messages.append(msg)\n    \n    # Get audit lookup for message references\n    audit_lookup = {audit_id: audit for audit_id, audit in DATA_STORE['audits'].items()}\n    \n    # Get all users for new message form\n    all_users = [u for u in DATA_STORE['users'].values() if u.get('id') != user.get('id')]\n    \n    return render_template('messages.html', \n                         messages=user_messages,\n                         audit_lookup=audit_lookup,\n                         all_users=all_users,\n                         current_user=user)\n\n@app.route('/messages/send', methods=['POST'])\n@login_required\ndef send_message():\n    \"\"\"Send message\"\"\"\n    try:\n        message_data = {\n            'audit_id': request.form['audit_id'],\n            'sender_id': get_current_user()['id'],\n            'recipient_id': request.form['recipient_id'],\n            'message_content': request.form['message_content'],\n            'message_type': request.form.get('message_type', 'general'),\n            'subject': request.form.get('subject', 'Audit Communication')\n        }\n        \n        message_id = message_model.send_message(message_data)\n        log_audit_action('send_message', 'message', message_id, 'Message sent')\n        \n        flash('Message sent successfully.', 'success')\n        \n    except Exception as e:\n        flash(f'Error sending message: {str(e)}', 'error')\n    \n    return redirect(url_for('messages'))\n\n# Report Generation Routes (removed duplicate - exists later in file)\n\n# Evidence Management Routes\n@app.route('/evidence/upload', methods=['POST'])\n@login_required\ndef upload_evidence():\n    \"\"\"Upload evidence file\"\"\"\n    try:\n        if 'file' not in request.files:\n            flash('No file selected.', 'error')\n            return redirect(request.referrer)\n        \n        file = request.files['file']\n        if file.filename == '':\n            flash('No file selected.', 'error')\n            return redirect(request.referrer)\n        \n        # Save file\n        filename = save_uploaded_file(file)\n        \n        evidence_data = {\n            'audit_id': request.form['audit_id'],\n            'filename': file.filename,\n            'file_path': filename,\n            'uploaded_by': get_current_user()['id'],\n            'file_size': len(file.read()),\n            'file_type': file.content_type,\n            'description': request.form.get('description', '')\n        }\n        \n        evidence_id = evidence_model.create_evidence(evidence_data)\n        log_audit_action('upload_evidence', 'evidence', evidence_id, f'Evidence file uploaded: {file.filename}')\n        \n        flash('Evidence uploaded successfully.', 'success')\n        \n    except Exception as e:\n        flash(f'Error uploading evidence: {str(e)}', 'error')\n    \n    return redirect(request.referrer)\n\n# Report Generation Routes\n@app.route('/generate-report/<audit_id>')\n@login_required\n@role_required('auditor', 'director')\ndef generate_audit_report(audit_id):\n    \"\"\"Generate PDF audit report\"\"\"\n    try:\n        audit = audit_model.get(audit_id)\n        if not audit:\n            flash('Audit not found.', 'error')\n            return redirect(url_for('dashboard'))\n        \n        findings = [f for f in DATA_STORE['findings'].values() if f.get('audit_id') == audit_id]\n        evidence = evidence_model.query('audit_id', '==', audit_id)\n        \n        # Create PDF report\n        buffer = io.BytesIO()\n        doc = SimpleDocTemplate(buffer, pagesize=A4)\n        styles = getSampleStyleSheet()\n        story = []\n        \n        # Title\n        title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'], fontSize=18, spaceAfter=30)\n        story.append(Paragraph(f\"Audit Report: {audit['title']}\", title_style))\n        story.append(Spacer(1, 12))\n        \n        # Audit details\n        story.append(Paragraph(f\"<b>Reference Number:</b> {audit.get('reference_number', 'N/A')}\", styles['Normal']))\n        story.append(Paragraph(f\"<b>Audit Type:</b> {audit.get('audit_type', 'N/A')}\", styles['Normal']))\n        story.append(Paragraph(f\"<b>Status:</b> {audit.get('status', 'N/A')}\", styles['Normal']))\n        story.append(Paragraph(f\"<b>Priority:</b> {audit.get('priority', 'N/A')}\", styles['Normal']))\n        story.append(Spacer(1, 12))\n        \n        # Audit scope and objectives\n        if audit.get('audit_scope'):\n            story.append(Paragraph(\"<b>Audit Scope:</b>\", styles['Heading2']))\n            story.append(Paragraph(audit['audit_scope'], styles['Normal']))\n            story.append(Spacer(1, 12))\n        \n        if audit.get('audit_objectives'):\n            story.append(Paragraph(\"<b>Audit Objectives:</b>\", styles['Heading2']))\n            story.append(Paragraph(audit['audit_objectives'], styles['Normal']))\n            story.append(Spacer(1, 12))\n        \n        # Findings section\n        if findings:\n            story.append(Paragraph(\"<b>Findings:</b>\", styles['Heading2']))\n            for i, finding in enumerate(findings, 1):\n                story.append(Paragraph(f\"<b>Finding #{i}: {finding.get('title', 'Untitled')}</b>\", styles['Normal']))\n                story.append(Paragraph(f\"Severity: {finding.get('severity', 'Unknown')}\", styles['Normal']))\n                story.append(Paragraph(finding.get('description', 'No description provided'), styles['Normal']))\n                story.append(Spacer(1, 8))\n        \n        # Evidence section\n        if evidence:\n            story.append(Paragraph(\"<b>Evidence Files:</b>\", styles['Heading2']))\n            for ev in evidence:\n                story.append(Paragraph(f\"• {ev.get('filename', 'Unknown file')}\", styles['Normal']))\n        \n        # Build PDF\n        doc.build(story)\n        buffer.seek(0)\n        \n        # Save report record\n        report_data = {\n            'audit_id': audit_id,\n            'report_title': f\"Audit Report - {audit['title']}\",\n            'report_content': 'PDF report generated',\n            'generated_by': get_current_user()['id'],\n            'status': 'final'\n        }\n        \n        report_id = report_model.create_report(report_data)\n        log_audit_action('generate_report', 'report', report_id, 'PDF report generated')\n        \n        # Return PDF response\n        response = make_response(buffer.getvalue())\n        response.headers['Content-Type'] = 'application/pdf'\n        response.headers['Content-Disposition'] = f'attachment; filename=audit_report_{audit_id}.pdf'\n        \n        return response\n        \n    except Exception as e:\n        flash(f'Error generating report: {str(e)}', 'error')\n        return redirect(url_for('dashboard'))\n\n# Report Library Routes\n@app.route('/report-library')\n@login_required\n@role_required('director', 'head_of_business_control', 'auditor')\ndef report_library():\n    \"\"\"Central report library\"\"\"\n    reports = list(DATA_STORE['audit_reports'].values())\n    audits = list(DATA_STORE['audits'].values())\n    \n    # Create audit lookup for report details\n    audit_lookup = {audit['id']: audit for audit in audits}\n    \n    # Calculate library statistics\n    from datetime import datetime, timedelta\n    current_month = datetime.now().month\n    current_year = datetime.now().year\n    \n    # Safely filter reports by date\n    this_month_reports = []\n    most_downloaded_report = None\n    max_downloads = 0\n    \n    for r in reports:\n        # Handle both string and datetime formats for generated_at\n        report_date = r.get('generated_at', '')\n        if isinstance(report_date, str) and report_date.startswith(f\"{current_year}-{current_month:02d}\"):\n            this_month_reports.append(r)\n        \n        # Find most downloaded report\n        downloads = r.get('download_count', 0)\n        if downloads > max_downloads:\n            max_downloads = downloads\n            most_downloaded_report = r.get('title', 'N/A')\n    \n    library_stats = {\n        'this_month': len(this_month_reports),\n        'most_downloaded': most_downloaded_report or 'No downloads yet',\n        'departments': len(set(audit.get('department_id') for audit in audits if audit.get('department_id')))\n    }\n    \n    return render_template('report_library.html', reports=reports, audit_lookup=audit_lookup, library_stats=library_stats)\n\n# User Management Routes\n@app.route('/users')\n@login_required\n@role_required('head_of_business_control', 'director')\ndef users():\n    \"\"\"User management - view-only for directors\"\"\"\n    # Use DATA_STORE for faster loading\n    users = list(DATA_STORE.get('users', {}).values())\n    departments = list(DATA_STORE.get('departments', {}).values())\n    return render_template('admin/users.html', users=users, departments=departments)\n\n@app.route('/users/create', methods=['POST'])\n@login_required\n@role_required('head_of_business_control')\ndef create_user():\n    \"\"\"Create new user\"\"\"\n    try:\n        # Generate temporary password\n        temp_password = generate_password()\n        \n        # Create user in Firebase Auth\n        firebase_user = create_user_account(\n            request.form['email'], \n            temp_password,\n            f\"{request.form['first_name']} {request.form['last_name']}\"\n        )\n        \n        if not firebase_user:\n            flash('Error creating user account.', 'error')\n            return redirect(url_for('manage_users_page'))\n        \n        # Create user record in Firestore\n        user_data = {\n            'email': request.form['email'],\n            'role': request.form['role'],\n            'first_name': request.form['first_name'],\n            'last_name': request.form['last_name'],\n            'phone': request.form.get('phone', ''),\n            'department_id': request.form.get('department_id', ''),\n            'firebase_uid': firebase_user['localId'],\n            'temporary_password': temp_password,\n            'password_reset_required': True\n        }\n        \n        user_id = user_model.create_user(user_data)\n        log_audit_action('create', 'user', user_id, f'User created: {request.form[\"email\"]}')\n        \n        flash(f'User created successfully. Temporary password: {temp_password}', 'success')\n        \n    except Exception as e:\n        flash(f'Error creating user: {str(e)}', 'error')\n    \n    return redirect(url_for('manage_users_page'))\n\n# Department Management Routes  \n@app.route('/departments')\n@login_required\n@role_required('head_of_business_control', 'director')\ndef departments():\n    \"\"\"Department management with improved styling\"\"\"\n    # Use DATA_STORE for faster loading\n    all_departments = list(DATA_STORE.get('departments', {}).values())\n    all_users = list(DATA_STORE.get('users', {}).values())\n    \n    # Enrich department data with user counts\n    for dept in all_departments:\n        dept['users'] = [u for u in all_users if u.get('department_id') == dept.get('id')]\n    \n    # Sort departments by name\n    all_departments.sort(key=lambda x: x.get('name', ''))\n    \n    return render_template('admin/departments.html', departments=all_departments)\n\n@app.route('/departments/create', methods=['POST'])\n@login_required\n@role_required('head_of_business_control')\ndef create_department():\n    \"\"\"Create new department\"\"\"\n    try:\n        dept_data = {\n            'name': request.form['name'],\n            'description': request.form.get('description', ''),\n            'head_name': request.form.get('head_name', '')\n        }\n        \n        dept_id = str(uuid.uuid4())\n        dept_data['id'] = dept_id\n        dept_data['created_at'] = datetime.now()\n        DATA_STORE['departments'][dept_id] = dept_data\n        log_audit_action('create', 'department', dept_id, f'Department created: {request.form[\"name\"]}')\n        \n        flash('Department created successfully.', 'success')\n        \n    except Exception as e:\n        flash(f'Error creating department: {str(e)}', 'error')\n    \n    return redirect(url_for('departments'))\n\n# API Routes for AJAX calls\n@app.route('/api/audit/<audit_id>/findings')\n@login_required\ndef get_audit_findings(audit_id):\n    \"\"\"Get findings for an audit (API)\"\"\"\n    findings = [f for f in DATA_STORE['findings'].values() if f.get('audit_id') == audit_id]\n    return jsonify({'findings': findings})\n\n@app.route('/api/notifications/count')\ndef get_notifications_count():\n    \"\"\"Get count of unread notifications (API)\"\"\"\n    try:\n        user = get_current_user()\n        if not user:\n            return jsonify({'error': 'Unauthorized', 'count': 0}), 401\n        \n        notifications = [n for n in DATA_STORE.get('notifications', {}).values() \n                        if n.get('user_id') == user['id'] and not n.get('is_read', False)]\n        \n        return jsonify({'count': len(notifications)})\n    except Exception as e:\n        return jsonify({'error': 'Failed to fetch notifications', 'details': str(e), 'count': 0}), 500\n\n@app.route('/api/risk-heatmap')\n@login_required\ndef risk_heatmap_data():\n    \"\"\"Get risk data for heatmap\"\"\"\n    risks = list(DATA_STORE['risks'].values())\n    departments = list(DATA_STORE['departments'].values())\n    \n    # Create department lookup\n    dept_lookup = {dept['id']: dept['name'] for dept in departments}\n    \n    # Format data for heatmap\n    heatmap_data = []\n    for risk in risks:\n        heatmap_data.append({\n            'department': dept_lookup.get(risk.get('department_id', ''), 'Unknown'),\n            'risk_score': risk.get('risk_score', 0),\n            'risk_level': risk.get('risk_level', 'low'),\n            'description': risk.get('risk_description', '')\n        })\n    \n    return jsonify({'heatmap_data': heatmap_data})\n\n# Context processor for templates\n@app.context_processor\ndef inject_user():\n    \"\"\"Inject current user into all templates\"\"\"\n    return dict(current_user=get_current_user())\n\n# Error handlers\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('404.html'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    return render_template('500.html'), 500# Missing routes to be added to firebase_routes.py\n\n@app.route('/audit-execution')\n@login_required\n@role_required('auditor', 'head_of_business_control', 'director')\ndef audit_execution():\n    \"\"\"Audit execution page\"\"\"\n    audits = list(DATA_STORE['audits'].values())\n    return render_template('auditor/audits.html', audits=audits)\n\n@app.route('/findings')\n@login_required\n@role_required('auditor', 'auditee', 'director')\ndef findings():\n    \"\"\"Findings page\"\"\"\n    findings = list(DATA_STORE['findings'].values())\n    return render_template('auditor/findings.html', findings=findings)\n\n@app.route('/corrective-actions')\n@login_required\n@role_required('auditee')\ndef corrective_actions():\n    \"\"\"Corrective actions page\"\"\"\n    user = get_current_user()\n    \n    # Get all corrective actions\n    all_actions = DATA_STORE.get('corrective_actions', {})\n    \n    # Filter corrective actions for this auditee (responsible person or auditee of related finding)\n    my_actions = []\n    for action in all_actions.values():\n        # Check if auditee is responsible person\n        if action.get('responsible_person_id') == user.get('id'):\n            my_actions.append(action)\n        # Or check if auditee is assigned to the related finding\n        elif action.get('finding_id'):\n            finding = DATA_STORE.get('findings', {}).get(action['finding_id'])\n            if finding and finding.get('auditee_id') == user.get('id'):\n                my_actions.append(action)\n    \n    # If no actions exist, create sample ones for demonstration\n    if not my_actions:\n        # Get auditee's findings to create sample corrective actions\n        my_findings = [f for f in DATA_STORE.get('findings', {}).values() \n                      if f.get('auditee_id') == user.get('id')]\n        \n        if my_findings:\n            sample_actions = []\n            for finding in my_findings[:2]:  # Create samples for first 2 findings\n                sample_actions.extend([\n                    {\n                        'id': f\"action_{finding['id']}_1\",\n                        'finding_id': finding['id'],\n                        'title': f\"Corrective Action for {finding.get('title', 'Finding')}\",\n                        'description': f\"Address and resolve the issue: {finding.get('description', '')[:100]}...\",\n                        'status': 'pending',\n                        'priority': finding.get('severity', 'medium'),\n                        'responsible_person_id': user.get('id'),\n                        'responsible_person_name': f\"{user.get('first_name', '')} {user.get('last_name', '')}\".strip(),\n                        'target_date': '2025-02-28',\n                        'created_at': '2025-01-15T10:00:00',\n                        'audit_title': finding.get('audit_title', 'Unknown Audit')\n                    }\n                ])\n            my_actions = sample_actions\n    \n    # Get user notifications\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('auditee/corrective_actions.html', \n                         actions=my_actions,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/evidence-management')\n@login_required\n@role_required('auditor', 'auditee', 'director')\ndef evidence_management():\n    \"\"\"Evidence management page\"\"\"\n    evidence = list(DATA_STORE['evidence_files'].values())\n    return render_template('auditee/evidence.html', evidence=evidence)\n\n@app.route('/audit-reports')\n@login_required\n@role_required('auditor', 'director', 'head_of_business_control') \ndef audit_reports():\n    \"\"\"Audit reports page - filter for current user if auditor\"\"\"\n    user = get_current_user()\n    if not user:\n        flash('User session invalid. Please log in again.', 'error')\n        return redirect(url_for('landing'))\n    \n    # Get all reports and audits\n    all_reports = list(DATA_STORE['audit_reports'].values())\n    all_audits = list(DATA_STORE['audits'].values())\n    \n    # Filter reports and audits based on user role  \n    if user.get('role') == 'auditor':\n        # For auditors: only show reports for audits they are assigned to\n        assigned_audit_ids = [audit['id'] for audit in all_audits if audit.get('auditor_id') == user.get('id')]\n        reports = [report for report in all_reports if report.get('audit_id') in assigned_audit_ids]\n        audits = [audit for audit in all_audits if audit.get('auditor_id') == user.get('id')]\n    else:\n        # For directors and heads of business control: show all reports\n        reports = all_reports\n        audits = all_audits\n    \n    # Get user notifications\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user.get('id')]\n    \n    return render_template('auditor/reports.html', \n                         reports=reports, \n                         audits=audits,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/reports')\n@login_required\ndef reports():\n    \"\"\"Reports library alias\"\"\"\n    return report_library()\n\n@app.route('/profile')\n@login_required\ndef profile():\n    \"\"\"User profile page\"\"\"\n    user = get_current_user()\n    if not user:\n        flash('User session not found. Please log in again.', 'error')\n        return redirect(url_for('landing'))\n    \n    # Get user notifications\n    notifications = [n for n in DATA_STORE.get('notifications', []) if n.get('user_id') == user['id']]\n    \n    return render_template('profile.html', user=user, notifications=notifications)\n\n@app.route('/document-requests')\n@login_required\n@role_required('auditee')\ndef document_requests():\n    \"\"\"Document requests page\"\"\"\n    user = get_current_user()\n    \n    # Get document requests from DATA_STORE\n    all_requests = DATA_STORE.get('document_requests', {})\n    \n    # Get audits where this user is auditee\n    auditee_audits = [audit for audit in DATA_STORE.get('audits', {}).values() \n                     if audit.get('auditee_id') == user.get('id')]\n    auditee_audit_ids = [audit['id'] for audit in auditee_audits]\n    \n    # Filter document requests for auditee's audits\n    auditee_requests = [req for req in all_requests.values() \n                       if req.get('audit_id') in auditee_audit_ids]\n    \n    # If no requests exist, create some sample ones for demonstration\n    if not auditee_requests and auditee_audits:\n        sample_requests = []\n        for audit in auditee_audits[:2]:  # Create samples for first 2 audits\n            sample_requests.extend([\n                {\n                    'id': f\"req_{audit['id']}_1\",\n                    'audit_id': audit['id'],\n                    'audit_title': audit.get('title', 'Unknown Audit'),\n                    'requested_by_name': 'System Auditor',\n                    'document_type': 'Financial Records',\n                    'description': f\"Please provide financial records for {audit.get('title', 'audit')}\",\n                    'priority': 'high',\n                    'due_date': '2025-01-30',\n                    'status': 'pending'\n                },\n                {\n                    'id': f\"req_{audit['id']}_2\", \n                    'audit_id': audit['id'],\n                    'audit_title': audit.get('title', 'Unknown Audit'),\n                    'requested_by_name': 'System Auditor',\n                    'document_type': 'Policy Documents',\n                    'description': f\"Please provide policy documents for {audit.get('title', 'audit')}\",\n                    'priority': 'medium',\n                    'due_date': '2025-02-15',\n                    'status': 'pending'\n                }\n            ])\n        auditee_requests = sample_requests\n    \n    # Get user notifications\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('auditee/document_requests.html', \n                         requests=auditee_requests,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/upload-evidence-page')\n@login_required\n@role_required('auditee')\ndef upload_evidence_page():\n    \"\"\"Evidence upload page\"\"\"\n    user = get_current_user()\n    \n    # Get finding from URL parameter\n    finding_id = request.args.get('finding_id')\n    finding = None\n    if finding_id:\n        try:\n            finding = finding_model.get_by_id(finding_id)\n        except Exception as e:\n            flash(f'Error loading finding: {str(e)}', 'error')\n    \n    # If no finding, create a sample for template\n    if not finding:\n        finding = {\n            'id': 'sample',\n            'title': 'Sample Finding',\n            'description': 'Please select a finding to upload evidence for.',\n            'severity': 'medium',\n            'status': 'open'\n        }\n    \n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('auditee/upload_evidence.html', \n                         finding=finding,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/auditee-reports')\n@login_required\n@role_required('auditee')\ndef auditee_reports():\n    \"\"\"Auditee reports page\"\"\"\n    user = get_current_user()\n    \n    # Get all reports and audits\n    all_reports = list(DATA_STORE.get('audit_reports', {}).values())\n    all_audits = list(DATA_STORE.get('audits', {}).values())\n    \n    # Filter reports for audits where this user is auditee\n    auditee_audit_ids = [audit['id'] for audit in all_audits if audit.get('auditee_id') == user.get('id')]\n    auditee_reports = [report for report in all_reports if report.get('audit_id') in auditee_audit_ids]\n    \n    # Return only real data - no synthetic reports\n    \n    # Get user notifications\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('auditee/reports.html', \n                         reports=auditee_reports,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/auditee-followup')\n@login_required\n@role_required('auditee')\ndef auditee_followup():\n    \"\"\"Auditee follow-up page\"\"\"\n    user = get_current_user()\n    \n    # Get auditee's audits and related follow-up items\n    auditee_audits = [audit for audit in DATA_STORE.get('audits', {}).values() \n                     if audit.get('auditee_id') == user.get('id')]\n    \n    # Get corrective actions for follow-up tracking\n    my_actions = [action for action in DATA_STORE.get('corrective_actions', {}).values() \n                 if action.get('responsible_person_id') == user.get('id')]\n    \n    # Get completed audits for follow-up review\n    completed_audits = [audit for audit in auditee_audits if audit.get('status') == 'completed']\n    \n    # Create follow-up items from completed audits and pending actions\n    followup_items = []\n    \n    # Add overdue corrective actions\n    from datetime import datetime\n    for action in my_actions:\n        if action.get('target_date') and action.get('status') != 'completed':\n            try:\n                target_date = datetime.fromisoformat(action['target_date'])\n                if target_date < datetime.now():\n                    followup_items.append({\n                        'id': f\"overdue_action_{action['id']}\",\n                        'type': 'overdue_action',\n                        'title': f\"Overdue: {action.get('title', 'Corrective Action')}\",\n                        'description': action.get('description', ''),\n                        'due_date': action.get('target_date'),\n                        'priority': 'high',\n                        'status': action.get('status', 'pending'),\n                        'related_audit': action.get('audit_title', 'Unknown Audit')\n                    })\n            except (ValueError, TypeError):\n                pass\n    \n    # Add follow-up reviews for completed audits - only if we have real follow-up data\n    # Note: Only adding items if they exist in the data store, no synthetic generation\n    \n    # Return only real follow-up data - no synthetic items\n    \n    # Get user notifications\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('auditee/followup.html', \n                         followup_items=followup_items,\n                         my_actions=my_actions,\n                         completed_audits=completed_audits,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/change-password', methods=['GET', 'POST'])\n@login_required\ndef change_password():\n    \"\"\"Change password page\"\"\"\n    user = get_current_user()\n    if request.method == 'POST':\n        current_password = request.form.get('current_password')\n        new_password = request.form.get('new_password')\n        confirm_password = request.form.get('confirm_password')\n        \n        if new_password != confirm_password:\n            flash('New passwords do not match.', 'error')\n        else:\n            # Update password logic here\n            flash('Password updated successfully.', 'success')\n            return redirect(url_for('dashboard'))\n    \n    return render_template('change_password.html', user=user)\n\n@app.route('/user-profile')\n@login_required\ndef user_profile():\n    \"\"\"User profile page\"\"\"\n    user = get_current_user()\n    department = DATA_STORE['departments'].get(user.get('department_id')) if user.get('department_id') else None\n    return render_template('profile.html', user=user, department=department)\n\n# Removed duplicate landing function - using existing one\n\n@app.route('/manage-users')\n@login_required\n@role_required('director', 'head_of_business_control')\ndef manage_users_page():\n    \"\"\"Manage users page\"\"\"\n    return redirect(url_for('users'))\n\n@app.route('/manage-departments')\n@login_required\n@role_required('director', 'head_of_business_control')\ndef manage_departments_page():\n    \"\"\"Manage departments page\"\"\"\n    return redirect(url_for('departments'))\n\n@app.route('/users/edit/<user_id>', methods=['GET', 'POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef edit_user(user_id):\n    \"\"\"Edit user page\"\"\"\n    user = DATA_STORE['users'].get(user_id)\n    if not user:\n        abort(404)\n    \n    if request.method == 'POST':\n        try:\n            # Update user data\n            user['first_name'] = request.form.get('first_name', user.get('first_name', ''))\n            user['last_name'] = request.form.get('last_name', user.get('last_name', ''))\n            user['email'] = request.form.get('email', user.get('email', ''))\n            user['role'] = request.form.get('role', user.get('role', ''))\n            user['department_id'] = request.form.get('department_id', user.get('department_id', ''))\n            user['phone'] = request.form.get('phone', user.get('phone', ''))\n            \n            log_audit_action('update_user', 'user', user_id, f'User updated: {user.get(\"email\")}')\n            flash('User updated successfully.', 'success')\n            return redirect(url_for('users'))\n            \n        except Exception as e:\n            flash(f'Error updating user: {str(e)}', 'error')\n    \n    departments = list(DATA_STORE['departments'].values())\n    return render_template('admin/edit_user.html', user=user, departments=departments)\n\n@app.route('/users/create', methods=['GET', 'POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef create_new_user():\n    \"\"\"Create user route\"\"\"\n    if request.method == 'POST':\n        email = request.form.get('email')\n        name = request.form.get('name')\n        role = request.form.get('role')\n        department_id = request.form.get('department_id')\n        \n        new_user = {\n            'id': str(uuid4()),\n            'email': email,\n            'name': name,\n            'role': role,\n            'department_id': department_id,\n            'status': 'active',\n            'created_at': datetime.now().isoformat()\n        }\n        \n        DATA_STORE['users'][new_user['id']] = new_user\n        flash('User created successfully.', 'success')\n        return redirect(url_for('users'))\n\n@app.route('/departments/<department_id>/users/<user_id>/edit', methods=['GET', 'POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef edit_department_user(department_id, user_id):\n    \"\"\"Edit user in department context\"\"\"\n    return redirect(url_for('edit_user', user_id=user_id))\n\n@app.route('/departments/<department_id>/users/<user_id>/deactivate', methods=['POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef deactivate_department_user(department_id, user_id):\n    \"\"\"Deactivate user in department context\"\"\"\n    try:\n        user = DATA_STORE['users'].get(user_id)\n        if user:\n            user['is_active'] = False\n            flash('User has been deactivated successfully.', 'success')\n            log_audit_action('deactivate_user', 'user', user_id, f'User deactivated: {user.get(\"email\")}')\n        else:\n            flash('User not found.', 'error')\n    except Exception as e:\n        flash(f'Error deactivating user: {str(e)}', 'error')\n    return redirect(url_for('department_users', department_id=department_id))\n    \n    departments = list(DATA_STORE['departments'].values())\n    return render_template('admin/create_user.html', departments=departments)\n\n@app.route('/users/<user_id>/toggle-status', methods=['POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef toggle_user_status(user_id):\n    \"\"\"Toggle user status\"\"\"\n    try:\n        user = DATA_STORE['users'].get(user_id)\n        if user:\n            current_status = user.get('is_active', True)\n            user['is_active'] = not current_status\n            status_text = 'active' if user['is_active'] else 'inactive'\n            flash(f\"User status changed to {status_text}.\", 'success')\n            log_audit_action('update_user_status', 'user', user_id, f'User status changed to {status_text}')\n        else:\n            flash('User not found.', 'error')\n    except Exception as e:\n        flash(f'Error updating user status: {str(e)}', 'error')\n    return redirect(url_for('users'))\n\n@app.route('/users/<user_id>/delete', methods=['POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef delete_user(user_id):\n    \"\"\"Delete user\"\"\"\n    try:\n        user = DATA_STORE['users'].get(user_id)\n        if user:\n            del DATA_STORE['users'][user_id]\n            log_audit_action('delete_user', 'user', user_id, f'User deleted: {user.get(\"email\")}')\n            flash('User deleted successfully.', 'success')\n        else:\n            flash('User not found.', 'error')\n    except Exception as e:\n        flash(f'Error deleting user: {str(e)}', 'error')\n    return redirect(url_for('users'))\n\n@app.route('/departments/create', methods=['GET', 'POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef create_new_department():\n    \"\"\"Create department\"\"\"\n    if request.method == 'POST':\n        name = request.form.get('name')\n        description = request.form.get('description')\n        head_name = request.form.get('head_name')\n        \n        new_dept = {\n            'id': str(uuid4()),\n            'name': name,\n            'description': description,\n            'head_name': head_name,\n            'created_at': datetime.now().isoformat()\n        }\n        \n        DATA_STORE['departments'][new_dept['id']] = new_dept\n        flash('Department created successfully.', 'success')\n        return redirect(url_for('departments'))\n    \n    return render_template('admin/create_department.html')\n\n@app.route('/departments/<department_id>/delete', methods=['POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef delete_department(department_id):\n    \"\"\"Delete department - permanently removes department from system\"\"\"\n    try:\n        department = DATA_STORE.get('departments', {}).get(department_id)\n        if not department:\n            flash('Department not found.', 'error')\n            return redirect(url_for('departments'))\n        \n        # Check if department has users\n        dept_users = [u for u in DATA_STORE.get('users', {}).values() if u.get('department_id') == department_id]\n        \n        if dept_users:\n            flash(f'Cannot delete department with {len(dept_users)} assigned users. Please reassign users first.', 'error')\n            return redirect(url_for('departments'))\n        \n        # Delete from DATA_STORE\n        del DATA_STORE['departments'][department_id]\n        \n        log_audit_action('delete', 'department', department_id, f'Department permanently deleted: {department.get(\"name\")}')\n        flash('Department deleted successfully.', 'success')\n        \n    except Exception as e:\n        flash(f'Error deleting department: {str(e)}', 'error')\n    \n    return redirect(url_for('departments'))\n\n@app.route('/departments/<department_id>/delete_old', methods=['POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef delete_department_old(department_id):\n    \"\"\"Old delete department route with CSRF\"\"\"\n    try:\n        # Validate CSRF token\n        csrf_token = request.form.get('csrf_token') or (request.get_json() or {}).get('csrf_token')\n        if not validate_csrf_token(csrf_token):\n            flash('Invalid security token. Please try again.', 'error')\n            return redirect(url_for('departments'))\n        \n        department = DATA_STORE['departments'].get(department_id)\n        if department:\n            # Check if department has users\n            dept_users = [u for u in DATA_STORE['users'].values() if u.get('department_id') == department_id]\n            if dept_users:\n                flash(f'Cannot delete department with {len(dept_users)} assigned users. Please reassign users first.', 'error')\n                return redirect(url_for('departments'))\n            \n            del DATA_STORE['departments'][department_id]\n            log_audit_action('delete_department', 'department', department_id, f'Department deleted: {department.get(\"name\")}')\n            flash('Department deleted successfully.', 'success')\n        else:\n            flash('Department not found.', 'error')\n    except Exception as e:\n        flash(f'Error deleting department: {str(e)}', 'error')\n    return redirect(url_for('departments'))\n\n# CSRF Token endpoint\n@app.route('/csrf-token')\n@login_required\ndef get_csrf_token():\n    \"\"\"Get CSRF token for AJAX requests\"\"\"\n    return jsonify({'csrf_token': generate_csrf_token()})\n\n@app.route('/departments/<department_id>/toggle-status', methods=['POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef toggle_department_status(department_id):\n    \"\"\"Toggle department status\"\"\"\n    try:\n        department = DATA_STORE['departments'].get(department_id)\n        if department:\n            current_status = department.get('is_active', True)\n            department['is_active'] = not current_status\n            status_text = 'active' if department['is_active'] else 'inactive'\n            flash(f\"Department status changed to {status_text}.\", 'success')\n            log_audit_action('update_department_status', 'department', department_id, f'Department status changed to {status_text}')\n        else:\n            flash('Department not found.', 'error')\n    except Exception as e:\n        flash(f'Error updating department status: {str(e)}', 'error')\n    return redirect(url_for('departments'))\n\n@app.route('/departments/<department_id>/users')\n@login_required\n@role_required('director', 'head_of_business_control')\ndef department_users(department_id):\n    \"\"\"View users in department\"\"\"\n    department = DATA_STORE['departments'].get(department_id)\n    if not department:\n        abort(404)\n    \n    users = [u for u in DATA_STORE['users'].values() if u.get('department_id') == department_id]\n    return render_template('admin/department_users.html', department=department, users=users)\n\n# More missing routes\n@app.route('/risk-assessment/create', methods=['GET', 'POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef create_new_risk_assessment():\n    \"\"\"Create risk assessment\"\"\"\n    if request.method == 'POST':\n        # Handle risk assessment creation\n        flash('Risk assessment created successfully.', 'success')\n        return redirect(url_for('risk_assessment'))\n    return render_template('create_risk_assessment.html')\n\n@app.route('/audit-planning/create', methods=['GET', 'POST'])\n@login_required\n@role_required('director', 'head_of_business_control')\ndef create_new_audit_plan():\n    \"\"\"Create audit plan\"\"\"\n    if request.method == 'POST':\n        # Handle audit plan creation\n        flash('Audit plan created successfully.', 'success')\n        return redirect(url_for('audit_planning'))\n    return render_template('create_audit_plan.html')\n\n@app.route('/audits')\n@login_required\ndef audit_list():\n    \"\"\"List audits based on user role\"\"\"\n    user = get_current_user()\n    audits = list(DATA_STORE['audits'].values())\n    \n    # Filter audits based on role\n    if user['role'] == 'auditor':\n        audits = [audit for audit in audits if audit.get('auditor_id') == user['id']]\n    elif user['role'] == 'auditee':\n        audits = [audit for audit in audits if audit.get('auditee_id') == user['id']]\n    \n    return render_template('audits/list.html', audits=audits, user=user)\n\n@app.route('/audit/<audit_id>/finding/create', methods=['GET', 'POST'])\n@login_required\n@role_required('auditor')\ndef create_finding(audit_id):\n    \"\"\"Create a new finding\"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        abort(404)\n    \n    if request.method == 'POST':\n        try:\n            finding_data = {\n                'id': str(uuid4()),\n                'audit_id': audit_id,\n                'title': request.form.get('title'),\n                'description': request.form.get('description'),\n                'severity': request.form.get('severity'),\n                'status': 'open',\n                'created_by': get_current_user()['id'],\n                'created_at': datetime.now().isoformat(),\n                'recommendations': request.form.get('recommendations', '')\n            }\n            \n            DATA_STORE['findings'][finding_data['id']] = finding_data\n            log_audit_action('create_finding', 'finding', finding_data['id'], f'Finding created: {finding_data[\"title\"]}')\n            flash('Finding created successfully.', 'success')\n            return redirect(url_for('audit_detail', audit_id=audit_id))\n            \n        except Exception as e:\n            flash(f'Error creating finding: {str(e)}', 'error')\n    \n    return render_template('auditor/create_finding.html', audit=audit)\n\n@app.route('/audit/<audit_id>')\n@login_required\ndef audit_detail(audit_id):\n    \"\"\"Audit detail page\"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        abort(404)\n    \n    # Get current user and notifications\n    user = get_current_user()\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    # Get findings for this audit\n    findings = [f for f in DATA_STORE['findings'].values() if f.get('audit_id') == audit_id]\n    \n    return render_template('audits/detail.html', \n                         audit=audit,\n                         findings=findings,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/audit/<audit_id>/edit')\n@login_required\n@role_required('director', 'head_of_business_control')\ndef edit_audit(audit_id):\n    \"\"\"Edit audit page\"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        abort(404)\n    return render_template('audits/edit.html', audit=audit)\n\n@app.route('/create-audit')\n@login_required\n@role_required('director', 'head_of_business_control')\ndef create_audit():\n    \"\"\"Create new audit\"\"\"\n    return render_template('audits/create.html')\n\n@app.route('/reports/generate', methods=['GET', 'POST'])\n@login_required\ndef generate_report():\n    \"\"\"Generate report page\"\"\"\n    if request.method == 'POST':\n        # Handle report generation\n        report_type = request.form.get('report_type')\n        audit_id = request.form.get('audit_id')\n        \n        try:\n            # Generate report logic here\n            new_report = {\n                'id': str(uuid4()),\n                'type': report_type,\n                'audit_id': audit_id,\n                'generated_by': get_current_user()['id'],\n                'generated_at': datetime.now().isoformat(),\n                'title': f'{report_type.title()} Report',\n                'status': 'completed'\n            }\n            \n            DATA_STORE['audit_reports'][new_report['id']] = new_report\n            flash('Report generated successfully.', 'success')\n            return redirect(url_for('view_report', report_id=new_report['id']))\n            \n        except Exception as e:\n            flash(f'Error generating report: {str(e)}', 'error')\n    \n    # Get audits for report selection\n    audits = list(DATA_STORE['audits'].values())\n    user = get_current_user()\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('reports/generate.html', \n                         audits=audits,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/reports/<report_id>')\n@login_required\ndef view_report(report_id):\n    \"\"\"View report page\"\"\"\n    report = DATA_STORE['audit_reports'].get(report_id)\n    if not report:\n        abort(404)\n    return render_template('reports/view.html', report=report)\n\n@app.route('/reports/<report_id>/edit')\n@login_required\n@role_required('director', 'head_of_business_control')\ndef edit_report(report_id):\n    \"\"\"Edit report page\"\"\"\n    report = DATA_STORE['audit_reports'].get(report_id)\n    if not report:\n        abort(404)\n    return render_template('reports/edit.html', report=report)\n\n@app.route('/reports/<report_id>/download')\n@login_required\ndef download_report(report_id):\n    \"\"\"Download report\"\"\"\n    report = DATA_STORE['audit_reports'].get(report_id)\n    if not report:\n        abort(404)\n    \n    # Generate and return PDF if ReportLab is available\n    if REPORTLAB_AVAILABLE:\n        try:\n            from io import BytesIO\n            from reportlab.lib.pagesizes import letter\n            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer\n            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\n            from reportlab.lib.units import inch\n            import html\n            \n            # Create a BytesIO buffer to hold the PDF\n            buffer = BytesIO()\n            \n            # Create the PDF document\n            doc = SimpleDocTemplate(buffer, pagesize=letter)\n            styles = getSampleStyleSheet()\n            story = []\n            \n            # Add title\n            title = report.get('title', 'Audit Report')\n            title_style = ParagraphStyle(\n                'CustomTitle',\n                parent=styles['Heading1'],\n                fontSize=18,\n                spaceAfter=30,\n                alignment=1  # Center alignment\n            )\n            story.append(Paragraph(title, title_style))\n            story.append(Spacer(1, 20))\n            \n            # Add report metadata\n            metadata = f\"\"\"\n            <b>Report Type:</b> {report.get('type', 'N/A').title()}<br/>\n            <b>Department:</b> {report.get('department_name', 'N/A')}<br/>\n            <b>Generated Date:</b> {report.get('generated_at', 'N/A')}<br/>\n            <b>Generated By:</b> {report.get('generated_by_name', 'N/A')}<br/>\n            <b>Status:</b> {report.get('status', 'N/A').title()}\n            \"\"\"\n            story.append(Paragraph(metadata, styles['Normal']))\n            story.append(Spacer(1, 30))\n            \n            # Add report content\n            content = report.get('content', 'No content available')\n            # Simple HTML to text conversion for PDF\n            content = content.replace('<div class=\"report-content\">', '')\n            content = content.replace('</div>', '')\n            content = content.replace('<h2>', '<b><font size=\"16\">')\n            content = content.replace('</h2>', '</font></b><br/><br/>')\n            content = content.replace('<h3>', '<b><font size=\"14\">')\n            content = content.replace('</h3>', '</font></b><br/>')\n            content = content.replace('<ul>', '<br/>')\n            content = content.replace('</ul>', '<br/>')\n            content = content.replace('<ol>', '<br/>')\n            content = content.replace('</ol>', '<br/>')\n            content = content.replace('<li>', '• ')\n            content = content.replace('</li>', '<br/>')\n            content = content.replace('<p>', '')\n            content = content.replace('</p>', '<br/><br/>')\n            \n            story.append(Paragraph(content, styles['Normal']))\n            \n            # Build PDF\n            doc.build(story)\n            \n            # Get PDF data\n            pdf_data = buffer.getvalue()\n            buffer.close()\n            \n            # Create response\n            response = make_response(pdf_data)\n            response.headers['Content-Type'] = 'application/pdf'\n            response.headers['Content-Disposition'] = f'attachment; filename=\"{report.get(\"title\", \"report\").replace(\" \", \"_\")}_{report_id}.pdf\"'\n            \n            # Increment download count\n            if report_id in DATA_STORE['audit_reports']:\n                DATA_STORE['audit_reports'][report_id]['download_count'] = DATA_STORE['audit_reports'][report_id].get('download_count', 0) + 1\n            \n            return response\n            \n        except Exception as e:\n            flash(f'Error generating PDF: {str(e)}', 'error')\n            return redirect(url_for('view_report', report_id=report_id))\n    else:\n        flash('PDF generation not available.', 'error')\n        return redirect(url_for('view_report', report_id=report_id))\n\n# Additional route implementations\n@app.route('/auditee-findings')\n@login_required\n@role_required('auditee')\ndef auditee_findings():\n    \"\"\"Auditee findings page\"\"\"\n    user = get_current_user()\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    # Get findings assigned to this auditee\n    all_findings = DATA_STORE.get('findings', {})\n    my_findings = [f for f in all_findings.values() if f.get('auditee_id') == user['id']]\n    \n    return render_template('auditee/findings.html',\n                         findings=my_findings,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/view-document-request/<request_id>')\n@login_required\ndef view_document_request(request_id):\n    \"\"\"View document request\"\"\"\n    # Create a sample document request if not found\n    document_request = {\n        'id': request_id,\n        'audit_title': 'Sample Audit',\n        'requested_by_name': 'Auditor Name',\n        'document_type': 'Financial Records',\n        'description': 'Please provide the requested financial documents.',\n        'due_date': '2025-01-30',\n        'priority': 'high'\n    }\n    \n    user = get_current_user()\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('auditee/document_requests.html',\n                         request=document_request,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/review-plan/<plan_id>')\n@login_required\n@role_required('director')\ndef review_plan(plan_id):\n    \"\"\"Review audit plan\"\"\"\n    plan = DATA_STORE.get('audits', {}).get(plan_id)\n    if not plan:\n        flash('Audit plan not found.', 'error')\n        return redirect(url_for('dashboard'))\n    \n    # Enrich plan data\n    dept = DATA_STORE.get('departments', {}).get(plan.get('department_id'))\n    if dept:\n        plan['department_name'] = dept.get('name', 'N/A')\n    \n    creator = DATA_STORE.get('users', {}).get(plan.get('created_by_id'))\n    if creator:\n        plan['created_by_name'] = f\"{creator.get('first_name', '')} {creator.get('last_name', '')}\".strip()\n    \n    user = get_current_user()\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('director/review_plan.html',\n                         plan=plan,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/approve-plan/<plan_id>', methods=['POST'])\n@login_required\n@role_required('director')\ndef approve_plan(plan_id):\n    \"\"\"Approve audit plan\"\"\"\n    plan = DATA_STORE.get('audits', {}).get(plan_id)\n    if plan:\n        decision = request.form.get('decision', 'approve')\n        director_feedback = request.form.get('director_feedback', '')\n        \n        if decision == 'approve':\n            plan['status'] = 'director_approved'\n            plan['approved_by'] = get_current_user()['id']\n            plan['approved_at'] = datetime.now().isoformat()\n            plan['director_feedback'] = director_feedback\n            \n            # Notify HBC that plan is approved\n            create_notification(\n                user_role='head_of_business_control',\n                title='Audit Plan Approved',\n                message=f'Director approved audit plan: \"{plan.get(\"title\", \"\")}\". You can now assign an auditor.',\n                notification_type='plan_approved',\n                related_entity_type='audit',\n                related_entity_id=plan_id\n            )\n            \n            flash('Audit plan approved successfully.', 'success')\n            log_audit_action('approve_plan', 'audit', plan_id, 'Audit plan approved by director')\n        else:\n            # Request changes\n            plan['status'] = 'changes_requested'\n            plan['director_feedback'] = director_feedback\n            \n            # Notify HBC that changes are requested\n            create_notification(\n                user_role='head_of_business_control',\n                title='Audit Plan - Changes Requested',\n                message=f'Director requested changes to audit plan: \"{plan.get(\"title\", \"\")}\". Please review the feedback.',\n                notification_type='changes_requested',\n                related_entity_type='audit',\n                related_entity_id=plan_id\n            )\n            \n            flash('Changes requested. HBC has been notified.', 'info')\n            log_audit_action('request_changes', 'audit', plan_id, 'Director requested changes to audit plan')\n    else:\n        flash('Audit plan not found.', 'error')\n    \n    return redirect(url_for('dashboard'))\n\n@app.route('/view-message/<message_id>')\n@login_required\ndef view_message(message_id):\n    \"\"\"View message\"\"\"\n    # Sample message data\n    message = {\n        'id': message_id,\n        'from_name': 'Sample Sender',\n        'subject': 'Document Request',\n        'content': 'Please provide the requested documents.',\n        'created_at': datetime.now().isoformat()\n    }\n    \n    user = get_current_user()\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('messages.html',\n                         message=message,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/respond-message/<message_id>')\n@login_required\ndef respond_message(message_id):\n    \"\"\"Respond to message\"\"\"\n    flash('Message response functionality will be implemented.', 'info')\n    return redirect(url_for('view_message', message_id=message_id))\n\n@app.route('/audit/<audit_id>/findings')\n@login_required\ndef audit_findings(audit_id):\n    \"\"\"Audit findings page\"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        abort(404)\n    findings = [f for f in DATA_STORE['findings'].values() if f.get('audit_id') == audit_id]\n    return render_template('audits/findings.html', audit=audit, findings=findings)\n\n@app.route('/notifications/delete/<notification_id>', methods=['POST'])\n@login_required\ndef delete_user_notification(notification_id):\n    \"\"\"Delete user notification\"\"\"\n    user = get_current_user()\n    notifications = DATA_STORE.get('notifications', [])\n    updated_notifications = [n for n in notifications if not (n.get('id') == notification_id and n.get('user_id') == user['id'])]\n    DATA_STORE['notifications'] = updated_notifications\n    flash('Notification deleted.', 'success')\n    return redirect(url_for('profile'))\n\n@app.route('/notifications/delete-all', methods=['POST'])\n@login_required\ndef delete_all_user_notifications():\n    \"\"\"Delete all user notifications\"\"\"\n    user = get_current_user()\n    notifications = DATA_STORE.get('notifications', [])\n    updated_notifications = [n for n in notifications if n.get('user_id') != user['id']]\n    DATA_STORE['notifications'] = updated_notifications\n    flash('All notifications deleted.', 'success')\n    return redirect(url_for('profile'))\n\n@app.route('/admin/notifications/delete/<notification_id>', methods=['POST'])\n@login_required\n@role_required('director')\ndef admin_delete_notification(notification_id):\n    \"\"\"Delete notification as admin\"\"\"\n    notifications = DATA_STORE.get('notifications', [])\n    DATA_STORE['notifications'] = [n for n in notifications if n.get('id') != notification_id]\n    flash('Notification deleted.', 'success')\n    return redirect(request.referrer or url_for('dashboard'))\n\n@app.route('/admin/notifications/delete-all', methods=['POST'])\n@login_required\n@role_required('director')\ndef admin_delete_all_notifications():\n    \"\"\"Delete all notifications as admin\"\"\"\n    DATA_STORE['notifications'] = []\n    flash('All notifications deleted.', 'success')\n    return redirect(request.referrer or url_for('dashboard'))\n\n# ===============================================\n# ENGAGEMENT SETUP AND FIELD COMMUNICATION ROUTES\n# ===============================================\n\n@app.route('/engagement-setup')\n@login_required\n@role_required('head_of_business_control', 'auditor', 'director')\ndef engagement_setup():\n    \"\"\"Engagement Setup - comprehensive audit setup interface\"\"\"\n    user = get_current_user()\n    \n    # Get audits in various setup phases\n    all_audits = list(DATA_STORE['audits'].values())\n    \n    # Filter audits by setup phase\n    planning_audits = [audit for audit in all_audits if audit.get('status') in ['assigned', 'acknowledged']]\n    approval_audits = [audit for audit in all_audits if audit.get('status') in ['plan_submitted', 'pending_director_approval']]\n    coordination_audits = [audit for audit in all_audits if audit.get('status') in ['approved', 'coordinating']]\n    \n    # Get available resources\n    auditors = [u for u in DATA_STORE['users'].values() if u.get('role') == 'auditor' and u.get('is_active', True)]\n    auditees = [u for u in DATA_STORE['users'].values() if u.get('role') == 'auditee' and u.get('is_active', True)]\n    departments = list(DATA_STORE['departments'].values())\n    \n    # Setup statistics\n    setup_stats = {\n        'total_audits': len(all_audits),\n        'planning_phase': len(planning_audits),\n        'approval_phase': len(approval_audits),\n        'coordination_phase': len(coordination_audits),\n        'available_auditors': len(auditors),\n        'available_auditees': len(auditees)\n    }\n    \n    # Get user notifications\n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('engagement_setup.html',\n                         planning_audits=planning_audits,\n                         approval_audits=approval_audits,\n                         coordination_audits=coordination_audits,\n                         auditors=auditors,\n                         auditees=auditees,\n                         departments=departments,\n                         setup_stats=setup_stats,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/engagement-setup/create-plan', methods=['POST'])\n@login_required\n@role_required('head_of_business_control')\ndef create_engagement_plan():\n    \"\"\"Create a new engagement plan\"\"\"\n    try:\n        plan_data = {\n            'title': request.form['title'],\n            'description': request.form['description'],\n            'department_id': request.form['department_id'],\n            'audit_type': request.form['audit_type'],\n            'priority': request.form['priority'],\n            'planned_start_date': request.form['planned_start_date'],\n            'planned_end_date': request.form['planned_end_date'],\n            'audit_scope': request.form.get('audit_scope', ''),\n            'audit_objectives': request.form.get('audit_objectives', ''),\n            'audit_criteria': request.form.get('audit_criteria', ''),\n            'resources_needed': request.form.get('resources_needed', ''),\n            'status': 'pending_director_approval',\n            'created_by_id': get_current_user()['id'],\n            'created_at': datetime.now().isoformat(),\n            'reference_number': f\"AUD-{datetime.now().year}-{len(DATA_STORE['audits']) + 1:04d}\"\n        }\n        \n        audit_id = str(uuid.uuid4())\n        plan_data['id'] = audit_id\n        DATA_STORE['audits'][audit_id] = plan_data\n        \n        log_audit_action('create_engagement_plan', 'audit', audit_id, 'New engagement plan created')\n        flash('Engagement plan created successfully and submitted for director approval.', 'success')\n        \n    except Exception as e:\n        flash(f'Error creating engagement plan: {str(e)}', 'error')\n    \n    return redirect(url_for('engagement_setup'))\n\n@app.route('/engagement-setup/coordinate/<audit_id>')\n@login_required\n@role_required('head_of_business_control', 'auditor')\ndef coordinate_engagement(audit_id):\n    \"\"\"Coordinate specific engagement setup\"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        flash('Audit not found.', 'error')\n        return redirect(url_for('engagement_setup'))\n    \n    user = get_current_user()\n    \n    # Get related data\n    auditor = None\n    auditee = None\n    department = None\n    \n    if audit.get('auditor_id'):\n        auditor = DATA_STORE['users'].get(audit['auditor_id'])\n    if audit.get('auditee_id'):\n        auditee = DATA_STORE['users'].get(audit['auditee_id'])\n    if audit.get('department_id'):\n        department = DATA_STORE['departments'].get(audit['department_id'])\n    \n    # Get engagement checklist items\n    checklist_items = [\n        {'id': 1, 'task': 'Assign auditor and auditee', 'status': 'completed' if audit.get('auditor_id') else 'pending'},\n        {'id': 2, 'task': 'Schedule opening meeting', 'status': audit.get('opening_meeting_scheduled', 'pending')},\n        {'id': 3, 'task': 'Prepare document request list', 'status': audit.get('documents_requested', 'pending')},\n        {'id': 4, 'task': 'Confirm access arrangements', 'status': audit.get('access_confirmed', 'pending')},\n        {'id': 5, 'task': 'Set up communication channels', 'status': audit.get('communication_setup', 'pending')},\n        {'id': 6, 'task': 'Notify stakeholders', 'status': audit.get('stakeholders_notified', 'pending')}\n    ]\n    \n    # Get messages related to this audit\n    audit_messages = [msg for msg in DATA_STORE['messages'].values() \n                     if msg.get('audit_id') == audit_id]\n    \n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('engagement_coordination.html',\n                         audit=audit,\n                         auditor=auditor,\n                         auditee=auditee,\n                         department=department,\n                         checklist_items=checklist_items,\n                         audit_messages=audit_messages,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/field-communication')\n@login_required  \n@role_required('auditor', 'auditee', 'head_of_business_control')\ndef field_communication():\n    \"\"\"Field Communication - real-time communication during audit execution\"\"\"\n    user = get_current_user()\n    \n    # Get user's active audits\n    active_audits = []\n    if user.get('role') == 'auditor':\n        active_audits = [audit for audit in DATA_STORE['audits'].values() \n                        if audit.get('auditor_id') == user['id'] and audit.get('status') in ['in_progress', 'assigned', 'acknowledged']]\n    elif user.get('role') == 'auditee':\n        active_audits = [audit for audit in DATA_STORE['audits'].values() \n                        if audit.get('auditee_id') == user['id'] and audit.get('status') in ['in_progress', 'assigned', 'acknowledged']]\n    elif user.get('role') == 'head_of_business_control':\n        active_audits = [audit for audit in DATA_STORE['audits'].values() \n                        if audit.get('supervisor_id') == user['id'] and audit.get('status') in ['in_progress', 'assigned', 'acknowledged']]\n    \n    # Get all messages for active audits\n    audit_messages = {}\n    for audit in active_audits:\n        audit_id = audit['id']\n        messages = [msg for msg in DATA_STORE['messages'].values() \n                   if msg.get('audit_id') == audit_id]\n        audit_messages[audit_id] = sorted(messages, key=lambda x: x.get('created_at', ''), reverse=True)\n    \n    # Get document requests\n    document_requests = []\n    for audit in active_audits:\n        # Create sample document requests based on audit status\n        if audit.get('status') in ['in_progress', 'acknowledged']:\n            document_requests.extend([\n                {\n                    'id': f\"req_{audit['id']}_1\",\n                    'audit_id': audit['id'],\n                    'audit_title': audit.get('title', 'Untitled Audit'),\n                    'document_type': 'Financial Records',\n                    'description': 'Monthly financial statements and transaction logs',\n                    'priority': 'high',\n                    'status': 'pending',\n                    'due_date': '2025-10-15',\n                    'requested_by': 'Auditor',\n                    'created_at': datetime.now().isoformat()\n                },\n                {\n                    'id': f\"req_{audit['id']}_2\", \n                    'audit_id': audit['id'],\n                    'audit_title': audit.get('title', 'Untitled Audit'),\n                    'document_type': 'Policy Documents',\n                    'description': 'Current operational policies and procedures',\n                    'priority': 'medium',\n                    'status': 'pending',\n                    'due_date': '2025-10-20',\n                    'requested_by': 'Auditor',\n                    'created_at': datetime.now().isoformat()\n                }\n            ])\n    \n    # Get evidence files\n    evidence_files = []\n    for audit in active_audits:\n        audit_evidence = [evidence for evidence in DATA_STORE['evidence_files'].values() \n                         if evidence.get('audit_id') == audit['id']]\n        evidence_files.extend(audit_evidence)\n    \n    # Communication statistics\n    comm_stats = {\n        'active_audits': len(active_audits),\n        'total_messages': sum(len(msgs) for msgs in audit_messages.values()),\n        'pending_requests': len([req for req in document_requests if req.get('status') == 'pending']),\n        'evidence_files': len(evidence_files),\n        'unread_messages': sum(len([msg for msg in msgs if not msg.get('is_read', False)]) for msgs in audit_messages.values())\n    }\n    \n    # Get all users for messaging\n    all_users = [u for u in DATA_STORE['users'].values() if u.get('id') != user['id'] and u.get('is_active', True)]\n    \n    notifications = [n for n in DATA_STORE.get('notifications', {}).values() if n.get('user_id') == user['id']]\n    \n    return render_template('field_communication.html',\n                         active_audits=active_audits,\n                         audit_messages=audit_messages,\n                         document_requests=document_requests,\n                         evidence_files=evidence_files,\n                         comm_stats=comm_stats,\n                         all_users=all_users,\n                         current_user=user,\n                         notifications=notifications)\n\n@app.route('/field-communication/send-request', methods=['POST'])\n@login_required\n@role_required('auditor')\ndef send_document_request():\n    \"\"\"Send document request to auditee\"\"\"\n    try:\n        request_data = {\n            'id': str(uuid.uuid4()),\n            'audit_id': request.form['audit_id'],\n            'document_type': request.form['document_type'],\n            'description': request.form['description'],\n            'priority': request.form.get('priority', 'medium'),\n            'due_date': request.form['due_date'],\n            'status': 'pending',\n            'requested_by': get_current_user()['id'],\n            'created_at': datetime.now().isoformat()\n        }\n        \n        # Store request (in a real app this would go to a document_requests collection)\n        if 'document_requests' not in DATA_STORE:\n            DATA_STORE['document_requests'] = {}\n        DATA_STORE['document_requests'][request_data['id']] = request_data\n        \n        log_audit_action('send_document_request', 'document_request', request_data['id'], 'Document request sent')\n        flash('Document request sent successfully.', 'success')\n        \n    except Exception as e:\n        flash(f'Error sending document request: {str(e)}', 'error')\n    \n    return redirect(url_for('field_communication'))\n\n@app.route('/field-communication/quick-message', methods=['POST'])\n@login_required\ndef send_quick_message():\n    \"\"\"Send quick message in field communication\"\"\"\n    try:\n        message_data = {\n            'audit_id': request.form['audit_id'],\n            'sender_id': get_current_user()['id'],\n            'recipient_id': request.form['recipient_id'],\n            'message_content': request.form['message_content'],\n            'message_type': 'quick_communication',\n            'subject': request.form.get('subject', 'Field Communication'),\n            'priority': request.form.get('priority', 'normal'),\n            'created_at': datetime.now().isoformat()\n        }\n        \n        message_id = message_model.send_message(message_data)\n        log_audit_action('send_quick_message', 'message', message_id, 'Quick message sent')\n        \n        flash('Message sent successfully.', 'success')\n        \n    except Exception as e:\n        flash(f'Error sending message: {str(e)}', 'error')\n    \n    return redirect(url_for('field_communication'))\n\n# ============================================================================\n# AUDIT MANAGEMENT SYSTEM WORKFLOW ROUTES (3-Phase System)\n# ============================================================================\n\n# ==================== PHASE 1: AUDIT ASSIGNMENT PHASE ====================\n\n@app.route('/audit/create', methods=['GET', 'POST'])\n@login_required\n@role_required('head_of_business_control')\ndef create_audit_workflow():\n    \"\"\"\n    Phase 1, Steps 1-3: HBC creates audit request, defines scope & objectives,\n    develops audit plan (Draft status)\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            user = get_current_user()\n            audit_data = {\n                'id': str(uuid.uuid4()),\n                'reference_number': f\"AUD-{datetime.now().year}-{str(uuid.uuid4())[:8].upper()}\",\n                'title': request.form['title'],\n                'description': request.form.get('description', ''),\n                'audit_type': request.form['audit_type'],\n                'department_id': request.form.get('department_id'),\n                'status': 'draft',\n                'priority': request.form.get('priority', 'medium'),\n                \n                # Trigger information (Step 1)\n                'trigger_type': request.form.get('trigger_type', 'scheduled'),\n                'trigger_details': request.form.get('trigger_details', ''),\n                \n                # Scope & Objectives (Step 2)\n                'audit_scope': request.form.get('audit_scope', ''),\n                'audit_objectives': request.form.get('audit_objectives', ''),\n                'audit_criteria': request.form.get('audit_criteria', ''),\n                'resources_needed': request.form.get('resources_needed', ''),\n                \n                # Dates\n                'planned_start_date': request.form.get('planned_start_date'),\n                'planned_end_date': request.form.get('planned_end_date'),\n                \n                # Audit Plan (Step 3)\n                'audit_plan': request.form.get('audit_plan', ''),\n                'activity_breakdown': request.form.get('activity_breakdown', ''),\n                'audit_checklist': request.form.get('audit_checklist', ''),\n                'data_request_list': request.form.get('data_request_list', ''),\n                \n                # Meta\n                'created_by_id': user['id'],\n                'created_at': datetime.now().isoformat(),\n                'updated_at': datetime.now().isoformat()\n            }\n            \n            audit_id = audit_data['id']\n            DATA_STORE['audits'][audit_id] = audit_data\n            \n            log_audit_action('create_audit', 'audit', audit_id, f'Audit created: {audit_data[\"title\"]}')\n            \n            flash(f'Audit \"{audit_data[\"title\"]}\" created successfully as draft.', 'success')\n            return redirect(url_for('head_of_business_control_dashboard'))\n            \n        except Exception as e:\n            flash(f'Error creating audit: {str(e)}', 'error')\n    \n    departments = list(DATA_STORE['departments'].values())\n    return render_template('audits/create_comprehensive.html', departments=departments)\n\n\n@app.route('/audit/<audit_id>/submit-to-director', methods=['POST'])\n@login_required\n@role_required('head_of_business_control')\ndef submit_audit_to_director(audit_id):\n    \"\"\"\n    Phase 1, Step 3: HBC submits audit plan to Director for review\n    Status: draft -> pending_director_approval\n    \"\"\"\n    try:\n        audit = DATA_STORE['audits'].get(audit_id)\n        if not audit:\n            flash('Audit not found.', 'error')\n            return redirect(url_for('head_of_business_control_dashboard'))\n        \n        if audit['status'] != 'draft':\n            flash('Audit is not in draft status.', 'error')\n            return redirect(url_for('head_of_business_control_dashboard'))\n        \n        # Update audit status\n        audit['status'] = 'pending_director_approval'\n        audit['plan_submitted_at'] = datetime.now().isoformat()\n        audit['updated_at'] = datetime.now().isoformat()\n        \n        # Create notification for Director\n        create_notification(\n            user_role='director',\n            title='Audit Plan Approval Required',\n            message=f'Audit \"{audit[\"title\"]}\" has been submitted for your review and approval.',\n            notification_type='plan_approval_needed',\n            related_entity_type='audit',\n            related_entity_id=audit_id\n        )\n        \n        log_audit_action('submit_to_director', 'audit', audit_id, 'Audit plan submitted to Director for approval')\n        \n        flash(f'Audit plan submitted to Director for approval.', 'success')\n        \n    except Exception as e:\n        flash(f'Error submitting audit: {str(e)}', 'error')\n    \n    return redirect(url_for('head_of_business_control_dashboard'))\n\n\n@app.route('/audit/<audit_id>/director-review', methods=['GET', 'POST'])\n@login_required\n@role_required('director')\ndef director_review_audit(audit_id):\n    \"\"\"\n    Phase 1, Step 4: Director reviews and approves/rejects audit plan\n    Status: pending_director_approval -> director_approved (or back to draft)\n    \"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        flash('Audit not found.', 'error')\n        return redirect(url_for('director_dashboard'))\n    \n    if request.method == 'POST':\n        try:\n            action = request.form.get('action')\n            feedback = request.form.get('director_feedback', '')\n            \n            if action == 'approve':\n                audit['status'] = 'director_approved'\n                audit['director_approved_at'] = datetime.now().isoformat()\n                audit['director_feedback'] = feedback\n                audit['updated_at'] = datetime.now().isoformat()\n                \n                # Notify HBC\n                create_notification(\n                    user_role='head_of_business_control',\n                    title='Audit Plan Approved',\n                    message=f'Director approved audit plan: \"{audit[\"title\"]}\". You can now assign an auditor.',\n                    notification_type='plan_approved',\n                    related_entity_type='audit',\n                    related_entity_id=audit_id\n                )\n                \n                log_audit_action('approve_audit', 'audit', audit_id, 'Director approved audit plan')\n                flash('Audit plan approved successfully.', 'success')\n                \n            elif action == 'reject':\n                audit['status'] = 'draft'\n                audit['director_feedback'] = feedback\n                audit['updated_at'] = datetime.now().isoformat()\n                \n                # Notify HBC\n                create_notification(\n                    user_role='head_of_business_control',\n                    title='Audit Plan Returned',\n                    message=f'Director returned audit plan: \"{audit[\"title\"]}\" with comments. Please revise.',\n                    notification_type='plan_rejected',\n                    related_entity_type='audit',\n                    related_entity_id=audit_id\n                )\n                \n                log_audit_action('reject_audit', 'audit', audit_id, 'Director returned audit plan with comments')\n                flash('Audit plan returned with comments.', 'success')\n            \n            return redirect(url_for('director_dashboard'))\n            \n        except Exception as e:\n            flash(f'Error reviewing audit: {str(e)}', 'error')\n    \n    # Get audit creator info\n    creator = DATA_STORE['users'].get(audit.get('created_by_id'))\n    department = DATA_STORE['departments'].get(audit.get('department_id'))\n    \n    return render_template('director/review_plan.html', \n                         audit=audit,\n                         creator=creator,\n                         department=department)\n\n\n@app.route('/audit/<audit_id>/assign-auditor', methods=['GET', 'POST'])\n@login_required\n@role_required('head_of_business_control')\ndef assign_auditor_workflow(audit_id):\n    \"\"\"\n    Phase 1, Step 5: HBC assigns auditor with segregation of duty check\n    Status: director_approved -> assigned\n    \"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        flash('Audit not found.', 'error')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    if request.method == 'POST':\n        try:\n            auditor_id = request.form.get('auditor_id')\n            auditee_id = request.form.get('auditee_id')\n            supervisor_id = request.form.get('supervisor_id', get_current_user()['id'])\n            \n            # Segregation of duty check: Auditor cannot be from same department\n            auditor = DATA_STORE['users'].get(auditor_id)\n            department_id = audit.get('department_id')\n            \n            if auditor and auditor.get('department_id') == department_id:\n                flash('Conflict of interest: Auditor cannot be from the department being audited.', 'error')\n                return redirect(url_for('assign_auditor_workflow', audit_id=audit_id))\n            \n            # Assign auditor\n            audit['auditor_id'] = auditor_id\n            audit['auditee_id'] = auditee_id\n            audit['supervisor_id'] = supervisor_id\n            audit['status'] = 'assigned'\n            audit['auditor_assigned_at'] = datetime.now().isoformat()\n            audit['updated_at'] = datetime.now().isoformat()\n            \n            # Notify auditor\n            create_notification(\n                user_id=auditor_id,\n                title='New Audit Assignment',\n                message=f'You have been assigned to audit: \"{audit[\"title\"]}\". Please acknowledge this assignment.',\n                notification_type='audit_assigned',\n                related_entity_type='audit',\n                related_entity_id=audit_id\n            )\n            \n            log_audit_action('assign_auditor', 'audit', audit_id, f'Auditor assigned: {auditor.get(\"first_name\")} {auditor.get(\"last_name\")}')\n            \n            flash('Auditor assigned successfully. Notification sent to auditor.', 'success')\n            return redirect(url_for('head_of_business_control_dashboard'))\n            \n        except Exception as e:\n            flash(f'Error assigning auditor: {str(e)}', 'error')\n    \n    # Get available auditors\n    auditors = [u for u in DATA_STORE['users'].values() if u.get('role') == 'auditor' and u.get('is_active')]\n    auditees = [u for u in DATA_STORE['users'].values() if u.get('role') == 'auditee' and u.get('is_active')]\n    department = DATA_STORE['departments'].get(audit.get('department_id'))\n    \n    return render_template('head_of_business_control/assign_auditors.html', \n                         audit=audit,\n                         auditors=auditors,\n                         auditees=auditees,\n                         department=department)\n\n\n# ==================== PHASE 2: AUDITOR'S PREPARATION PHASE ====================\n\n@app.route('/audit/<audit_id>/acknowledge', methods=['POST'])\n@login_required\n@role_required('auditor')\ndef auditor_acknowledge_assignment(audit_id):\n    \"\"\"\n    Phase 2, Step 6: Auditor acknowledges assignment\n    Status: assigned -> acknowledged\n    \"\"\"\n    try:\n        audit = DATA_STORE['audits'].get(audit_id)\n        if not audit:\n            flash('Audit not found.', 'error')\n            return redirect(url_for('auditor_dashboard'))\n        \n        user = get_current_user()\n        if audit.get('auditor_id') != user['id']:\n            flash('You are not assigned to this audit.', 'error')\n            return redirect(url_for('auditor_dashboard'))\n        \n        if audit['status'] != 'assigned':\n            flash('Audit is not in assigned status.', 'error')\n            return redirect(url_for('auditor_dashboard'))\n        \n        # Update status\n        audit['status'] = 'acknowledged'\n        audit['auditor_acknowledged_at'] = datetime.now().isoformat()\n        audit['updated_at'] = datetime.now().isoformat()\n        \n        # Notify HBC\n        create_notification(\n            user_id=audit.get('supervisor_id'),\n            title='Auditor Acknowledged Assignment',\n            message=f'Auditor {user.get(\"first_name\")} {user.get(\"last_name\")} acknowledged audit: \"{audit[\"title\"]}\".',\n            notification_type='audit_acknowledged',\n            related_entity_type='audit',\n            related_entity_id=audit_id\n        )\n        \n        log_audit_action('acknowledge_audit', 'audit', audit_id, 'Auditor acknowledged assignment')\n        \n        flash('Assignment acknowledged successfully.', 'success')\n        \n    except Exception as e:\n        flash(f'Error acknowledging assignment: {str(e)}', 'error')\n    \n    return redirect(url_for('auditor_dashboard'))\n\n\n@app.route('/audit/<audit_id>/notify-auditee', methods=['GET', 'POST'])\n@login_required\n@role_required('auditor')\ndef notify_auditee_workflow(audit_id):\n    \"\"\"\n    Phase 2, Step 8: Auditor notifies auditee and requests documents\n    Status: acknowledged -> auditee_notified\n    \"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        flash('Audit not found.', 'error')\n        return redirect(url_for('auditor_dashboard'))\n    \n    if request.method == 'POST':\n        try:\n            user = get_current_user()\n            \n            # Update audit status\n            audit['status'] = 'auditee_notified'\n            audit['auditee_notified_at'] = datetime.now().isoformat()\n            audit['document_request_sent_at'] = datetime.now().isoformat()\n            audit['tentative_audit_date'] = request.form.get('tentative_audit_date')\n            audit['updated_at'] = datetime.now().isoformat()\n            \n            # Create document request\n            document_list = request.form.get('document_list', '').split('\\n')\n            for doc in document_list:\n                if doc.strip():\n                    req_id = str(uuid.uuid4())\n                    request_data = {\n                        'id': req_id,\n                        'audit_id': audit_id,\n                        'requested_by_id': user['id'],\n                        'auditee_id': audit.get('auditee_id'),\n                        'document_type': 'general',\n                        'document_description': doc.strip(),\n                        'priority': 'high',\n                        'status': 'pending',\n                        'created_at': datetime.now().isoformat()\n                    }\n                    \n                    if 'document_requests' not in DATA_STORE:\n                        DATA_STORE['document_requests'] = {}\n                    DATA_STORE['document_requests'][req_id] = request_data\n            \n            # Notify auditee\n            create_notification(\n                user_id=audit.get('auditee_id'),\n                title='Audit Notification',\n                message=f'You have been notified about audit: \"{audit[\"title\"]}\". Please review document requests and prepare for the audit.',\n                notification_type='audit_notification',\n                related_entity_type='audit',\n                related_entity_id=audit_id\n            )\n            \n            log_audit_action('notify_auditee', 'audit', audit_id, 'Auditee notified and documents requested')\n            \n            flash('Auditee notified and document requests sent successfully.', 'success')\n            return redirect(url_for('auditor_dashboard'))\n            \n        except Exception as e:\n            flash(f'Error notifying auditee: {str(e)}', 'error')\n    \n    auditee = DATA_STORE['users'].get(audit.get('auditee_id'))\n    return render_template('auditor/notify_auditee.html', audit=audit, auditee=auditee)\n\n\n# ==================== PHASE 3: PRE-AUDIT PLANNING & APPROVAL PHASE ====================\n\n@app.route('/audit/<audit_id>/submit-detailed-plan', methods=['GET', 'POST'])\n@login_required\n@role_required('auditor')\ndef submit_detailed_plan(audit_id):\n    \"\"\"\n    Phase 3, Step 9: Auditor submits detailed fieldwork plan to HBC\n    Status: auditee_notified -> auditor_plan_submitted\n    \"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        flash('Audit not found.', 'error')\n        return redirect(url_for('auditor_dashboard'))\n    \n    if request.method == 'POST':\n        try:\n            user = get_current_user()\n            \n            if audit.get('auditor_id') != user['id']:\n                flash('You are not assigned to this audit.', 'error')\n                return redirect(url_for('auditor_dashboard'))\n            \n            # Update audit with detailed plan\n            audit['detailed_fieldwork_plan'] = request.form.get('detailed_fieldwork_plan', '')\n            audit['audit_methodology'] = request.form.get('audit_methodology', '')\n            audit['sampling_method'] = request.form.get('sampling_method', '')\n            audit['fieldwork_timeline'] = request.form.get('fieldwork_timeline', '')\n            audit['status'] = 'auditor_plan_submitted'\n            audit['auditor_plan_submitted_at'] = datetime.now().isoformat()\n            audit['updated_at'] = datetime.now().isoformat()\n            \n            # Notify HBC for review\n            create_notification(\n                user_id=audit.get('supervisor_id'),\n                title='Detailed Audit Plan Submitted',\n                message=f'Auditor submitted detailed fieldwork plan for: \"{audit[\"title\"]}\". Please review and approve.',\n                notification_type='auditor_plan_submitted',\n                related_entity_type='audit',\n                related_entity_id=audit_id\n            )\n            \n            log_audit_action('submit_detailed_plan', 'audit', audit_id, 'Auditor submitted detailed fieldwork plan')\n            \n            flash('Detailed fieldwork plan submitted to HBC for approval.', 'success')\n            return redirect(url_for('auditor_dashboard'))\n            \n        except Exception as e:\n            flash(f'Error submitting plan: {str(e)}', 'error')\n    \n    return render_template('auditor/prepare_plan.html', audit=audit)\n\n\n@app.route('/audit/<audit_id>/approve-auditor-plan', methods=['GET', 'POST'])\n@login_required\n@role_required('head_of_business_control')\ndef approve_auditor_plan(audit_id):\n    \"\"\"\n    Phase 3, Step 10: HBC reviews and approves auditor's detailed plan\n    Status: auditor_plan_submitted -> ready_for_fieldwork\n    \"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        flash('Audit not found.', 'error')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    if request.method == 'POST':\n        try:\n            action = request.form.get('action')\n            feedback = request.form.get('supervisor_feedback', '')\n            \n            if action == 'approve':\n                audit['status'] = 'ready_for_fieldwork'\n                audit['ready_for_fieldwork_at'] = datetime.now().isoformat()\n                audit['supervisor_feedback'] = feedback\n                audit['updated_at'] = datetime.now().isoformat()\n                \n                # Notify auditor\n                create_notification(\n                    user_id=audit.get('auditor_id'),\n                    title='Audit Plan Approved',\n                    message=f'Your detailed fieldwork plan for \"{audit[\"title\"]}\" has been approved. You can proceed with fieldwork.',\n                    notification_type='plan_approved',\n                    related_entity_type='audit',\n                    related_entity_id=audit_id\n                )\n                \n                log_audit_action('approve_auditor_plan', 'audit', audit_id, 'HBC approved auditor detailed plan')\n                flash('Auditor plan approved. Audit is ready for fieldwork.', 'success')\n                \n            elif action == 'reject':\n                audit['status'] = 'acknowledged'  # Return to auditor for plan revision\n                audit['supervisor_feedback'] = feedback\n                audit['updated_at'] = datetime.now().isoformat()\n                \n                # Notify auditor\n                create_notification(\n                    user_id=audit.get('auditor_id'),\n                    title='Audit Plan Returned',\n                    message=f'Your fieldwork plan for \"{audit[\"title\"]}\" was returned with revisions requested.',\n                    notification_type='plan_revision_requested',\n                    related_entity_type='audit',\n                    related_entity_id=audit_id\n                )\n                \n                log_audit_action('reject_auditor_plan', 'audit', audit_id, 'HBC requested revisions to auditor plan')\n                flash('Plan returned to auditor with revision requests.', 'success')\n            \n            return redirect(url_for('head_of_business_control_dashboard'))\n            \n        except Exception as e:\n            flash(f'Error reviewing plan: {str(e)}', 'error')\n    \n    auditor = DATA_STORE['users'].get(audit.get('auditor_id'))\n    return render_template('head_of_business_control/review_auditor_plan.html', \n                         audit=audit,\n                         auditor=auditor)\n\n\n@app.route('/audit/<audit_id>/auditee-prepare', methods=['GET', 'POST'])\n@login_required\n@role_required('auditee')\ndef auditee_prepare(audit_id):\n    \"\"\"\n    Phase 3, Step 11: Auditee acknowledges and prepares (submits documents)\n    Status: auditee_notified/ready_for_fieldwork -> pre_audit_ready\n    \"\"\"\n    audit = DATA_STORE['audits'].get(audit_id)\n    if not audit:\n        flash('Audit not found.', 'error')\n        return redirect(url_for('auditee_dashboard'))\n    \n    if request.method == 'POST':\n        try:\n            user = get_current_user()\n            \n            if audit.get('auditee_id') != user['id']:\n                flash('You are not the auditee for this audit.', 'error')\n                return redirect(url_for('auditee_dashboard'))\n            \n            # Mark auditee as acknowledged and prepared\n            audit['auditee_acknowledged_at'] = datetime.now().isoformat()\n            audit['access_arrangements_completed'] = True\n            audit['status'] = 'pre_audit_ready'\n            audit['updated_at'] = datetime.now().isoformat()\n            \n            # Notify auditor and HBC\n            for user_id in [audit.get('auditor_id'), audit.get('supervisor_id')]:\n                if user_id:\n                    create_notification(\n                        user_id=user_id,\n                        title='Auditee Preparation Complete',\n                        message=f'Auditee has completed preparations for audit: \"{audit[\"title\"]}\". Pre-audit phase is complete.',\n                        notification_type='pre_audit_ready',\n                        related_entity_type='audit',\n                        related_entity_id=audit_id\n                    )\n            \n            log_audit_action('auditee_prepare', 'audit', audit_id, 'Auditee completed preparations')\n            \n            flash('Preparation complete. All stakeholders have been notified.', 'success')\n            return redirect(url_for('auditee_dashboard'))\n            \n        except Exception as e:\n            flash(f'Error completing preparation: {str(e)}', 'error')\n    \n    # Get document requests for this audit\n    document_requests = [req for req in DATA_STORE.get('document_requests', {}).values() \n                        if req.get('audit_id') == audit_id]\n    auditor = DATA_STORE['users'].get(audit.get('auditor_id'))\n    \n    return render_template('auditee/prepare_audit.html', \n                         audit=audit,\n                         document_requests=document_requests,\n                         auditor=auditor)\n\n@app.route('/audit/delete/<audit_id>', methods=['POST'])\n@login_required\n@role_required('head_of_business_control')\ndef delete_audit(audit_id):\n    \"\"\"Delete a single audit\"\"\"\n    try:\n        if audit_id in DATA_STORE['audits']:\n            audit = DATA_STORE['audits'][audit_id]\n            audit_title = audit.get('title', 'Unknown')\n            del DATA_STORE['audits'][audit_id]\n            log_audit_action('delete', 'audit', audit_id, f'Audit deleted: {audit_title}')\n            flash('Audit deleted successfully.', 'success')\n        else:\n            flash('Audit not found.', 'error')\n    except Exception as e:\n        flash(f'Error deleting audit: {str(e)}', 'error')\n    \n    return redirect(url_for('head_of_business_control_dashboard'))\n\n@app.route('/audits/bulk-delete', methods=['POST'])\n@login_required\n@role_required('head_of_business_control')\ndef bulk_delete_audits():\n    \"\"\"Delete multiple audits\"\"\"\n    try:\n        audit_ids_json = request.form.get('audit_ids')\n        if not audit_ids_json:\n            flash('No audits selected for deletion.', 'error')\n            return redirect(url_for('head_of_business_control_dashboard'))\n        \n        audit_ids = json.loads(audit_ids_json)\n        deleted_count = 0\n        \n        for audit_id in audit_ids:\n            try:\n                if audit_id in DATA_STORE['audits']:\n                    audit = DATA_STORE['audits'][audit_id]\n                    audit_title = audit.get('title', 'Unknown')\n                    del DATA_STORE['audits'][audit_id]\n                    log_audit_action('delete', 'audit', audit_id, f'Audit deleted: {audit_title}')\n                    deleted_count += 1\n            except Exception as e:\n                flash(f'Error deleting audit {audit_id}: {str(e)}', 'error')\n        \n        flash(f'{deleted_count} audit(s) deleted successfully.', 'success')\n    except Exception as e:\n        flash(f'Error during bulk delete: {str(e)}', 'error')\n    \n    return redirect(url_for('head_of_business_control_dashboard'))\n\n\n# ==================== HELPER FUNCTIONS ====================\n\ndef create_notification(user_id=None, user_role=None, title='', message='', \n                       notification_type='general', related_entity_type=None, \n                       related_entity_id=None):\n    \"\"\"Create notification for user(s)\"\"\"\n    if 'notifications' not in DATA_STORE:\n        DATA_STORE['notifications'] = {}\n    \n    # If user_role is specified, send to all users with that role\n    if user_role:\n        users = [u for u in DATA_STORE['users'].values() if u.get('role') == user_role]\n        for user in users:\n            notif_id = str(uuid.uuid4())\n            notification_data = {\n                'id': notif_id,\n                'user_id': user['id'],\n                'title': title,\n                'message': message,\n                'notification_type': notification_type,\n                'is_read': False,\n                'related_entity_type': related_entity_type,\n                'related_entity_id': related_entity_id,\n                'created_at': datetime.now().isoformat()\n            }\n            DATA_STORE['notifications'][notif_id] = notification_data\n    elif user_id:\n        notif_id = str(uuid.uuid4())\n        notification_data = {\n            'id': notif_id,\n            'user_id': user_id,\n            'title': title,\n            'message': message,\n            'notification_type': notification_type,\n            'is_read': False,\n            'related_entity_type': related_entity_type,\n            'related_entity_id': related_entity_id,\n            'created_at': datetime.now().isoformat()\n        }\n        DATA_STORE['notifications'][notif_id] = notification_data","size_bytes":127449},"main.py":{"content":"from app import app\nimport firebase_routes  # This imports all the Firebase-based routes\n\n# No sample data initialization - clean start\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":215},"models.py":{"content":"from app import db\nfrom datetime import datetime\nfrom sqlalchemy import text\nimport uuid\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    role = db.Column(db.String(30), nullable=False)  # director, head_of_business_control, auditor, auditee\n    first_name = db.Column(db.String(64), nullable=False)\n    last_name = db.Column(db.String(64), nullable=False)\n    phone = db.Column(db.String(20), nullable=True)\n    address = db.Column(db.Text, nullable=True)\n    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=True)\n    is_active = db.Column(db.Boolean, default=True)\n    password_reset_required = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    last_login = db.Column(db.DateTime, nullable=True)\n    \n    # Relationships\n    department = db.relationship('Department', foreign_keys=[department_id], backref='users')\n    assigned_audits = db.relationship('Audit', foreign_keys='Audit.auditor_id', backref='auditor')\n    auditee_audits = db.relationship('Audit', foreign_keys='Audit.auditee_id', backref='auditee')\n    supervised_audits = db.relationship('Audit', foreign_keys='Audit.supervisor_id', backref='head_of_business_control')\n    created_audits = db.relationship('Audit', foreign_keys='Audit.created_by_id', backref='creator')\n    directed_audits = db.relationship('Audit', foreign_keys='Audit.director_id', backref='director')\n    \n    def __repr__(self):\n        return f'<User {self.username}>'\n    \n    @property\n    def full_name(self):\n        return f\"{self.first_name} {self.last_name}\"\n\nclass Department(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False, unique=True)\n    description = db.Column(db.Text, nullable=True)\n    head_name = db.Column(db.String(100), nullable=True)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    units = db.relationship('DepartmentUnit', backref='department', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Department {self.name}>'\n\nclass DepartmentUnit(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=False)\n    unit_head_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    unit_head = db.relationship('User', foreign_keys=[unit_head_id])\n    \n    def __repr__(self):\n        return f'<DepartmentUnit {self.name}>'\n\nclass AuditTemplate(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    audit_type = db.Column(db.String(50), nullable=False)  # internal, external, compliance, etc.\n    created_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    is_active = db.Column(db.Boolean, default=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    created_by = db.relationship('User', backref='created_templates')\n    checklist_items = db.relationship('ChecklistItem', backref='template', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<AuditTemplate {self.name}>'\n\nclass ChecklistItem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    template_id = db.Column(db.Integer, db.ForeignKey('audit_template.id'), nullable=False)\n    item_text = db.Column(db.Text, nullable=False)\n    category = db.Column(db.String(100), nullable=True)\n    is_mandatory = db.Column(db.Boolean, default=True)\n    order_index = db.Column(db.Integer, default=0)\n    \n    def __repr__(self):\n        return f'<ChecklistItem {self.item_text[:50]}>'\n\nclass Audit(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    reference_number = db.Column(db.String(50), unique=True, nullable=False)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    audit_type = db.Column(db.String(50), nullable=False)\n    status = db.Column(db.String(30), default='draft')  # Workflow statuses (9-step sequence):\n    # Phase 1: draft → pending_director_approval → director_approved → assigned\n    # Phase 2: acknowledged → auditee_notified\n    # Phase 3: auditor_plan_submitted → ready_for_fieldwork → pre_audit_ready\n    # Execution: in_progress, review, closed (future phases)\n    priority = db.Column(db.String(20), default='medium')  # low, medium, high, critical\n    \n    # Audit scope and objectives (Phase 1)\n    audit_scope = db.Column(db.Text, nullable=True)\n    audit_objectives = db.Column(db.Text, nullable=True)\n    audit_criteria = db.Column(db.Text, nullable=True)\n    resources_needed = db.Column(db.Text, nullable=True)\n    \n    # Auditor acknowledgment and planning (Phase 2)\n    auditor_acknowledged_at = db.Column(db.DateTime, nullable=True)\n    audit_plan = db.Column(db.Text, nullable=True)\n    audit_methodology = db.Column(db.Text, nullable=True)\n    audit_checklist = db.Column(db.Text, nullable=True)\n    data_request_list = db.Column(db.Text, nullable=True)\n    \n    # Head of Business Control Plan Submission (Phase 3)\n    plan_submitted_at = db.Column(db.DateTime, nullable=True)  # When Head of Business Control submits plan to Director\n    \n    # Director approval (Phase 4)  \n    director_approved_at = db.Column(db.DateTime, nullable=True)\n    director_feedback = db.Column(db.Text, nullable=True)\n    \n    # Auditor assignment (Phase 5)\n    auditor_assigned_at = db.Column(db.DateTime, nullable=True)  # When Head of Business Control assigns auditor\n    plan_approved_at = db.Column(db.DateTime, nullable=True)  # Final approval timestamp\n    supervisor_feedback = db.Column(db.Text, nullable=True)\n    \n    # Auditee coordination\n    auditee_notified_at = db.Column(db.DateTime, nullable=True)\n    auditee_acknowledged_at = db.Column(db.DateTime, nullable=True)\n    document_request_sent_at = db.Column(db.DateTime, nullable=True)\n    access_arrangements_completed = db.Column(db.Boolean, default=False)\n    \n    # Assignment\n    auditor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # Assigned by Head of Business Control after Director approval\n    auditee_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    supervisor_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # Head of Business Control\n    director_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # Director for approval\n    department_id = db.Column(db.Integer, db.ForeignKey('department.id'), nullable=True)\n    \n    # Dates\n    planned_start_date = db.Column(db.Date, nullable=True)\n    planned_end_date = db.Column(db.Date, nullable=True)\n    actual_start_date = db.Column(db.Date, nullable=True)\n    actual_end_date = db.Column(db.Date, nullable=True)\n    \n    # Meta\n    created_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships  \n    created_by = db.relationship('User', foreign_keys=[created_by_id], overlaps=\"created_audits,creator\")\n    assigned_department = db.relationship('Department', backref='audits')\n    findings = db.relationship('Finding', backref='audit', cascade='all, delete-orphan')\n    evidence_files = db.relationship('EvidenceFile', backref='audit', cascade='all, delete-orphan')\n    audit_responses = db.relationship('AuditResponse', backref='audit', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Audit {self.reference_number}>'\n    \n    def generate_reference_number(self):\n        year = datetime.utcnow().year\n        count = Audit.query.filter(text(\"EXTRACT(year FROM created_at) = :year\")).params(year=year).count() + 1\n        return f\"AUD-{year}-{count:04d}\"\n\nclass AuditResponse(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'), nullable=False)\n    checklist_item_id = db.Column(db.Integer, db.ForeignKey('checklist_item.id'), nullable=False)\n    response = db.Column(db.String(20), nullable=False)  # compliant, non_compliant, not_applicable, partial\n    comments = db.Column(db.Text, nullable=True)\n    evidence_description = db.Column(db.Text, nullable=True)\n    completed_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    completed_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    checklist_item = db.relationship('ChecklistItem')\n    completed_by = db.relationship('User')\n    \n    def __repr__(self):\n        return f'<AuditResponse {self.response}>'\n\nclass Finding(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'), nullable=False)\n    title = db.Column(db.String(200), nullable=False)\n    description = db.Column(db.Text, nullable=False)\n    severity = db.Column(db.String(20), nullable=False)  # low, medium, high, critical\n    category = db.Column(db.String(100), nullable=True)\n    risk_assessment = db.Column(db.Text, nullable=True)  # Risk analysis by auditor\n    recommendation = db.Column(db.Text, nullable=True)  # Auditor's recommendation\n    status = db.Column(db.String(20), default='open')  # open, in_progress, resolved, closed\n    \n    # Assignment\n    assigned_to_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    auditee_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    identified_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    \n    # Dates\n    due_date = db.Column(db.Date, nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    assigned_to = db.relationship('User', foreign_keys=[assigned_to_id])\n    auditee = db.relationship('User', foreign_keys=[auditee_id])\n    identified_by = db.relationship('User', foreign_keys=[identified_by_id])\n    corrective_actions = db.relationship('CorrectiveAction', backref='finding', cascade='all, delete-orphan')\n    \n    def __repr__(self):\n        return f'<Finding {self.title}>'\n\nclass CorrectiveAction(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    finding_id = db.Column(db.Integer, db.ForeignKey('finding.id'), nullable=False)\n    action_description = db.Column(db.Text, nullable=False)\n    responsible_person_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    status = db.Column(db.String(20), default='planned')  # planned, in_progress, completed, overdue\n    priority = db.Column(db.String(20), default='medium')\n    \n    # Dates\n    planned_completion_date = db.Column(db.Date, nullable=False)\n    actual_completion_date = db.Column(db.Date, nullable=True)\n    \n    # Progress tracking\n    progress_percentage = db.Column(db.Integer, default=0)\n    implementation_notes = db.Column(db.Text, nullable=True)\n    \n    # Meta\n    created_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    \n    # Relationships\n    responsible_person = db.relationship('User', foreign_keys=[responsible_person_id])\n    created_by = db.relationship('User', foreign_keys=[created_by_id])\n    \n    def __repr__(self):\n        return f'<CorrectiveAction {self.action_description[:50]}>'\n\nclass EvidenceFile(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'), nullable=True)\n    finding_id = db.Column(db.Integer, db.ForeignKey('finding.id'), nullable=True)\n    filename = db.Column(db.String(255), nullable=False)\n    original_filename = db.Column(db.String(255), nullable=False)\n    file_path = db.Column(db.String(500), nullable=False)\n    file_size = db.Column(db.Integer, nullable=False)\n    file_type = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    \n    # Supervisor review fields\n    supervisor_comment = db.Column(db.Text, nullable=True)\n    supervisor_status = db.Column(db.String(50), nullable=True)  # approved, rejected, reviewed\n    reviewed_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)\n    reviewed_at = db.Column(db.DateTime, nullable=True)\n    \n    # Meta\n    uploaded_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    uploaded_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    uploaded_by = db.relationship('User', foreign_keys=[uploaded_by_id])\n    reviewed_by = db.relationship('User', foreign_keys=[reviewed_by_id])\n    finding = db.relationship('Finding', backref='evidence_files')\n    \n    def __repr__(self):\n        return f'<EvidenceFile {self.original_filename}>'\n\nclass AuditLog(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    action = db.Column(db.String(100), nullable=False)\n    entity_type = db.Column(db.String(50), nullable=False)  # audit, finding, user, etc.\n    entity_id = db.Column(db.Integer, nullable=True)\n    details = db.Column(db.Text, nullable=True)\n    ip_address = db.Column(db.String(45), nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    user = db.relationship('User')\n    \n    def __repr__(self):\n        return f'<AuditLog {self.action}>'\n\nclass AuditDocumentRequest(db.Model):\n    \"\"\"Document requests from auditor to auditee\"\"\"\n    id = db.Column(db.Integer, primary_key=True)\n    audit_id = db.Column(db.Integer, db.ForeignKey('audit.id'), nullable=False)\n    requested_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    auditee_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    \n    document_type = db.Column(db.String(100), nullable=False)  # policies, procedures, logs, transaction_data\n    document_description = db.Column(db.Text, nullable=False)\n    priority = db.Column(db.String(20), default='medium')\n    due_date = db.Column(db.Date, nullable=True)\n    \n    status = db.Column(db.String(20), default='pending')  # pending, provided, not_available\n    auditee_response = db.Column(db.Text, nullable=True)\n    response_date = db.Column(db.Date, nullable=True)\n    \n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    audit = db.relationship('Audit', backref='document_requests')\n    requested_by = db.relationship('User', foreign_keys=[requested_by_id])\n    auditee = db.relationship('User', foreign_keys=[auditee_id])\n    \n    def __repr__(self):\n        return f'<AuditDocumentRequest {self.document_type}>'\n\nclass Notification(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    title = db.Column(db.String(200), nullable=False)\n    message = db.Column(db.Text, nullable=False)\n    notification_type = db.Column(db.String(50), nullable=False)  # audit_assigned, plan_approval_needed, documents_requested, audit_due, action_overdue\n    is_read = db.Column(db.Boolean, default=False)\n    related_entity_type = db.Column(db.String(50), nullable=True)\n    related_entity_id = db.Column(db.Integer, nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationships\n    user = db.relationship('User', backref='notifications')\n    \n    def __repr__(self):\n        return f'<Notification {self.title}>'\n","size_bytes":16347},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-login>=0.6.3\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n    \"pyrebase4>=4.8.0\",\n    \"requests>=2.32.5\",\n    \"firebase-admin>=7.1.0\",\n    \"reportlab>=4.4.3\",\n    \"pyrebase>=3.0.18\",\n]\n","size_bytes":480},"replit.md":{"content":"# Audit Management System\n\n## Overview\n\nThis is a comprehensive web-based audit management system built with Flask that provides role-based access control for managing organizational audits. The system supports four distinct user roles (Admin, Supervisor, Auditor, and Auditee) with specialized workflows for audit planning, execution, findings management, and corrective action tracking.\n\nThe application focuses on streamlining the audit process from initial planning through final reporting, with emphasis on compliance tracking, document management, and audit trail maintenance. It provides dashboards, notifications, and comprehensive reporting capabilities to support effective audit management across organizations.\n\n**Recent Major Enhancement (September 2025)**: \n- **LATEST MIGRATION (September 24, 2025)**: Successfully completed fresh GitHub import and environment setup:\n  - Imported complete Flask audit management system from GitHub repository\n  - Configured Python 3.11 environment with all dependencies pre-installed\n  - Set up gunicorn server on port 5000 with webview output for frontend using full Python path\n  - Verified Firebase Admin initialization and sample data loading (4 users, 4 departments)\n  - Tested all major application routes (landing, login pages) with 100% success rate\n  - Configured autoscale deployment for production readiness\n  - Application fully operational and ready for use at http://localhost:5000/\n- **PREVIOUS MIGRATION (September 23, 2025)**: Successfully completed fresh GitHub import and environment setup:\n  - Installed all Python dependencies via uv package manager (Flask, Firebase, ReportLab, etc.)\n  - Configured PostgreSQL database with proper environment variables\n- Successfully migrated from Replit Agent to standard Replit environment with full compatibility\n- **MIGRATION COMPLETED (August 21, 2025)**: Successfully migrated entire codebase from Replit Agent to standard Replit environment:\n  - All Python dependencies installed and working (Flask, Firebase, ReportLab, etc.)\n  - Fixed critical template errors and routing issues\n  - Firebase integration functioning with sample data initialized\n  - Application running successfully on gunicorn at http://localhost:5000/\n  - All major functionality preserved and operational\n- **Migration Complete (August 14, 2025)**: Successfully imported project into Replit environment with all dependencies installed, PostgreSQL database configured, and Flask application running on port 5000\n- **MAJOR WORKFLOW TRANSFORMATION (August 14, 2025)**: Completely restructured audit management workflow per user requirements:\n  1. Changed \"System Administrator\" to \"Director\" \n  2. Changed \"Supervisor\" to \"Head of Business Control\"\n  3. **NEW WORKFLOW**: Head of Business Control creates audit plans → Director approves plans → Head of Business Control assigns auditors\n  4. Updated database schema with new roles and workflow fields\n  5. Created dedicated Director dashboard for plan approval\n  6. Updated Head of Business Control dashboard for auditor assignment\n  7. Granted Head of Business Control user and department management capabilities\n- Implemented comprehensive Auditor and Auditee workflows with detailed process flows, role-based dashboards, finding management, corrective action tracking, and evidence upload capabilities\n- Fixed critical audit creation error and enhanced user management features\n- Resolved database configuration and session management issues\n- Added admin notification management with deletion capabilities (delete individual notifications and bulk delete all)\n- Fixed model constructor issues and improved error handling throughout the application\n- Resolved database schema conflicts and session secret key errors\n- Fixed CorrectiveAction model target_completion_date field conflicts\n- **COMPLETE FIREBASE MIGRATION (August 21, 2025)**: Successfully migrated entire system from PostgreSQL to Firebase-based architecture:\n  - **Firebase Integration**: Full Firebase authentication, Firestore database, and real-time features\n  - **10-Step Audit Workflow**: Complete implementation of Risk Assessment, Audit Planning, Engagement Setup, Fieldwork, Execution, Findings & Corrective Action, Reporting, Follow-Up, Dashboards, and Firebase Integration\n  - **Comprehensive Security**: Role-based access control, audit logging, secure file management, and password generation\n  - **Modern UI**: Bootstrap 5 responsive design with role-specific dashboards for all user types\n  - **Production Features**: PDF report generation, messaging system, evidence management, and searchable report library\n  - **Default Users**: Created sample users for all roles (Director, Head of Business Control, Auditor, Auditee)\n  - **Application Status**: Fully operational at http://localhost:5000/ with complete workflow functionality\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Bootstrap 5 for responsive UI\n- **CSS Framework**: Bootstrap 5 with custom CSS variables for role-based theming\n- **JavaScript**: Vanilla JavaScript with modular organization (main.js, dashboard.js)\n- **Client-side Features**: Chart.js for analytics, form validation, file upload handling, and real-time notifications\n\n### Backend Architecture\n- **Web Framework**: Flask with SQLAlchemy ORM for database operations\n- **Database Model**: Relational database design with proper foreign key relationships\n- **Authentication**: Session-based authentication with role-based access control (RBAC)\n- **Authorization**: Decorator-based permission system for route protection\n- **File Management**: Secure file upload system with type validation and UUID-based naming\n\n### Core Data Models\n- **User Management**: Users with roles (director, head_of_business_control, auditor, auditee) linked to departments with contact details\n- **Organizational Structure**: Departments with dynamic units and text-based department heads\n- **Audit Workflow**: Complete audit lifecycle from assignment through completion\n- **Findings Management**: Detailed finding classification with severity levels and auditee assignment\n- **Corrective Actions**: Action plan tracking with target dates and responsible persons\n- **Evidence Management**: File upload system for supporting documentation\n- **Notification System**: Real-time notifications for workflow events\n- **Audit Trail**: Comprehensive logging system for user actions and system events\n\n### Security Implementation\n- **Password Management**: Werkzeug password hashing with auto-generated passwords for new users\n- **Session Management**: Flask sessions with configurable secret keys\n- **Access Control**: Role-based permissions with function-level authorization decorators\n- **Audit Logging**: Complete audit trail of user actions with IP address tracking\n- **File Security**: Restricted file types and secure file handling with size limits\n\n### Application Structure\n- **Modular Design**: Separate modules for authentication (auth.py), utilities (utils.py), and routes (routes.py)\n- **Role-Specific Templates**: Dedicated template directories for auditor/ and auditee/ workflows\n- **Template Inheritance**: Base template system with role-specific styling and navigation\n- **Workflow Implementation**: Complete Auditor and Auditee process flows with detailed UI\n- **Configuration Management**: Environment variable based configuration for database and secrets\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **Flask**: Web application framework\n- **Flask-SQLAlchemy**: Database ORM integration\n- **Werkzeug**: Password hashing and security utilities\n\n### Frontend Dependencies\n- **Bootstrap 5**: CSS framework for responsive design\n- **Font Awesome 6**: Icon library for UI elements\n- **Chart.js**: JavaScript charting library for dashboard analytics\n\n### Database System\n- **SQLAlchemy**: ORM with support for multiple database backends\n- **Database URL**: Configured via environment variables (DATABASE_URL)\n- **Connection Pooling**: Configured with pool recycling and pre-ping for reliability\n\n### Security and Utilities\n- **UUID**: For secure file naming and unique identifiers\n- **Secrets**: For secure password generation\n- **OS**: Environment variable management and file system operations\n\n### Production Considerations\n- **ProxyFix**: Werkzeug middleware for proper proxy header handling\n- **Logging**: Configurable logging system with debug level support\n- **Session Security**: Configurable session secrets via environment variables","size_bytes":8610},"utils.py":{"content":"import os\nimport uuid\nfrom werkzeug.utils import secure_filename\nfrom flask import current_app\nimport string\nimport secrets\nfrom app import db\n\ndef generate_password(length=12):\n    \"\"\"Generate a secure random password\"\"\"\n    alphabet = string.ascii_letters + string.digits + \"!@#$%^&*\"\n    while True:\n        password = ''.join(secrets.choice(alphabet) for i in range(length))\n        # Ensure password has at least one lowercase, uppercase, digit and special char\n        if (any(c.islower() for c in password)\n                and any(c.isupper() for c in password)\n                and any(c.isdigit() for c in password)\n                and any(c in \"!@#$%^&*\" for c in password)):\n            return password\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx', 'xls', 'xlsx'}\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n\ndef save_uploaded_file(file, upload_folder='uploads'):\n    \"\"\"Save uploaded file and return filename\"\"\"\n    if file and allowed_file(file.filename):\n        # Create upload directory if it doesn't exist\n        os.makedirs(upload_folder, exist_ok=True)\n        \n        # Generate unique filename\n        filename = str(uuid.uuid4()) + '_' + secure_filename(file.filename)\n        file_path = os.path.join(upload_folder, filename)\n        \n        # Save file\n        file.save(file_path)\n        \n        return {\n            'filename': filename,\n            'original_filename': file.filename,\n            'file_path': file_path,\n            'file_size': os.path.getsize(file_path),\n            'file_type': file.content_type or 'application/octet-stream'\n        }\n    return None\n\ndef get_audit_statistics():\n    \"\"\"Get audit statistics for dashboard\"\"\"\n    from models import Audit, Finding, CorrectiveAction\n    from sqlalchemy import func, extract\n    from datetime import datetime, timedelta\n    \n    current_year = datetime.utcnow().year\n    current_quarter = (datetime.utcnow().month - 1) // 3 + 1\n    \n    # Total audits this year\n    total_audits_year = Audit.query.filter(\n        extract('year', Audit.created_at) == current_year\n    ).count()\n    \n    # Audits by status\n    audits_by_status = db.session.query(\n        Audit.status, func.count(Audit.id)\n    ).group_by(Audit.status).all()\n    \n    # Top 5 recurring findings\n    top_findings = db.session.query(\n        Finding.category, func.count(Finding.id).label('count')\n    ).group_by(Finding.category).order_by(func.count(Finding.id).desc()).limit(5).all()\n    \n    # Overdue actions\n    overdue_actions = CorrectiveAction.query.filter(\n        CorrectiveAction.planned_completion_date < datetime.utcnow().date(),\n        CorrectiveAction.status != 'completed'\n    ).count()\n    \n    total_actions = CorrectiveAction.query.count()\n    sla_adherence = ((total_actions - overdue_actions) / total_actions * 100) if total_actions > 0 else 100\n    \n    return {\n        'total_audits_year': total_audits_year,\n        'audits_by_status': dict(audits_by_status),\n        'top_findings': top_findings,\n        'sla_adherence': round(sla_adherence, 1),\n        'overdue_actions': overdue_actions\n    }\n\ndef get_user_notifications(user_id, limit=10):\n    \"\"\"Get notifications for a user\"\"\"\n    from models import Notification\n    return Notification.query.filter_by(\n        user_id=user_id, is_read=False\n    ).order_by(Notification.created_at.desc()).limit(limit).all()\n\ndef create_notification(user_id, title, message, notification_type, related_entity_type=None, related_entity_id=None):\n    \"\"\"Create a new notification\"\"\"\n    from models import Notification\n    notification = Notification(\n        user_id=user_id,\n        title=title,\n        message=message,\n        notification_type=notification_type,\n        related_entity_type=related_entity_type,\n        related_entity_id=related_entity_id\n    )\n    db.session.add(notification)\n    db.session.commit()\n    return notification\n","size_bytes":4046},"static/css/style.css":{"content":"/* Audit Management System - Custom Styles */\n\n:root {\n    --primary-color: #0d6efd;\n    --secondary-color: #6c757d;\n    --success-color: #198754;\n    --warning-color: #fd7e14;\n    --danger-color: #dc3545;\n    --info-color: #0dcaf0;\n    --light-color: #f8f9fa;\n    --dark-color: #212529;\n}\n\n/* Global Styles */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: #f8f9fa;\n}\n\n.navbar-brand {\n    font-weight: 600;\n}\n\n/* Role-based color scheme */\n.role-admin { --role-color: var(--success-color); }\n.role-supervisor { --role-color: var(--info-color); }\n.role-auditor { --role-color: var(--warning-color); }\n.role-auditee { --role-color: var(--secondary-color); }\n\n/* Dashboard Cards */\n.card {\n    border: none;\n    border-radius: 12px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);\n}\n\n.card-header {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n    background: rgba(255, 255, 255, 0.8);\n    font-weight: 600;\n}\n\n/* Statistics Cards */\n.stats-card {\n    background: linear-gradient(135deg, var(--bs-primary), #0056b3);\n    color: white;\n    border-radius: 15px;\n}\n\n.stats-card .card-body {\n    padding: 1.5rem;\n}\n\n.stats-number {\n    font-size: 2.5rem;\n    font-weight: 700;\n    line-height: 1;\n}\n\n/* Navigation Enhancements */\n.navbar {\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.nav-link {\n    border-radius: 6px;\n    margin: 0 2px;\n    transition: all 0.2s ease;\n}\n\n.nav-link:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n}\n\n/* Forms */\n.form-control, .form-select {\n    border-radius: 8px;\n    border: 1px solid #e0e0e0;\n    padding: 0.75rem 1rem;\n}\n\n.form-control:focus, .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);\n}\n\n/* Buttons */\n.btn {\n    border-radius: 8px;\n    font-weight: 500;\n    padding: 0.5rem 1.25rem;\n    transition: all 0.2s ease;\n}\n\n.btn:hover {\n    transform: translateY(-1px);\n}\n\n/* Tables */\n.table {\n    border-radius: 12px;\n    overflow: hidden;\n}\n\n.table thead th {\n    border-bottom: 2px solid #dee2e6;\n    background-color: #f8f9fa;\n    font-weight: 600;\n    color: #495057;\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: 10px;\n    font-weight: 500;\n}\n\n/* Status Badges */\n.badge {\n    font-size: 0.75em;\n    padding: 0.35em 0.65em;\n    border-radius: 6px;\n}\n\n/* Dashboard specific */\n.dashboard-header {\n    background: linear-gradient(135deg, #fff, #f8f9fa);\n    border-radius: 15px;\n    padding: 2rem;\n    margin-bottom: 2rem;\n    border: 1px solid #e9ecef;\n}\n\n/* Notification styles */\n.notification-item {\n    border-radius: 8px;\n    padding: 0.75rem;\n    margin-bottom: 0.5rem;\n    background: #f8f9fa;\n    border-left: 4px solid var(--primary-color);\n}\n\n.notification-unread {\n    background: #e3f2fd;\n    border-left-color: var(--info-color);\n}\n\n/* Audit status colors */\n.status-draft { color: var(--secondary-color); }\n.status-in-progress { color: var(--warning-color); }\n.status-review { color: var(--info-color); }\n.status-completed { color: var(--success-color); }\n.status-closed { color: var(--dark-color); }\n\n/* Finding severity colors */\n.severity-low { color: var(--info-color); }\n.severity-medium { color: var(--warning-color); }\n.severity-high { color: var(--danger-color); }\n.severity-critical { color: #8b0000; font-weight: bold; }\n\n/* File upload area */\n.upload-area {\n    border: 2px dashed #dee2e6;\n    border-radius: 12px;\n    padding: 2rem;\n    text-align: center;\n    background: #fafafa;\n    transition: all 0.3s ease;\n}\n\n.upload-area:hover {\n    border-color: var(--primary-color);\n    background: #f0f8ff;\n}\n\n/* Progress bars */\n.progress {\n    height: 8px;\n    border-radius: 6px;\n}\n\n/* Sidebar for role-specific pages */\n.sidebar {\n    background: #fff;\n    border-radius: 12px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08);\n    padding: 1.5rem;\n}\n\n.sidebar .nav-link {\n    color: #495057;\n    border-radius: 8px;\n    padding: 0.75rem 1rem;\n    margin-bottom: 0.25rem;\n}\n\n.sidebar .nav-link:hover,\n.sidebar .nav-link.active {\n    background-color: var(--primary-color);\n    color: white;\n}\n\n/* Login page styles */\n.login-container {\n    min-height: 100vh;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n}\n\n.login-card {\n    background: rgba(255, 255, 255, 0.95);\n    backdrop-filter: blur(10px);\n    border-radius: 20px;\n    padding: 3rem;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .stats-number {\n        font-size: 2rem;\n    }\n    \n    .dashboard-header {\n        padding: 1.5rem;\n    }\n    \n    .card-body {\n        padding: 1rem;\n    }\n}\n\n/* Print styles */\n@media print {\n    .navbar, .sidebar {\n        display: none !important;\n    }\n    \n    .card {\n        box-shadow: none;\n        border: 1px solid #dee2e6;\n    }\n}\n\n/* Custom animations */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.fade-in-up {\n    animation: fadeInUp 0.5s ease-out;\n}\n\n/* Chart container styles */\n.chart-container {\n    position: relative;\n    height: 300px;\n    background: white;\n    border-radius: 12px;\n    padding: 1rem;\n}","size_bytes":5416},"static/js/dashboard.js":{"content":"// Dashboard-specific JavaScript functionality\n\n(function() {\n    'use strict';\n\n    // Dashboard configuration\n    const dashboardConfig = {\n        chartColors: {\n            primary: '#007bff',\n            success: '#28a745',\n            warning: '#ffc107',\n            danger: '#dc3545',\n            info: '#17a2b8',\n            secondary: '#6c757d',\n            light: '#f8f9fa',\n            dark: '#343a40'\n        },\n        animationDuration: 1000\n    };\n\n    // Initialize dashboard when DOM is ready\n    document.addEventListener('DOMContentLoaded', function() {\n        initializeDashboard();\n    });\n\n    function initializeDashboard() {\n        // Initialize statistics animations\n        animateStatistics();\n        \n        // Initialize refresh functionality\n        initializeRefresh();\n        \n        // Initialize dashboard filters\n        initializeDashboardFilters();\n        \n        // Set up auto-refresh\n        setupAutoRefresh();\n        \n        console.log('Dashboard initialized');\n    }\n\n    // Animate statistics counters\n    function animateStatistics() {\n        const statNumbers = document.querySelectorAll('.dashboard-stat-number, h2, h4');\n        \n        statNumbers.forEach(function(element) {\n            const finalValue = parseInt(element.textContent);\n            if (!isNaN(finalValue) && finalValue > 0) {\n                animateCounter(element, 0, finalValue, 1500);\n            }\n        });\n    }\n\n    // Animate counter from start to end value\n    function animateCounter(element, start, end, duration) {\n        const startTime = performance.now();\n        const startValue = start;\n        const endValue = end;\n        \n        function updateCounter(currentTime) {\n            const elapsed = currentTime - startTime;\n            const progress = Math.min(elapsed / duration, 1);\n            \n            // Easing function for smooth animation\n            const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n            const currentValue = Math.round(startValue + (endValue - startValue) * easeOutQuart);\n            \n            element.textContent = currentValue;\n            \n            if (progress < 1) {\n                requestAnimationFrame(updateCounter);\n            }\n        }\n        \n        requestAnimationFrame(updateCounter);\n    }\n\n    // Create audit status chart\n    function createAuditStatusChart(statusData) {\n        const ctx = document.getElementById('auditStatusChart');\n        if (!ctx || !statusData) return;\n\n        const labels = Object.keys(statusData);\n        const data = Object.values(statusData);\n        const colors = labels.map(status => {\n            switch(status) {\n                case 'closed': return dashboardConfig.chartColors.success;\n                case 'in_progress': return dashboardConfig.chartColors.primary;\n                case 'review': return dashboardConfig.chartColors.warning;\n                case 'planned': return dashboardConfig.chartColors.secondary;\n                default: return dashboardConfig.chartColors.info;\n            }\n        });\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: labels.map(label => label.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())),\n                datasets: [{\n                    data: data,\n                    backgroundColor: colors,\n                    borderColor: '#fff',\n                    borderWidth: 2\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom',\n                        labels: {\n                            padding: 20,\n                            usePointStyle: true\n                        }\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                const total = context.dataset.data.reduce((a, b) => a + b, 0);\n                                const percentage = ((context.raw / total) * 100).toFixed(1);\n                                return `${context.label}: ${context.raw} (${percentage}%)`;\n                            }\n                        }\n                    }\n                },\n                animation: {\n                    animateRotate: true,\n                    duration: dashboardConfig.animationDuration\n                }\n            }\n        });\n    }\n\n    // Create findings by severity chart\n    function createFindingsSeverityChart(findingsData) {\n        const ctx = document.getElementById('findingsSeverityChart');\n        if (!ctx || !findingsData) return;\n\n        const severityOrder = ['critical', 'high', 'medium', 'low'];\n        const labels = [];\n        const data = [];\n        const colors = [];\n\n        severityOrder.forEach(severity => {\n            if (findingsData[severity] !== undefined) {\n                labels.push(severity.charAt(0).toUpperCase() + severity.slice(1));\n                data.push(findingsData[severity]);\n                \n                switch(severity) {\n                    case 'critical': colors.push(dashboardConfig.chartColors.danger); break;\n                    case 'high': colors.push(dashboardConfig.chartColors.warning); break;\n                    case 'medium': colors.push(dashboardConfig.chartColors.info); break;\n                    case 'low': colors.push(dashboardConfig.chartColors.success); break;\n                    default: colors.push(dashboardConfig.chartColors.secondary);\n                }\n            }\n        });\n\n        new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Number of Findings',\n                    data: data,\n                    backgroundColor: colors,\n                    borderColor: colors,\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        callbacks: {\n                            title: function(context) {\n                                return `${context[0].label} Severity Findings`;\n                            },\n                            label: function(context) {\n                                return `Count: ${context.raw}`;\n                            }\n                        }\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        ticks: {\n                            stepSize: 1\n                        }\n                    },\n                    x: {\n                        grid: {\n                            display: false\n                        }\n                    }\n                },\n                animation: {\n                    duration: dashboardConfig.animationDuration,\n                    easing: 'easeOutQuart'\n                }\n            }\n        });\n    }\n\n    // Create monthly audit trend chart\n    function createMonthlyTrendChart(monthlyData) {\n        const ctx = document.getElementById('monthlyTrendChart');\n        if (!ctx || !monthlyData) return;\n\n        const labels = monthlyData.map(item => item.month);\n        const auditData = monthlyData.map(item => item.audits);\n        const findingData = monthlyData.map(item => item.findings);\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [\n                    {\n                        label: 'Audits',\n                        data: auditData,\n                        borderColor: dashboardConfig.chartColors.primary,\n                        backgroundColor: dashboardConfig.chartColors.primary + '20',\n                        tension: 0.4,\n                        fill: true\n                    },\n                    {\n                        label: 'Findings',\n                        data: findingData,\n                        borderColor: dashboardConfig.chartColors.warning,\n                        backgroundColor: dashboardConfig.chartColors.warning + '20',\n                        tension: 0.4,\n                        fill: true\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                interaction: {\n                    intersect: false\n                },\n                plugins: {\n                    legend: {\n                        position: 'top'\n                    }\n                },\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        ticks: {\n                            stepSize: 1\n                        }\n                    }\n                },\n                animation: {\n                    duration: dashboardConfig.animationDuration\n                }\n            }\n        });\n    }\n\n    // Create completion rate gauge\n    function createCompletionRateGauge(completionRate) {\n        const ctx = document.getElementById('completionRateGauge');\n        if (!ctx) return;\n\n        const rate = completionRate || 0;\n        const remainingRate = 100 - rate;\n\n        new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                datasets: [{\n                    data: [rate, remainingRate],\n                    backgroundColor: [\n                        rate >= 80 ? dashboardConfig.chartColors.success : \n                        rate >= 60 ? dashboardConfig.chartColors.warning : \n                        dashboardConfig.chartColors.danger,\n                        dashboardConfig.chartColors.light\n                    ],\n                    borderWidth: 0,\n                    cutout: '70%'\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        enabled: false\n                    }\n                },\n                animation: {\n                    duration: dashboardConfig.animationDuration\n                }\n            },\n            plugins: [{\n                beforeDraw: function(chart) {\n                    const width = chart.width;\n                    const height = chart.height;\n                    const ctx = chart.ctx;\n\n                    ctx.restore();\n                    const fontSize = (height / 114).toFixed(2);\n                    ctx.font = fontSize + \"em sans-serif\";\n                    ctx.textBaseline = \"middle\";\n                    ctx.fillStyle = dashboardConfig.chartColors.dark;\n\n                    const text = rate.toFixed(1) + \"%\";\n                    const textX = Math.round((width - ctx.measureText(text).width) / 2);\n                    const textY = height / 2;\n\n                    ctx.fillText(text, textX, textY);\n                    ctx.save();\n                }\n            }]\n        });\n    }\n\n    // Initialize refresh functionality\n    function initializeRefresh() {\n        const refreshButton = document.getElementById('refreshDashboard');\n        if (refreshButton) {\n            refreshButton.addEventListener('click', function() {\n                refreshDashboard();\n            });\n        }\n    }\n\n    // Refresh dashboard data\n    function refreshDashboard() {\n        const refreshButton = document.getElementById('refreshDashboard');\n        const originalContent = refreshButton ? refreshButton.innerHTML : '';\n        \n        if (refreshButton) {\n            refreshButton.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Refreshing...';\n            refreshButton.disabled = true;\n        }\n\n        // Simulate refresh (in real implementation, this would be an API call)\n        setTimeout(function() {\n            window.location.reload();\n        }, 1000);\n    }\n\n    // Initialize dashboard filters\n    function initializeDashboardFilters() {\n        const timeRangeFilter = document.getElementById('timeRangeFilter');\n        const departmentFilter = document.getElementById('departmentFilter');\n        \n        if (timeRangeFilter) {\n            timeRangeFilter.addEventListener('change', function() {\n                updateDashboardData();\n            });\n        }\n        \n        if (departmentFilter) {\n            departmentFilter.addEventListener('change', function() {\n                updateDashboardData();\n            });\n        }\n    }\n\n    // Update dashboard data based on filters\n    function updateDashboardData() {\n        const timeRange = document.getElementById('timeRangeFilter')?.value;\n        const department = document.getElementById('departmentFilter')?.value;\n        \n        // Show loading state\n        showLoadingState();\n        \n        // In a real implementation, this would be an API call\n        setTimeout(function() {\n            hideLoadingState();\n            // Update charts and statistics with new data\n        }, 1500);\n    }\n\n    // Show loading state\n    function showLoadingState() {\n        const cards = document.querySelectorAll('.card');\n        cards.forEach(function(card) {\n            const overlay = document.createElement('div');\n            overlay.className = 'loading-overlay d-flex justify-content-center align-items-center';\n            overlay.style.cssText = `\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                background: rgba(255, 255, 255, 0.8);\n                z-index: 10;\n            `;\n            overlay.innerHTML = '<div class=\"spinner-border text-primary\" role=\"status\"></div>';\n            \n            card.style.position = 'relative';\n            card.appendChild(overlay);\n        });\n    }\n\n    // Hide loading state\n    function hideLoadingState() {\n        const overlays = document.querySelectorAll('.loading-overlay');\n        overlays.forEach(function(overlay) {\n            overlay.remove();\n        });\n    }\n\n    // Setup auto-refresh\n    function setupAutoRefresh() {\n        const autoRefreshInterval = 5 * 60 * 1000; // 5 minutes\n        \n        setInterval(function() {\n            // Only auto-refresh if user is active\n            if (document.visibilityState === 'visible') {\n                updateStatistics();\n            }\n        }, autoRefreshInterval);\n    }\n\n    // Update statistics without full page reload\n    function updateStatistics() {\n        // This would typically fetch new data from the server\n        console.log('Auto-updating statistics...');\n    }\n\n    // Real-time notifications\n    function initializeRealTimeNotifications() {\n        // This would typically use WebSockets or Server-Sent Events\n        // for real-time updates\n        console.log('Real-time notifications initialized');\n    }\n\n    // Dashboard widget management\n    function initializeWidgetManagement() {\n        const widgets = document.querySelectorAll('.dashboard-widget');\n        \n        widgets.forEach(function(widget) {\n            // Add minimize/maximize functionality\n            const header = widget.querySelector('.card-header');\n            if (header) {\n                const toggleButton = document.createElement('button');\n                toggleButton.className = 'btn btn-sm btn-outline-secondary ms-auto';\n                toggleButton.innerHTML = '<i class=\"fas fa-minus\"></i>';\n                toggleButton.addEventListener('click', function() {\n                    toggleWidget(widget, this);\n                });\n                \n                header.appendChild(toggleButton);\n            }\n        });\n    }\n\n    // Toggle widget visibility\n    function toggleWidget(widget, button) {\n        const body = widget.querySelector('.card-body');\n        const icon = button.querySelector('i');\n        \n        if (body.style.display === 'none') {\n            body.style.display = '';\n            icon.className = 'fas fa-minus';\n        } else {\n            body.style.display = 'none';\n            icon.className = 'fas fa-plus';\n        }\n    }\n\n    // Export dashboard utilities for global use\n    window.DashboardUtils = {\n        createAuditStatusChart: createAuditStatusChart,\n        createFindingsSeverityChart: createFindingsSeverityChart,\n        createMonthlyTrendChart: createMonthlyTrendChart,\n        createCompletionRateGauge: createCompletionRateGauge,\n        refreshDashboard: refreshDashboard,\n        updateDashboardData: updateDashboardData\n    };\n\n    // Make createAuditStatusChart available globally for template use\n    window.createAuditStatusChart = createAuditStatusChart;\n\n})();\n\n// Dashboard-specific helper functions\nfunction formatNumber(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction calculatePercentage(value, total) {\n    return total > 0 ? ((value / total) * 100).toFixed(1) : 0;\n}\n\nfunction getStatusColor(status) {\n    const statusColors = {\n        'planned': 'secondary',\n        'in_progress': 'primary',\n        'review': 'warning',\n        'closed': 'success',\n        'overdue': 'danger'\n    };\n    return statusColors[status] || 'secondary';\n}\n\nfunction getPriorityColor(priority) {\n    const priorityColors = {\n        'low': 'success',\n        'medium': 'info',\n        'high': 'warning',\n        'critical': 'danger'\n    };\n    return priorityColors[priority] || 'secondary';\n}\n\nfunction formatTimeAgo(date) {\n    const now = new Date();\n    const diffTime = Math.abs(now - new Date(date));\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n    return `${Math.floor(diffDays / 30)} months ago`;\n}\n\nfunction isDueSoon(dueDate, daysThreshold = 3) {\n    const now = new Date();\n    const due = new Date(dueDate);\n    const diffTime = due - now;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return diffDays <= daysThreshold && diffDays > 0;\n}\n\nfunction isOverdue(dueDate) {\n    const now = new Date();\n    const due = new Date(dueDate);\n    return due < now;\n}\n","size_bytes":18612},"static/js/main.js":{"content":"// Audit Management System - Main JavaScript\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize tooltips\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n\n    // Initialize popovers\n    var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"popover\"]'));\n    var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {\n        return new bootstrap.Popover(popoverTriggerEl);\n    });\n\n    // Auto-hide alerts after 5 seconds\n    setTimeout(function() {\n        var alerts = document.querySelectorAll('.alert');\n        alerts.forEach(function(alert) {\n            var bsAlert = new bootstrap.Alert(alert);\n            bsAlert.close();\n        });\n    }, 5000);\n\n    // Mark notifications as read\n    document.addEventListener('click', function(e) {\n        if (e.target.matches('.mark-notification-read')) {\n            e.preventDefault();\n            const notificationId = e.target.dataset.notificationId;\n            \n            fetch(`/api/notifications/${notificationId}/mark-read`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    e.target.closest('.notification-item').classList.remove('notification-unread');\n                    updateNotificationCount();\n                }\n            })\n            .catch(error => console.error('Error:', error));\n        }\n    });\n\n    // Update notification count\n    function updateNotificationCount() {\n        const unreadNotifications = document.querySelectorAll('.notification-unread').length;\n        const badge = document.querySelector('.notification-badge');\n        if (badge) {\n            if (unreadNotifications > 0) {\n                badge.textContent = unreadNotifications;\n                badge.style.display = 'inline';\n            } else {\n                badge.style.display = 'none';\n            }\n        }\n    }\n\n    // File upload preview\n    const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n    fileInputs.forEach(function(input) {\n        input.addEventListener('change', function(e) {\n            const file = e.target.files[0];\n            const preview = input.parentElement.querySelector('.file-preview');\n            \n            if (file && preview) {\n                preview.innerHTML = `\n                    <div class=\"alert alert-info\">\n                        <i class=\"fas fa-file me-2\"></i>\n                        Selected: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)\n                    </div>\n                `;\n            }\n        });\n    });\n\n    // Form validation\n    const forms = document.querySelectorAll('.needs-validation');\n    forms.forEach(function(form) {\n        form.addEventListener('submit', function(e) {\n            if (!form.checkValidity()) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            form.classList.add('was-validated');\n        });\n    });\n\n    // Date input validation\n    const dateInputs = document.querySelectorAll('input[type=\"date\"]');\n    dateInputs.forEach(function(input) {\n        input.addEventListener('change', function() {\n            const date = new Date(input.value);\n            const today = new Date();\n            const startDateInput = document.querySelector('input[name=\"planned_start_date\"]');\n            \n            if (input.name === 'planned_end_date' && startDateInput) {\n                const startDate = new Date(startDateInput.value);\n                if (date < startDate) {\n                    input.setCustomValidity('End date cannot be before start date');\n                } else {\n                    input.setCustomValidity('');\n                }\n            }\n        });\n    });\n\n    // Auto-refresh dashboard every 5 minutes if on dashboard page\n    if (window.location.pathname.includes('dashboard')) {\n        setInterval(function() {\n            // Refresh notification count\n            fetch('/api/notifications/count')\n                .then(response => response.json())\n                .then(data => {\n                    const badge = document.querySelector('.notification-badge');\n                    if (badge && data.count > 0) {\n                        badge.textContent = data.count;\n                        badge.style.display = 'inline';\n                    } else if (badge) {\n                        badge.style.display = 'none';\n                    }\n                })\n                .catch(error => console.error('Error refreshing notifications:', error));\n        }, 300000); // 5 minutes\n    }\n\n    // Search functionality\n    const searchInputs = document.querySelectorAll('.search-input');\n    searchInputs.forEach(function(input) {\n        input.addEventListener('input', function() {\n            const searchTerm = input.value.toLowerCase();\n            const targetTable = document.querySelector(input.dataset.target);\n            \n            if (targetTable) {\n                const rows = targetTable.querySelectorAll('tbody tr');\n                rows.forEach(function(row) {\n                    const text = row.textContent.toLowerCase();\n                    row.style.display = text.includes(searchTerm) ? '' : 'none';\n                });\n            }\n        });\n    });\n\n    // Confirmation dialogs for delete actions\n    const deleteButtons = document.querySelectorAll('.btn-delete');\n    deleteButtons.forEach(function(button) {\n        button.addEventListener('click', function(e) {\n            e.preventDefault();\n            \n            const message = button.dataset.confirmMessage || 'Are you sure you want to delete this item?';\n            if (confirm(message)) {\n                if (button.closest('form')) {\n                    button.closest('form').submit();\n                } else {\n                    window.location.href = button.href;\n                }\n            }\n        });\n    });\n});\n\n// Utility functions\nfunction showAlert(message, type = 'info') {\n    const alertContainer = document.querySelector('.alert-container') || document.body;\n    const alert = document.createElement('div');\n    alert.className = `alert alert-${type} alert-dismissible fade show`;\n    alert.innerHTML = `\n        ${message}\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    alertContainer.insertBefore(alert, alertContainer.firstChild);\n    \n    // Auto-hide after 5 seconds\n    setTimeout(function() {\n        if (alert.parentNode) {\n            const bsAlert = new bootstrap.Alert(alert);\n            bsAlert.close();\n        }\n    }, 5000);\n}\n\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    });\n}\n\nfunction formatDateTime(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n}\n\nfunction getBadgeClass(status) {\n    const statusMap = {\n        'draft': 'secondary',\n        'in_progress': 'warning',\n        'review': 'info',\n        'completed': 'success',\n        'closed': 'dark',\n        'open': 'danger',\n        'planned': 'secondary',\n        'overdue': 'danger',\n        'low': 'info',\n        'medium': 'warning',\n        'high': 'danger',\n        'critical': 'danger'\n    };\n    return statusMap[status] || 'secondary';\n}","size_bytes":7872},"routes_old.py":{"content":"from flask import render_template, request, redirect, url_for, flash, session, jsonify, send_file\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom sqlalchemy import extract\nfrom app import app, db\nfrom models import *\n# Create alias for backward compatibility\nEvidence = EvidenceFile\nfrom auth import login_required, role_required, get_current_user, log_audit_action, check_password_reset_required\nfrom utils import generate_password, save_uploaded_file, get_audit_statistics, get_user_notifications, create_notification\nfrom datetime import datetime, timedelta\nimport os\n\n@app.route('/')\ndef landing():\n    \"\"\"Landing page with role-based login options\"\"\"\n    if 'user_id' in session:\n        return redirect(url_for('dashboard'))\n    return render_template('landing.html')\n\n@app.route('/login/<role>')\ndef login_form(role):\n    \"\"\"Display login form for specific role\"\"\"\n    valid_roles = ['admin', 'auditor', 'auditee', 'supervisor']\n    if role not in valid_roles:\n        flash('Invalid role specified.', 'error')\n        return redirect(url_for('landing'))\n    return render_template('login.html', role=role)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    \"\"\"Process login\"\"\"\n    username = request.form['username']\n    password = request.form['password']\n    role = request.form['role']\n    \n    user = User.query.filter_by(username=username, role=role, is_active=True).first()\n    \n    if user and check_password_hash(user.password_hash, password):\n        session['user_id'] = user.id\n        session['user_role'] = user.role\n        user.last_login = datetime.utcnow()\n        db.session.commit()\n        \n        log_audit_action('login', 'user', user.id, f'User {username} logged in')\n        \n        # Check if password reset is required\n        if user.password_reset_required:\n            flash('You must change your password before continuing.', 'warning')\n            return redirect(url_for('change_password'))\n        \n        flash(f'Welcome, {user.full_name}!', 'success')\n        return redirect(url_for('dashboard'))\n    else:\n        flash('Invalid username, password, or role.', 'error')\n        return redirect(url_for('login_form', role=role))\n\n@app.route('/logout')\n@login_required\ndef logout():\n    \"\"\"Logout user\"\"\"\n    user = get_current_user()\n    if user:\n        log_audit_action('logout', 'user', user.id, f'User {user.username} logged out')\n    \n    session.clear()\n    flash('You have been logged out.', 'info')\n    return redirect(url_for('landing'))\n\n@app.route('/dashboard')\n@login_required\ndef dashboard():\n    \"\"\"Main dashboard - redirect to role-specific dashboard\"\"\"\n    user = get_current_user()\n    \n    # Check password reset requirement\n    if check_password_reset_required():\n        return redirect(url_for('change_password'))\n    \n    # Redirect to role-specific dashboard\n    if user and user.role == 'director':\n        return redirect(url_for('director_dashboard'))\n    elif user and user.role == 'auditor':\n        return redirect(url_for('auditor_dashboard'))\n    elif user and user.role == 'auditee':\n        return redirect(url_for('auditee_dashboard'))\n    elif user and user.role == 'head_of_business_control':\n        return redirect(url_for('head_of_business_control_dashboard'))\n    else:\n        flash('Invalid user or role.', 'error')\n        return redirect(url_for('logout'))\n\n@app.route('/director/dashboard')\n@role_required('director')\ndef director_dashboard():\n    \"\"\"Director dashboard with plan approval capabilities\"\"\"\n    user = get_current_user()\n    \n    # Get all audits for organization overview\n    all_audits = Audit.query.all()\n    \n    # Get audit plans pending director approval\n    plans_pending_approval = Audit.query.filter_by(\n        status='plan_pending_director_approval'\n    ).order_by(Audit.plan_submitted_at.desc()).all()\n    \n    # Get recently approved plans\n    recently_approved = Audit.query.filter(\n        Audit.director_approved_at.isnot(None)\n    ).order_by(Audit.director_approved_at.desc()).limit(10).all()\n    \n    # Statistics\n    total_audits_count = len(all_audits)\n    plans_pending_count = len(plans_pending_approval)\n    approved_plans_count = len([a for a in all_audits if a.director_approved_at])\n    active_audits_count = len([a for a in all_audits if a.status in ['auditor_assigned', 'in_progress']])\n    \n    # Get recent activities\n    recent_activities = AuditLog.query.order_by(AuditLog.created_at.desc()).limit(10).all()\n    \n    return render_template('director/dashboard.html',\n                         user=user,\n                         all_audits=all_audits,\n                         plans_pending_approval=plans_pending_approval,\n                         recently_approved=recently_approved,\n                         total_audits_count=total_audits_count,\n                         plans_pending_count=plans_pending_count,\n                         approved_plans_count=approved_plans_count,\n                         active_audits_count=active_audits_count,\n                         recent_activities=recent_activities)\n\n@app.route('/auditor/dashboard')\n@role_required('auditor')\ndef auditor_dashboard():\n    \"\"\"Auditor dashboard with comprehensive statistics\"\"\"\n    user = get_current_user()\n    today = datetime.utcnow().date()\n    \n    # Get auditor-specific statistics\n    if not user:\n        return redirect(url_for('login_form', role='auditor'))\n    \n    assigned_audits = Audit.query.filter_by(auditor_id=user.id).count()\n    in_progress_audits = Audit.query.filter_by(auditor_id=user.id, status='in_progress').count()\n    completed_audits = Audit.query.filter_by(auditor_id=user.id, status='completed').count()\n    overdue_audits = Audit.query.filter(\n        Audit.auditor_id == user.id,\n        Audit.planned_end_date < today,\n        Audit.status.in_(['draft', 'in_progress'])\n    ).count()\n    \n    stats = {\n        'assigned_audits': assigned_audits,\n        'in_progress_audits': in_progress_audits,\n        'completed_audits': completed_audits,\n        'overdue_audits': overdue_audits\n    }\n    \n    # Recent audit assignments\n    recent_audits = Audit.query.filter_by(auditor_id=user.id).order_by(Audit.created_at.desc()).limit(5).all()\n    \n    # Recent findings created by auditor\n    recent_findings = Finding.query.join(Audit).filter(\n        Audit.auditor_id == user.id\n    ).order_by(Finding.created_at.desc()).limit(10).all()\n    \n    # Pending actions (simplified for now)\n    pending_actions = []\n    \n    return render_template('auditor/dashboard.html', \n                         stats=stats, recent_audits=recent_audits, \n                         recent_findings=recent_findings,\n                         pending_actions=pending_actions, today=today)\n\n@app.route('/auditee/dashboard')\n@role_required('auditee')\ndef auditee_dashboard():\n    \"\"\"Auditee dashboard with comprehensive statistics\"\"\"\n    user = get_current_user()\n    today = datetime.utcnow().date()\n    \n    # Get auditee-specific statistics\n    if not user:\n        return redirect(url_for('login_form', role='auditee'))\n    \n    active_audits = Audit.query.filter_by(auditee_id=user.id, status='in_progress').count()\n    pending_findings = Finding.query.filter_by(auditee_id=user.id, status='open').count()\n    overdue_actions = CorrectiveAction.query.join(Finding).filter(\n        Finding.auditee_id == user.id,\n        CorrectiveAction.planned_completion_date < today,\n        CorrectiveAction.status.in_(['planned', 'in_progress'])\n    ).count()\n    completed_actions = CorrectiveAction.query.join(Finding).filter(\n        Finding.auditee_id == user.id,\n        CorrectiveAction.status == 'completed'\n    ).count()\n    \n    stats = {\n        'active_audits': active_audits,\n        'pending_findings': pending_findings,\n        'overdue_actions': overdue_actions,\n        'completed_actions': completed_actions\n    }\n    \n    # Recent findings\n    recent_findings = Finding.query.filter_by(auditee_id=user.id).order_by(Finding.created_at.desc()).limit(5).all()\n    \n    # Urgent actions\n    urgent_actions = CorrectiveAction.query.join(Finding).filter(\n        Finding.auditee_id == user.id,\n        CorrectiveAction.planned_completion_date <= today + timedelta(days=7),\n        CorrectiveAction.status.in_(['planned', 'in_progress'])\n    ).limit(5).all()\n    \n    return render_template('auditee/dashboard.html', \n                         stats=stats, recent_findings=recent_findings, \n                         urgent_actions=urgent_actions, today=today)\n\n@app.route('/head-of-business-control/dashboard')\n@role_required('head_of_business_control')\ndef head_of_business_control_dashboard():\n    \"\"\"Head of Business Control dashboard with auditor assignment and evidence review\"\"\"\n    user = get_current_user()\n    \n    # Get supervised audits\n    supervised_audits = Audit.query.filter_by(supervisor_id=user.id).all()\n    \n    # Get audits awaiting auditor assignment (director approved, need auditor)\n    awaiting_assignment = Audit.query.filter_by(\n        supervisor_id=user.id, \n        status='pending_auditor_assignment'\n    ).filter(Audit.director_approved_at.isnot(None)).order_by(Audit.director_approved_at.desc()).all()\n    \n    # Get evidence pending review\n    pending_evidence = EvidenceFile.query.join(Finding).join(Audit).filter(\n        Audit.supervisor_id == user.id,\n        EvidenceFile.supervisor_status.is_(None)\n    ).all()\n    \n    # Get recent activities \n    recent_activities = AuditLog.query.filter(\n        AuditLog.entity_type == 'evidence'\n    ).order_by(AuditLog.created_at.desc()).limit(10).all()\n    \n    context = {\n        'user': user,\n        'supervised_audits': supervised_audits,\n        'supervised_audits_count': len(supervised_audits),\n        'awaiting_assignment': awaiting_assignment,\n        'awaiting_assignment_count': len(awaiting_assignment),\n        'active_audits_count': len([a for a in supervised_audits if a.status in ['auditor_assigned', 'in_progress']]),\n        'pending_evidence': pending_evidence,\n        'pending_evidence_count': len(pending_evidence),\n        'completed_reviews_count': EvidenceFile.query.join(Finding).join(Audit).filter(\n            Audit.supervisor_id == user.id,\n            EvidenceFile.supervisor_status.isnot(None)\n        ).count(),\n        'recent_activities': recent_activities\n    }\n    \n    return render_template('head_of_business_control/dashboard.html', **context)\n\n@app.route('/change-password', methods=['GET', 'POST'])\n@login_required\ndef change_password():\n    \"\"\"Change password\"\"\"\n    user = get_current_user()\n    \n    if request.method == 'POST':\n        current_password = request.form['current_password']\n        new_password = request.form['new_password']\n        confirm_password = request.form['confirm_password']\n        \n        # Validate current password\n        if not check_password_hash(user.password_hash, current_password):\n            flash('Current password is incorrect.', 'error')\n            return render_template('profile.html', user=user, change_password=True)\n        \n        # Validate new password\n        if new_password != confirm_password:\n            flash('New passwords do not match.', 'error')\n            return render_template('profile.html', user=user, change_password=True)\n        \n        if len(new_password) < 8:\n            flash('Password must be at least 8 characters long.', 'error')\n            return render_template('profile.html', user=user, change_password=True)\n        \n        # Update password\n        user.password_hash = generate_password_hash(new_password)\n        user.password_reset_required = False\n        db.session.commit()\n        \n        log_audit_action('password_change', 'user', user.id, 'User changed password')\n        flash('Password changed successfully.', 'success')\n        return redirect(url_for('dashboard'))\n    \n    return render_template('profile.html', user=user, change_password=True)\n\n@app.route('/profile')\n@login_required\ndef profile():\n    \"\"\"User profile\"\"\"\n    user = get_current_user()\n    notifications = get_user_notifications(user.id)\n    return render_template('profile.html', user=user, notifications=notifications)\n\n# Admin Routes\n@app.route('/admin/users')\n@role_required('admin')\ndef admin_users():\n    \"\"\"Manage users\"\"\"\n    users = User.query.all()\n    departments = Department.query.filter_by(is_active=True).all()\n    return render_template('admin/users.html', users=users, departments=departments)\n\n@app.route('/admin/users/create', methods=['POST'])\n@role_required('admin')\ndef create_user():\n    \"\"\"Create new user\"\"\"\n    username = request.form['username']\n    email = request.form['email']\n    first_name = request.form['first_name']\n    last_name = request.form['last_name']\n    role = request.form['role']\n    department_id = request.form.get('department_id') or None\n    \n    # Check if user exists\n    if User.query.filter_by(username=username).first():\n        flash('Username already exists.', 'error')\n        return redirect(url_for('admin_users'))\n    \n    if User.query.filter_by(email=email).first():\n        flash('Email already exists.', 'error')\n        return redirect(url_for('admin_users'))\n    \n    # Generate auto password\n    auto_password = generate_password()\n    \n    # Get contact details\n    phone = request.form.get('phone', '')\n    address = request.form.get('address', '')\n    \n    user = User()\n    user.username = username\n    user.email = email\n    user.first_name = first_name\n    user.last_name = last_name\n    user.role = role\n    user.phone = phone\n    user.address = address\n    user.department_id = department_id\n    user.password_hash = generate_password_hash(auto_password)\n    user.password_reset_required = True\n    \n    db.session.add(user)\n    db.session.commit()\n    \n    log_audit_action('create_user', 'user', user.id, f'Created user {username}')\n    \n    # Create notification for admin about the generated password\n    from utils import create_notification\n    admin_user = get_current_user()\n    create_notification(\n        user_id=admin_user.id,\n        title=f'User Created: {username}',\n        message=f'New user {first_name} {last_name} created with auto-generated password: {auto_password}',\n        notification_type='user_created'\n    )\n    \n    flash(f'User created successfully.', 'success')\n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/users/<int:user_id>/toggle-status', methods=['POST'])\n@role_required('admin')\ndef toggle_user_status(user_id):\n    \"\"\"Toggle user active status\"\"\"\n    user = User.query.get_or_404(user_id)\n    user.is_active = not user.is_active\n    db.session.commit()\n    \n    action = 'activate_user' if user.is_active else 'deactivate_user'\n    log_audit_action(action, 'user', user.id, f'User {user.username} {\"activated\" if user.is_active else \"deactivated\"}')\n    \n    flash(f'User {\"activated\" if user.is_active else \"deactivated\"} successfully.', 'success')\n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/users/<int:user_id>/delete', methods=['POST'])\n@role_required('admin')\ndef delete_user(user_id):\n    \"\"\"Delete user\"\"\"\n    user = User.query.get_or_404(user_id)\n    \n    # Prevent deleting admin user\n    if user.role == 'admin':\n        flash('Cannot delete admin user.', 'error')\n        return redirect(url_for('admin_users'))\n    \n    username = user.username\n    db.session.delete(user)\n    db.session.commit()\n    \n    log_audit_action('delete_user', 'user', user_id, f'Deleted user {username}')\n    flash(f'User {username} deleted successfully.', 'success')\n    return redirect(url_for('admin_users'))\n\n@app.route('/admin/departments')\n@role_required('admin')\ndef admin_departments():\n    \"\"\"Manage departments\"\"\"\n    departments = Department.query.all()\n    return render_template('admin/departments.html', departments=departments)\n\n@app.route('/admin/departments/create', methods=['POST'])\n@role_required('admin')\ndef create_department():\n    \"\"\"Create new department\"\"\"\n    name = request.form['name']\n    description = request.form.get('description', '')\n    head_name = request.form.get('head_name', '')\n    \n    if Department.query.filter_by(name=name).first():\n        flash('Department name already exists.', 'error')\n        return redirect(url_for('admin_departments'))\n    \n    department = Department()\n    department.name = name\n    department.description = description\n    department.head_name = head_name\n    \n    db.session.add(department)\n    db.session.commit()\n    \n    # Add department units if provided\n    unit_names = request.form.getlist('unit_names[]')\n    unit_descriptions = request.form.getlist('unit_descriptions[]')\n    \n    for i, unit_name in enumerate(unit_names):\n        if unit_name.strip():\n            unit = DepartmentUnit()\n            unit.name = unit_name.strip()\n            unit.description = unit_descriptions[i].strip() if i < len(unit_descriptions) else ''\n            unit.department_id = department.id\n            db.session.add(unit)\n    \n    db.session.commit()\n    \n    log_audit_action('create_department', 'department', department.id, f'Created department {name}')\n    flash('Department created successfully.', 'success')\n    return redirect(url_for('admin_departments'))\n\n@app.route('/admin/departments/<int:department_id>/delete', methods=['POST'])\n@role_required('admin')\ndef delete_department(department_id):\n    \"\"\"Delete department\"\"\"\n    department = Department.query.get_or_404(department_id)\n    \n    # Check if department has users\n    if department.users:\n        flash('Cannot delete department with assigned users.', 'error')\n        return redirect(url_for('admin_departments'))\n    \n    department_name = department.name\n    db.session.delete(department)\n    db.session.commit()\n    \n    log_audit_action('delete_department', 'department', department_id, f'Deleted department {department_name}')\n    flash(f'Department {department_name} deleted successfully.', 'success')\n    return redirect(url_for('admin_departments'))\n\n# Audit Routes\n@app.route('/audits')\n@login_required\ndef audit_list():\n    \"\"\"List audits based on user role\"\"\"\n    user = get_current_user()\n    \n    # Filter audits based on role\n    if user.role == 'admin':\n        audits = Audit.query.all()\n    elif user.role == 'auditor':\n        audits = Audit.query.filter_by(auditor_id=user.id).all()\n    elif user.role == 'auditee':\n        audits = Audit.query.filter_by(auditee_id=user.id).all()\n    elif user.role == 'supervisor':\n        audits = Audit.query.filter_by(supervisor_id=user.id).all()\n    else:\n        audits = []\n    \n    return render_template('audits/list.html', audits=audits, user=user)\n\n@app.route('/audits/create', methods=['GET', 'POST'])\n@role_required('head_of_business_control')\ndef create_audit():\n    \"\"\"Create new audit with comprehensive workflow (Phase 1: Audit Assignment)\"\"\"\n    if request.method == 'POST':\n        # Basic audit information\n        title = request.form['title']\n        description = request.form.get('description', '')\n        audit_type = request.form['audit_type']\n        priority = request.form['priority']\n        auditor_id = request.form['auditor_id']\n        auditee_id = request.form.get('auditee_id') or None\n        supervisor_id = request.form.get('supervisor_id') or None\n        department_id = request.form.get('department_id') or None\n        planned_start_date = datetime.strptime(request.form['planned_start_date'], '%Y-%m-%d').date()\n        planned_end_date = datetime.strptime(request.form['planned_end_date'], '%Y-%m-%d').date()\n        \n        # Phase 1 - Audit scope and objectives\n        audit_scope = request.form.get('audit_scope', '')\n        audit_objectives = request.form.get('audit_objectives', '')\n        audit_criteria = request.form.get('audit_criteria', '')\n        resources_needed = request.form.get('resources_needed', '')\n        \n        # Generate reference number\n        year = datetime.utcnow().year\n        count = Audit.query.filter(extract('year', Audit.created_at) == year).count() + 1\n        reference_number = f\"AUD-{year}-{count:04d}\"\n        \n        audit = Audit()\n        audit.reference_number = reference_number\n        audit.title = title\n        audit.description = description\n        audit.audit_type = audit_type\n        audit.priority = priority\n        audit.auditor_id = None  # Will be assigned after director approval\n        audit.auditee_id = auditee_id\n        audit.supervisor_id = get_current_user().id  # Head of Business Control creating the plan\n        audit.director_id = 1  # Assuming director has ID 1, you can make this dynamic\n        audit.department_id = department_id\n        audit.planned_start_date = planned_start_date\n        audit.planned_end_date = planned_end_date\n        audit.audit_scope = audit_scope\n        audit.audit_objectives = audit_objectives\n        audit.audit_criteria = audit_criteria\n        audit.resources_needed = resources_needed\n        audit.status = 'plan_pending_director_approval'  # Head of Business Control submits plan to Director\n        audit.created_by_id = get_current_user().id\n        \n        db.session.add(audit)\n        db.session.commit()\n        \n        log_audit_action('create_audit', 'audit', audit.id, f'Created audit {reference_number} with scope and objectives')\n        \n        # Mark plan as submitted to Director\n        audit.plan_submitted_at = datetime.utcnow()\n        audit.audit_plan = f\"\"\"Audit Plan for {title}\n\nSCOPE:\n{audit_scope}\n\nOBJECTIVES:\n{audit_objectives}\n\nCRITERIA:\n{audit_criteria}\n\nRESOURCES NEEDED:\n{resources_needed}\n\nThis plan is submitted for Director approval.\"\"\"\n        \n        # Create notification for Director (Phase 1 complete)\n        notification_message = f\"\"\"New audit plan submitted for your approval: {title}\n\nPlan Details:\n- Reference: {reference_number}\n- Submitted by: {user.full_name} (Head of Business Control)\n- Type: {audit_type}\n- Priority: {priority.upper()}\n- Planned Start: {planned_start_date.strftime('%B %d, %Y')}\n- Planned End: {planned_end_date.strftime('%B %d, %Y')}\n\nScope: {audit_scope[:100]}...\nObjectives: {audit_objectives[:100]}...\n\nPlease review and approve this audit plan.\"\"\"\n        \n        create_notification(\n            director.id,\n            'New Audit Plan - Director Approval Required',\n            notification_message,\n            'plan_approval_required',\n            'audit',\n            audit.id\n        )\n        \n        # Notify auditee if assigned\n        if auditee_id:\n            auditee_message = f\"\"\"You have been designated as the primary auditee for audit: {title}\n\nReference: {reference_number}\nAuditor: {User.query.get(auditor_id).full_name}\nPlanned Period: {planned_start_date.strftime('%B %d, %Y')} - {planned_end_date.strftime('%B %d, %Y')}\n\nThe auditor will contact you with document requests and coordination details.\"\"\"\n            \n            create_notification(\n                auditee_id,\n                'Audit Assignment Notification',\n                auditee_message,\n                'audit_assigned',\n                'audit',\n                audit.id\n            )\n        \n        flash(f'Audit plan {reference_number} submitted to Director for approval!', 'success')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    # GET request - show comprehensive form\n    auditors = User.query.filter_by(role='auditor', is_active=True).all()\n    auditees = User.query.filter_by(role='auditee', is_active=True).all()\n    supervisors = User.query.filter_by(role='supervisor', is_active=True).all()\n    departments = Department.query.filter_by(is_active=True).all()\n    \n    return render_template('audits/create_comprehensive.html',\n                         auditors=auditors,\n                         auditees=auditees,\n                         supervisors=supervisors,\n                         departments=departments)\n\n\n# New Workflow Routes for Director and Head of Business Control\n\n@app.route('/director/approve-plan/<int:audit_id>', methods=['GET', 'POST'])\n@role_required('director')\ndef director_approve_plan(audit_id):\n    \"\"\"Director approves or rejects audit plans\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    \n    # Verify this audit is pending director approval\n    if audit.status != 'plan_pending_director_approval':\n        flash('This audit plan is not pending director approval.', 'error')\n        return redirect(url_for('director_dashboard'))\n    \n    if request.method == 'POST':\n        decision = request.form.get('decision')\n        director_feedback = request.form.get('director_feedback', '').strip()\n        user = get_current_user()\n        \n        if decision == 'approve':\n            # Approve the plan\n            audit.status = 'pending_auditor_assignment'\n            audit.director_approved_at = datetime.utcnow()\n            audit.director_feedback = director_feedback if director_feedback else 'Plan approved by Director'\n            \n            db.session.commit()\n            \n            # Notify Head of Business Control\n            notification_message = f\"\"\"Audit plan approved: {audit.title}\n\nYour audit plan \"{audit.title}\" has been approved by the Director.\n\nPlan Details:\n- Reference: {audit.reference_number}\n- Approved: {datetime.utcnow().strftime('%B %d, %Y at %I:%M %p')}\n- Director Feedback: {director_feedback if director_feedback else 'No additional feedback provided'}\n\nNext Step: Please assign an auditor to this approved plan.\"\"\"\n            \n            head_of_business_control = User.query.get(audit.supervisor_id)\n            if head_of_business_control:\n                create_notification(\n                    head_of_business_control.id,\n                    'Audit Plan Approved - Assign Auditor',\n                    notification_message,\n                    'plan_approved',\n                    'audit',\n                    audit.id\n                )\n            \n            log_audit_action('approve_plan', 'audit', audit.id, f'Director approved audit plan {audit.reference_number}')\n            flash(f'Audit plan {audit.reference_number} approved successfully!', 'success')\n            \n        elif decision == 'reject':\n            # Reject the plan\n            audit.status = 'plan_changes_requested'\n            audit.director_feedback = director_feedback if director_feedback else 'Changes requested by Director'\n            \n            db.session.commit()\n            \n            # Notify Head of Business Control\n            notification_message = f\"\"\"Changes requested for audit plan: {audit.title}\n\nThe Director has requested changes to your audit plan \"{audit.title}\".\n\nPlan Details:\n- Reference: {audit.reference_number}\n- Status: Changes Requested\n- Director Feedback: {director_feedback if director_feedback else 'Please review and revise the plan'}\n\nNext Step: Please revise the audit plan and resubmit for approval.\"\"\"\n            \n            head_of_business_control = User.query.get(audit.supervisor_id)\n            if head_of_business_control:\n                create_notification(\n                    head_of_business_control.id,\n                    'Audit Plan - Changes Requested',\n                    notification_message,\n                    'plan_changes_requested',\n                    'audit',\n                    audit.id\n                )\n            \n            log_audit_action('reject_plan', 'audit', audit.id, f'Director requested changes for audit plan {audit.reference_number}')\n            flash(f'Changes requested for audit plan {audit.reference_number}.', 'warning')\n        \n        return redirect(url_for('director_dashboard'))\n    \n    # GET request - show plan review page\n    return render_template('director/review_plan.html', audit=audit)\n\n\n@app.route('/head-of-business-control/assign-auditor/<int:audit_id>', methods=['GET', 'POST'])\n@role_required('head_of_business_control')\ndef head_of_business_control_assign_auditor(audit_id):\n    \"\"\"Head of Business Control assigns auditor to approved plans\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    \n    # Verify this audit is ready for auditor assignment\n    if audit.status != 'pending_auditor_assignment' or not audit.director_approved_at:\n        flash('This audit is not ready for auditor assignment.', 'error')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    # Verify user has permission to assign auditors for this audit\n    user = get_current_user()\n    if audit.supervisor_id != user.id:\n        flash('You do not have permission to assign auditors for this audit.', 'error')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    if request.method == 'POST':\n        auditor_id = request.form.get('auditor_id')\n        assignment_notes = request.form.get('assignment_notes', '').strip()\n        \n        if not auditor_id:\n            flash('Please select an auditor.', 'error')\n            return redirect(request.url)\n        \n        auditor = User.query.get(auditor_id)\n        if not auditor or auditor.role != 'auditor':\n            flash('Invalid auditor selected.', 'error')\n            return redirect(request.url)\n        \n        # Assign auditor\n        audit.auditor_id = auditor_id\n        audit.status = 'auditor_assigned'\n        audit.auditor_assigned_at = datetime.utcnow()\n        audit.assignment_notes = assignment_notes\n        \n        db.session.commit()\n        \n        # Notify auditor\n        notification_message = f\"\"\"You have been assigned to audit: {audit.title}\n\nAudit Assignment Details:\n- Reference: {audit.reference_number}\n- Assigned by: {user.full_name} (Head of Business Control)\n- Type: {audit.audit_type.replace('_', ' ').title()}\n- Priority: {audit.priority.upper()}\n- Planned Start: {audit.planned_start_date.strftime('%B %d, %Y') if audit.planned_start_date else 'TBD'}\n- Planned End: {audit.planned_end_date.strftime('%B %d, %Y') if audit.planned_end_date else 'TBD'}\n\nDirector Approval: {audit.director_approved_at.strftime('%B %d, %Y') if audit.director_approved_at else 'N/A'}\n\nAssignment Notes: {assignment_notes if assignment_notes else 'No additional notes provided'}\n\nPlease review the audit plan and begin your audit activities.\"\"\"\n        \n        create_notification(\n            auditor.id,\n            'New Audit Assignment - Action Required',\n            notification_message,\n            'audit_assigned',\n            'audit',\n            audit.id\n        )\n        \n        # Notify auditee\n        if audit.auditee:\n            auditee_message = f\"\"\"Audit notification: {audit.title}\n\nYou have been assigned as the auditee for the audit \"{audit.title}\".\n\nAudit Details:\n- Reference: {audit.reference_number}\n- Auditor: {auditor.full_name}\n- Type: {audit.audit_type.replace('_', ' ').title()}\n- Priority: {audit.priority.upper()}\n- Planned Timeline: {audit.planned_start_date.strftime('%B %d, %Y') if audit.planned_start_date else 'TBD'} - {audit.planned_end_date.strftime('%B %d, %Y') if audit.planned_end_date else 'TBD'}\n\nPlease prepare for the upcoming audit and coordinate with the assigned auditor.\"\"\"\n            \n            create_notification(\n                audit.auditee.id,\n                'Audit Assignment - Auditee Notification',\n                auditee_message,\n                'auditee_assigned',\n                'audit',\n                audit.id\n            )\n        \n        log_audit_action('assign_auditor', 'audit', audit.id, f'Head of Business Control assigned auditor {auditor.full_name} to audit {audit.reference_number}')\n        flash(f'Auditor {auditor.full_name} assigned to audit {audit.reference_number} successfully!', 'success')\n        return redirect(url_for('head_of_business_control_dashboard'))\n    \n    # GET request - show auditor assignment page\n    available_auditors = User.query.filter_by(role='auditor', is_active=True).all()\n    return render_template('head_of_business_control/assign_auditor.html', audit=audit, available_auditors=available_auditors)\n\n@app.route('/audits/<int:audit_id>')\n@login_required\ndef audit_detail(audit_id):\n    \"\"\"View audit details\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    user = get_current_user()\n    \n    # Check access permissions\n    if user.role not in ['admin'] and user.id not in [audit.auditor_id, audit.auditee_id, audit.supervisor_id]:\n        flash('You do not have permission to view this audit.', 'error')\n        return redirect(url_for('audit_list'))\n    \n    return render_template('audits/execute.html', audit=audit, user=user)\n\n@app.route('/audits/<int:audit_id>/findings')\n@login_required\ndef audit_findings(audit_id):\n    \"\"\"View audit findings\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    user = get_current_user()\n    \n    # Check access permissions\n    if user.role not in ['admin'] and user.id not in [audit.auditor_id, audit.auditee_id, audit.supervisor_id]:\n        flash('You do not have permission to view this audit.', 'error')\n        return redirect(url_for('audit_list'))\n    \n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    return render_template('audits/findings.html', audit=audit, findings=findings, user=user)\n\n@app.route('/findings/<int:finding_id>/actions')\n@login_required\ndef finding_actions(finding_id):\n    \"\"\"View corrective actions for a finding\"\"\"\n    finding = Finding.query.get_or_404(finding_id)\n    user = get_current_user()\n    \n    # Check access permissions\n    audit = finding.audit\n    if user.role not in ['admin'] and user.id not in [audit.auditor_id, audit.auditee_id, audit.supervisor_id, finding.assigned_to_id]:\n        flash('You do not have permission to view this finding.', 'error')\n        return redirect(url_for('audit_list'))\n    \n    actions = CorrectiveAction.query.filter_by(finding_id=finding_id).all()\n    users = User.query.filter_by(is_active=True).all()\n    \n    return render_template('audits/actions.html', finding=finding, actions=actions, users=users, user=user)\n\n@app.route('/api/notifications/<int:notification_id>/mark-read', methods=['POST'])\n@login_required\ndef mark_notification_read(notification_id):\n    \"\"\"Mark notification as read\"\"\"\n    notification = Notification.query.get_or_404(notification_id)\n    user = get_current_user()\n    \n    if notification.user_id != user.id:\n        return jsonify({'error': 'Unauthorized'}), 403\n    \n    notification.is_read = True\n    db.session.commit()\n    \n    return jsonify({'success': True})\n\n@app.route('/api/notifications/count')\n@login_required\ndef get_notification_count():\n    \"\"\"Get unread notification count for current user\"\"\"\n    user = get_current_user()\n    count = Notification.query.filter_by(user_id=user.id, is_read=False).count()\n    return jsonify({'count': count})\n\n# Error handlers\n@app.errorhandler(404)\ndef not_found_error(error):\n    return render_template('base.html', error_message='Page not found'), 404\n\n@app.errorhandler(500)\ndef internal_error(error):\n    db.session.rollback()\n    return render_template('base.html', error_message='Internal server error'), 500\n\n# Auditor workflow routes\n@app.route('/auditor/audits')\n@role_required('auditor')\ndef auditor_audits():\n    \"\"\"Auditor's audit list view\"\"\"\n    user = get_current_user()\n    audits = Audit.query.filter_by(auditor_id=user.id).order_by(Audit.created_at.desc()).all()\n    \n    return render_template('auditor/audits.html', audits=audits)\n\n@app.route('/auditor/audit/<int:audit_id>')\n@role_required('auditor')\ndef auditor_audit_detail(audit_id):\n    \"\"\"Auditor's detailed audit view\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    # Get checklist items through template relationship\n    checklist_items = []\n    if hasattr(audit, 'template') and audit.template:\n        checklist_items = audit.template.checklist_items\n    evidence = EvidenceFile.query.filter_by(audit_id=audit_id).all()\n    \n    return render_template('auditor/audit_detail_comprehensive.html', \n                         audit=audit, findings=findings, \n                         checklist_items=checklist_items, evidence=evidence)\n\n# Phase 2: Auditor Preparation Routes\n@app.route('/auditor/audit/<int:audit_id>/acknowledge', methods=['POST'])\n@role_required('auditor')\ndef auditor_acknowledge_audit(audit_id):\n    \"\"\"Phase 2: Auditor acknowledges the audit assignment\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if audit.status != 'assigned':\n        flash('This audit has already been acknowledged or is in a different state.', 'warning')\n        return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n    \n    # Acknowledge the audit\n    audit.auditor_acknowledged_at = datetime.utcnow()\n    audit.status = 'acknowledged'\n    db.session.commit()\n    \n    log_audit_action('acknowledge_audit', 'audit', audit.id, f'Auditor acknowledged audit {audit.reference_number}')\n    \n    # Notify supervisor of acknowledgment\n    if audit.supervisor_id:\n        create_notification(\n            audit.supervisor_id,\n            'Audit Acknowledged by Auditor',\n            f'Auditor {user.full_name} has acknowledged audit {audit.reference_number} - {audit.title}. They can now proceed with preparation.',\n            'audit_acknowledged',\n            'audit',\n            audit.id\n        )\n    \n    flash('Audit acknowledged successfully. You can now begin your preparation and planning.', 'success')\n    return redirect(url_for('auditor_prepare_plan', audit_id=audit_id))\n\n@app.route('/auditor/audit/<int:audit_id>/prepare')\n@role_required('auditor')\ndef auditor_prepare_plan(audit_id):\n    \"\"\"Phase 2: Auditor preparation and planning interface\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if audit.status not in ['acknowledged', 'plan_submitted']:\n        flash('You must acknowledge the audit first before preparing the plan.', 'warning')\n        return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n    \n    # Get previous audits in same department for reference\n    previous_audits = []\n    if audit.department_id:\n        previous_audits = Audit.query.filter(\n            Audit.department_id == audit.department_id,\n            Audit.id != audit.id,\n            Audit.status.in_(['closed', 'review'])\n        ).order_by(Audit.created_at.desc()).limit(5).all()\n    \n    return render_template('auditor/prepare_plan.html', audit=audit, previous_audits=previous_audits)\n\n@app.route('/auditor/audit/<int:audit_id>/submit-plan', methods=['POST'])\n@role_required('auditor')\ndef auditor_submit_plan(audit_id):\n    \"\"\"Phase 2: Auditor submits prepared audit plan\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if audit.status not in ['acknowledged', 'plan_submitted']:\n        flash('Invalid audit status for plan submission.', 'error')\n        return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n    \n    # Extract plan details\n    audit_plan = request.form['audit_plan']\n    audit_methodology = request.form['audit_methodology']\n    audit_checklist = request.form['audit_checklist']\n    data_request_list = request.form.get('data_request_list', '')\n    \n    # Validate required fields\n    if not audit_plan or not audit_methodology:\n        flash('Audit plan and methodology are required.', 'error')\n        return redirect(url_for('auditor_prepare_plan', audit_id=audit_id))\n    \n    # Update audit with plan details\n    audit.audit_plan = audit_plan\n    audit.audit_methodology = audit_methodology\n    audit.audit_checklist = audit_checklist\n    audit.data_request_list = data_request_list\n    audit.plan_submitted_at = datetime.utcnow()\n    audit.status = 'plan_submitted'\n    \n    db.session.commit()\n    \n    log_audit_action('submit_audit_plan', 'audit', audit.id, f'Auditor submitted plan for audit {audit.reference_number}')\n    \n    # Notify supervisor for approval\n    if audit.supervisor_id:\n        create_notification(\n            audit.supervisor_id,\n            'Audit Plan Ready for Review',\n            f'Auditor {user.full_name} has submitted the audit plan for {audit.reference_number} - {audit.title}. Please review and approve.',\n            'plan_approval_needed',\n            'audit',\n            audit.id\n        )\n    \n    # Create document requests for auditee if specified\n    if data_request_list and audit.auditee_id:\n        document_requests = data_request_list.split('\\n')\n        for req in document_requests:\n            if req.strip():\n                doc_request = AuditDocumentRequest()\n                doc_request.audit_id = audit.id\n                doc_request.requested_by_id = user.id\n                doc_request.auditee_id = audit.auditee_id\n                doc_request.document_type = 'general'\n                doc_request.document_description = req.strip()\n                doc_request.priority = audit.priority\n                doc_request.due_date = audit.planned_start_date\n                db.session.add(doc_request)\n        \n        db.session.commit()\n        \n        # Notify auditee of document requests\n        create_notification(\n            audit.auditee_id,\n            'Document Requests for Upcoming Audit',\n            f'The auditor has requested documents for audit {audit.reference_number} - {audit.title}. Please check your document requests and respond accordingly.',\n            'documents_requested',\n            'audit',\n            audit.id\n        )\n    \n    flash('Audit plan submitted successfully and sent for supervisor approval. Document requests have been sent to the auditee.', 'success')\n    return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n\n# Phase 3: Supervisor Approval Routes\n@app.route('/supervisor/audit/<int:audit_id>/review-plan')\n@role_required('supervisor')\ndef supervisor_review_plan(audit_id):\n    \"\"\"Phase 3: Supervisor reviews auditor's submitted plan\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, supervisor_id=user.id).first_or_404()\n    \n    if audit.status != 'plan_submitted':\n        flash('This audit plan has not been submitted or is in a different state.', 'warning')\n        return redirect(url_for('supervisor_audit_detail', audit_id=audit_id))\n    \n    return render_template('supervisor/review_plan.html', audit=audit)\n\n@app.route('/supervisor/audit/<int:audit_id>/approve-plan', methods=['POST'])\n@role_required('supervisor')\ndef supervisor_approve_plan(audit_id):\n    \"\"\"Phase 3: Supervisor approves or requests changes to audit plan\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, supervisor_id=user.id).first_or_404()\n    \n    if audit.status != 'plan_submitted':\n        flash('This audit plan cannot be approved at this time.', 'error')\n        return redirect(url_for('supervisor_audit_detail', audit_id=audit_id))\n    \n    action = request.form['action']  # approve or request_changes\n    supervisor_feedback = request.form.get('supervisor_feedback', '')\n    \n    if action == 'approve':\n        audit.plan_approved_at = datetime.utcnow()\n        audit.status = 'plan_approved'\n        audit.supervisor_feedback = supervisor_feedback\n        \n        db.session.commit()\n        \n        log_audit_action('approve_audit_plan', 'audit', audit.id, f'Supervisor approved plan for audit {audit.reference_number}')\n        \n        # Notify auditor of approval\n        create_notification(\n            audit.auditor_id,\n            'Audit Plan Approved - Ready to Begin',\n            f'Your audit plan for {audit.reference_number} - {audit.title} has been approved by the supervisor. You may now coordinate with the auditee and begin fieldwork.',\n            'plan_approved',\n            'audit',\n            audit.id\n        )\n        \n        flash('Audit plan approved successfully. Auditor has been notified and can begin fieldwork.', 'success')\n        \n    else:  # request_changes\n        audit.status = 'acknowledged'  # Back to preparation phase\n        audit.supervisor_feedback = supervisor_feedback\n        \n        db.session.commit()\n        \n        log_audit_action('request_plan_changes', 'audit', audit.id, f'Supervisor requested changes to plan for audit {audit.reference_number}')\n        \n        # Notify auditor of requested changes\n        create_notification(\n            audit.auditor_id,\n            'Audit Plan Requires Revision',\n            f'Your audit plan for {audit.reference_number} - {audit.title} requires revision. Please review the supervisor feedback and resubmit.',\n            'plan_revision_requested',\n            'audit',\n            audit.id\n        )\n        \n        flash('Feedback provided to auditor. They will revise and resubmit the plan.', 'info')\n    \n    return redirect(url_for('supervisor_audit_detail', audit_id=audit_id))\n\n# Auditee Coordination Routes\n@app.route('/auditee/document-requests')\n@role_required('auditee')\ndef auditee_document_requests():\n    \"\"\"View all document requests for auditee\"\"\"\n    user = get_current_user()\n    document_requests = AuditDocumentRequest.query.filter_by(auditee_id=user.id).order_by(\n        AuditDocumentRequest.created_at.desc()\n    ).all()\n    \n    return render_template('auditee/document_requests.html', document_requests=document_requests)\n\n@app.route('/auditee/document-request/<int:request_id>/respond', methods=['POST'])\n@role_required('auditee')\ndef auditee_respond_document_request(request_id):\n    \"\"\"Auditee responds to document request\"\"\"\n    user = get_current_user()\n    doc_request = AuditDocumentRequest.query.filter_by(id=request_id, auditee_id=user.id).first_or_404()\n    \n    response_type = request.form['response_type']  # provided, not_available\n    auditee_response = request.form['auditee_response']\n    \n    doc_request.status = response_type\n    doc_request.auditee_response = auditee_response\n    doc_request.response_date = datetime.utcnow().date()\n    \n    db.session.commit()\n    \n    log_audit_action('respond_document_request', 'audit_document_request', doc_request.id, \n                     f'Auditee responded to document request: {response_type}')\n    \n    # Notify auditor of response\n    create_notification(\n        doc_request.requested_by_id,\n        'Document Request Response Received',\n        f'Auditee has responded to your document request for {doc_request.document_type}: {response_type.replace(\"_\", \" \").title()}',\n        'document_response',\n        'audit',\n        doc_request.audit_id\n    )\n    \n    flash('Response submitted successfully. The auditor has been notified.', 'success')\n    return redirect(url_for('auditee_document_requests'))\n\n@app.route('/auditee/audit/<int:audit_id>/acknowledge', methods=['POST'])\n@role_required('auditee')\ndef auditee_acknowledge_audit(audit_id):\n    \"\"\"Auditee acknowledges audit notification and coordination\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditee_id=user.id).first_or_404()\n    \n    audit.auditee_acknowledged_at = datetime.utcnow()\n    access_arrangements = request.form.get('access_arrangements', 'off') == 'on'\n    audit.access_arrangements_completed = access_arrangements\n    \n    db.session.commit()\n    \n    log_audit_action('acknowledge_audit_auditee', 'audit', audit.id, f'Auditee acknowledged audit {audit.reference_number}')\n    \n    # Notify auditor and supervisor\n    notification_message = f'Auditee {user.full_name} has acknowledged audit {audit.reference_number} - {audit.title} and confirmed access arrangements.'\n    \n    if audit.auditor_id:\n        create_notification(\n            audit.auditor_id,\n            'Auditee Ready for Audit',\n            notification_message,\n            'auditee_ready',\n            'audit',\n            audit.id\n        )\n    \n    if audit.supervisor_id:\n        create_notification(\n            audit.supervisor_id,\n            'Audit Coordination Complete',\n            notification_message,\n            'coordination_complete',\n            'audit',\n            audit.id\n        )\n    \n    flash('Audit acknowledged successfully. Access arrangements confirmed.', 'success')\n    return redirect(url_for('auditee_dashboard'))\n\n@app.route('/auditor/audit/<int:audit_id>/start', methods=['POST'])\n@role_required('auditor')\ndef auditor_start_audit(audit_id):\n    \"\"\"Start audit execution\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if audit.status == 'draft':\n        audit.status = 'in_progress'\n        audit.actual_start_date = datetime.utcnow().date()\n        db.session.commit()\n        \n        log_audit_action('start_audit', 'audit', audit.id, f'Started audit {audit.id}')\n        flash('Audit started successfully!', 'success')\n    \n    return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n\n@app.route('/auditor/findings')\n@role_required('auditor')\ndef auditor_findings():\n    \"\"\"Auditor's findings management\"\"\"\n    user = get_current_user()\n    findings = Finding.query.join(Audit).filter(Audit.auditor_id == user.id).order_by(Finding.created_at.desc()).all()\n    \n    return render_template('auditor/findings.html', findings=findings)\n\n@app.route('/auditor/reports')\n@role_required('auditor')\ndef auditor_reports():\n    \"\"\"Auditor's reports view\"\"\"\n    user = get_current_user()\n    audits = Audit.query.filter_by(auditor_id=user.id).all()\n    \n    return render_template('auditor/reports.html', audits=audits)\n\n@app.route('/auditor/finding/<int:finding_id>')\n@role_required('auditor')\ndef auditor_finding_detail(finding_id):\n    \"\"\"Auditor's detailed finding view\"\"\"\n    user = get_current_user()\n    finding = Finding.query.join(Audit).filter(\n        Finding.id == finding_id, \n        Audit.auditor_id == user.id\n    ).first_or_404()\n    \n    corrective_actions = CorrectiveAction.query.filter_by(finding_id=finding_id).all()\n    \n    return render_template('auditor/finding_detail.html', \n                         finding=finding, corrective_actions=corrective_actions)\n\n@app.route('/auditor/create-finding/<int:audit_id>', methods=['GET', 'POST'])\n@role_required('auditor')\ndef auditor_create_finding(audit_id):\n    \"\"\"Create new finding during audit\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditor_id=user.id).first_or_404()\n    \n    if request.method == 'POST':\n        title = request.form['title']\n        description = request.form['description']\n        severity = request.form['severity']\n        category = request.form['category']\n        risk_assessment = request.form.get('risk_assessment', '')\n        recommendation = request.form.get('recommendation', '')\n        auditee_id = request.form.get('auditee_id')\n        due_date = datetime.strptime(request.form['due_date'], '%Y-%m-%d').date() if request.form.get('due_date') else None\n        \n        # Generate finding reference number\n        year = datetime.utcnow().year\n        count = Finding.query.filter(extract('year', Finding.created_at) == year).count() + 1\n        reference_number = f\"FND-{year}-{count:04d}\"\n        \n        finding = Finding()\n        finding.audit_id = audit_id\n        finding.title = title\n        finding.description = description\n        finding.severity = severity\n        finding.category = category\n        finding.risk_assessment = risk_assessment\n        finding.recommendation = recommendation\n        finding.auditee_id = auditee_id\n        finding.identified_by_id = user.id\n        finding.due_date = due_date\n        finding.status = 'open'\n        \n        db.session.add(finding)\n        db.session.commit()\n        \n        log_audit_action('create_finding', 'finding', finding.id, f'Created finding {reference_number}')\n        \n        # Notify auditee if assigned\n        if auditee_id:\n            create_notification(\n                auditee_id,\n                'New Finding Assigned',\n                f'A new finding has been assigned to you: {title}',\n                'finding_assigned',\n                'finding',\n                finding.id\n            )\n        \n        flash('Finding created successfully!', 'success')\n        return redirect(url_for('auditor_audit_detail', audit_id=audit_id))\n    \n    auditees = User.query.filter_by(role='auditee', is_active=True).all()\n    return render_template('auditor/create_finding.html', audit=audit, auditees=auditees)\n\n# Auditee workflow routes\n@app.route('/auditee/findings')\n@role_required('auditee')\ndef auditee_findings():\n    \"\"\"Auditee's findings view\"\"\"\n    user = get_current_user()\n    findings = Finding.query.filter_by(auditee_id=user.id).order_by(Finding.created_at.desc()).all()\n    \n    return render_template('auditee/findings.html', findings=findings)\n\n@app.route('/auditee/finding/<int:finding_id>')\n@role_required('auditee')\ndef auditee_finding_detail(finding_id):\n    \"\"\"Auditee's detailed finding view\"\"\"\n    user = get_current_user()\n    finding = Finding.query.filter_by(id=finding_id, auditee_id=user.id).first_or_404()\n    \n    corrective_actions = CorrectiveAction.query.filter_by(finding_id=finding_id).all()\n    evidence = EvidenceFile.query.filter_by(finding_id=finding_id).all()\n    \n    return render_template('auditee/finding_detail.html', \n                         finding=finding, corrective_actions=corrective_actions, evidence=evidence)\n\n@app.route('/auditee/corrective-actions')\n@role_required('auditee')\ndef auditee_corrective_actions():\n    \"\"\"Auditee's corrective actions view\"\"\"\n    user = get_current_user()\n    actions = CorrectiveAction.query.join(Finding).filter(\n        Finding.auditee_id == user.id\n    ).order_by(CorrectiveAction.created_at.desc()).all()\n    \n    return render_template('auditee/corrective_actions.html', actions=actions)\n\n@app.route('/auditee/create-corrective-action/<int:finding_id>', methods=['GET', 'POST'])\n@role_required('auditee')\ndef auditee_create_corrective_action(finding_id):\n    \"\"\"Create corrective action for finding\"\"\"\n    user = get_current_user()\n    finding = Finding.query.filter_by(id=finding_id, auditee_id=user.id).first_or_404()\n    \n    if request.method == 'POST':\n        description = request.form['description']\n        action_plan = request.form['action_plan']\n        responsible_person = request.form['responsible_person']\n        target_completion_date = datetime.strptime(request.form['target_completion_date'], '%Y-%m-%d').date()\n        \n        action = CorrectiveAction()\n        action.action_description = description\n        action.responsible_person_id = responsible_person if responsible_person else user.id\n        action.planned_completion_date = target_completion_date\n        action.finding_id = finding_id\n        action.created_by_id = user.id\n        \n        db.session.add(action)\n        \n        # Update finding status\n        finding.status = 'in_progress'\n        db.session.commit()\n        \n        log_audit_action('create_corrective_action', 'corrective_action', action.id, \n                        f'Created corrective action for finding {finding.id}')\n        \n        # Notify auditor\n        create_notification(\n            finding.audit.auditor_id,\n            'Corrective Action Proposed',\n            f'A corrective action has been proposed for finding: {finding.title}',\n            'corrective_action_proposed',\n            'corrective_action',\n            action.id\n        )\n        \n        flash('Corrective action created successfully!', 'success')\n        return redirect(url_for('auditee_finding_detail', finding_id=finding_id))\n    \n    return render_template('auditee/create_corrective_action.html', finding=finding)\n\n@app.route('/auditee/evidence')\n@role_required('auditee')\ndef auditee_evidence():\n    \"\"\"Auditee's evidence management\"\"\"\n    user = get_current_user()\n    evidence = EvidenceFile.query.join(Finding).filter(\n        Finding.auditee_id == user.id\n    ).order_by(EvidenceFile.uploaded_at.desc()).all()\n    \n    return render_template('auditee/evidence.html', evidence=evidence)\n\n@app.route('/auditee/upload-evidence/<int:finding_id>', methods=['GET', 'POST'])\n@role_required('auditee')\ndef auditee_upload_evidence(finding_id):\n    \"\"\"Upload evidence for finding\"\"\"\n    user = get_current_user()\n    finding = Finding.query.filter_by(id=finding_id, auditee_id=user.id).first_or_404()\n    \n    if request.method == 'POST':\n        title = request.form['title']\n        description = request.form.get('description', '')\n        evidence_type = request.form['evidence_type']\n        \n        # Handle file upload\n        if 'file' in request.files:\n            file = request.files['file']\n            if file and file.filename:\n                file_info = save_uploaded_file(file, 'uploads/evidence')\n                if file_info:\n                    evidence = EvidenceFile()\n                    evidence.original_filename = title\n                    evidence.description = description  \n                    evidence.filename = file_info['filename']\n                    evidence.file_path = file_info['file_path']\n                    evidence.file_size = file_info['file_size']\n                    evidence.file_type = file_info['file_type']\n                    evidence.finding_id = finding_id\n                    evidence.uploaded_by_id = user.id\n                    \n                    db.session.add(evidence)\n                    db.session.commit()\n                    \n                    log_audit_action('upload_evidence', 'evidence', evidence.id, \n                                   f'Uploaded evidence for finding {finding.id}')\n                    \n                    # Notify auditor\n                    create_notification(\n                        finding.audit.auditor_id,\n                        'Evidence Uploaded',\n                        f'Evidence has been uploaded for finding: {finding.title}',\n                        'evidence_uploaded',\n                        'evidence',\n                        evidence.id\n                    )\n                    \n                    flash('Evidence uploaded successfully!', 'success')\n                    return redirect(url_for('auditee_finding_detail', finding_id=finding_id))\n                else:\n                    flash('Failed to upload file. Please try again.', 'error')\n            else:\n                flash('Please select a file to upload.', 'error')\n    \n    return render_template('auditee/upload_evidence.html', finding=finding)\n\n@app.route('/auditee/reports')\n@role_required('auditee')\ndef auditee_reports():\n    \"\"\"Auditee's reports view\"\"\"\n    user = get_current_user()\n    findings = Finding.query.filter_by(auditee_id=user.id).all()\n    \n    return render_template('auditee/reports.html', findings=findings)\n\n@app.route('/supervisor/reports')\n@role_required('supervisor')\ndef supervisor_reports():\n    \"\"\"Supervisor's reports view\"\"\"\n    user = get_current_user()\n    audits = Audit.query.filter_by(supervisor_id=user.id).all()\n    \n    return render_template('supervisor/reports.html', audits=audits)\n\n# Supervisor evidence review functionality\n@app.route('/supervisor/evidence/<int:evidence_id>')\n@role_required('supervisor')\ndef supervisor_review_evidence(evidence_id):\n    \"\"\"Supervisor reviews evidence\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    user = get_current_user()\n    \n    # Check if supervisor has access to this evidence through audit supervision  \n    if not evidence.finding or not evidence.finding.audit or evidence.finding.audit.supervisor_id != user.id:\n        flash('You do not have permission to review this evidence.', 'error')\n        return redirect(url_for('supervisor_dashboard'))\n    \n    return render_template('supervisor/evidence_review.html', evidence=evidence)\n\n@app.route('/supervisor/evidence/<int:evidence_id>/comment', methods=['POST'])\n@role_required('supervisor')\ndef supervisor_comment_evidence(evidence_id):\n    \"\"\"Supervisor adds comment to evidence\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    user = get_current_user()\n    \n    # Check permission\n    if not evidence.finding or not evidence.finding.audit or evidence.finding.audit.supervisor_id != user.id:\n        flash('You do not have permission to comment on this evidence.', 'error')\n        return redirect(url_for('supervisor_dashboard'))\n    \n    comment = request.form.get('comment')\n    status = request.form.get('status', 'reviewed')\n    \n    if comment:\n        # Add supervisor comment to evidence\n        evidence.supervisor_comment = comment\n        evidence.supervisor_status = status\n        evidence.reviewed_by_id = user.id\n        evidence.reviewed_at = datetime.utcnow()\n        \n        db.session.commit()\n        \n        # Notify auditee\n        create_notification(\n            evidence.finding.auditee_id,\n            'Evidence Reviewed',\n            f'Your evidence for \"{evidence.finding.title}\" has been reviewed by supervisor.',\n            'evidence_reviewed',\n            'evidence',\n            evidence.id\n        )\n        \n        flash('Comment added successfully!', 'success')\n    \n    return redirect(url_for('supervisor_review_evidence', evidence_id=evidence_id))\n\n@app.route('/supervisor/evidence/<int:evidence_id>/download')\n@role_required('supervisor')\ndef supervisor_download_evidence(evidence_id):\n    \"\"\"Supervisor downloads evidence file\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    user = get_current_user()\n    \n    # Check permission\n    if not evidence.finding or not evidence.finding.audit or evidence.finding.audit.supervisor_id != user.id:\n        flash('You do not have permission to download this evidence.', 'error')\n        return redirect(url_for('supervisor_dashboard'))\n    \n    try:\n        from flask import send_file\n        import os\n        \n        file_path = evidence.file_path\n        if os.path.exists(file_path):\n            return send_file(file_path, as_attachment=True, download_name=evidence.original_filename)\n        else:\n            flash('File not found.', 'error')\n    except Exception as e:\n        flash('Error downloading file.', 'error')\n    \n    return redirect(url_for('supervisor_review_evidence', evidence_id=evidence_id))\n\n# Note: Finding detail routes are defined elsewhere in the file\n\n# Admin routes for audit management\n@app.route('/admin/audit/<int:audit_id>')\n@role_required('admin')\ndef admin_audit_detail(audit_id):\n    \"\"\"Admin audit detail view\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    \n    return render_template('audits/execute.html', audit=audit, findings=findings, user=get_current_user())\n\n@app.route('/admin/audit/<int:audit_id>/edit', methods=['GET', 'POST'])\n@role_required('admin')\ndef admin_edit_audit(audit_id):\n    \"\"\"Edit audit\"\"\"\n    audit = Audit.query.get_or_404(audit_id)\n    \n    if request.method == 'POST':\n        audit.title = request.form['title']\n        audit.description = request.form['description']\n        audit.department_id = request.form['department_id']\n        audit.auditor_id = request.form.get('auditor_id')\n        audit.auditee_id = request.form.get('auditee_id')\n        audit.supervisor_id = request.form.get('supervisor_id')\n        audit.audit_type = request.form['audit_type']\n        audit.planned_start_date = datetime.strptime(request.form['planned_start_date'], '%Y-%m-%d').date()\n        audit.planned_end_date = datetime.strptime(request.form['planned_end_date'], '%Y-%m-%d').date()\n        \n        db.session.commit()\n        \n        log_audit_action('edit_audit', 'audit', audit.id, f'Edited audit {audit.reference_number}')\n        flash('Audit updated successfully!', 'success')\n        return redirect(url_for('admin_audit_detail', audit_id=audit_id))\n    \n    departments = Department.query.filter_by(is_active=True).all()\n    auditors = User.query.filter_by(role='auditor', is_active=True).all()\n    auditees = User.query.filter_by(role='auditee', is_active=True).all()\n    supervisors = User.query.filter_by(role='supervisor', is_active=True).all()\n    \n    return render_template('audits/create.html', audit=audit, departments=departments, \n                         auditors=auditors, auditees=auditees, supervisors=supervisors, edit_mode=True)\n\n# Supervisor audit detail route\n@app.route('/supervisor/audit/<int:audit_id>')\n@role_required('supervisor')\ndef supervisor_audit_detail(audit_id):\n    \"\"\"Supervisor audit detail view\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, supervisor_id=user.id).first_or_404()\n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    \n    return render_template('audits/execute.html', audit=audit, findings=findings, user=user)\n\n# Auditee audit detail route\n@app.route('/auditee/audit/<int:audit_id>')\n@role_required('auditee')\ndef auditee_audit_detail(audit_id):\n    \"\"\"Auditee audit detail view\"\"\"\n    user = get_current_user()\n    audit = Audit.query.filter_by(id=audit_id, auditee_id=user.id).first_or_404()\n    findings = Finding.query.filter_by(audit_id=audit_id).all()\n    \n    return render_template('audits/execute.html', audit=audit, findings=findings, user=user)\n\n# Admin notification management\n@app.route('/admin/notifications')\n@role_required('admin')\ndef admin_notifications():\n    \"\"\"Admin view all notifications\"\"\"\n    notifications = Notification.query.order_by(Notification.created_at.desc()).all()\n    return render_template('admin/notifications.html', notifications=notifications)\n\n@app.route('/admin/notification/<int:notification_id>/delete', methods=['POST'])\n@role_required('admin')\ndef admin_delete_notification(notification_id):\n    \"\"\"Admin delete notification\"\"\"\n    notification = Notification.query.get_or_404(notification_id)\n    user = get_current_user()\n    \n    # Log the deletion\n    log_audit_action('delete_notification', 'notification', notification_id, \n                   f'Deleted notification: {notification.title}')\n    \n    db.session.delete(notification)\n    db.session.commit()\n    \n    flash('Notification deleted successfully!', 'success')\n    return redirect(url_for('admin_notifications'))\n\n@app.route('/admin/notifications/delete-all', methods=['POST'])\n@role_required('admin')\ndef admin_delete_all_notifications():\n    \"\"\"Admin delete all notifications\"\"\"\n    user = get_current_user()\n    count = Notification.query.count()\n    \n    Notification.query.delete()\n    db.session.commit()\n    \n    log_audit_action('delete_all_notifications', 'notification', None, \n                   f'Deleted all {count} notifications')\n    \n    flash(f'All {count} notifications deleted successfully!', 'success')\n    return redirect(url_for('admin_notifications'))\n\n# General notification deletion routes for all user roles\n@app.route('/notifications/delete/<int:notification_id>', methods=['POST'])\n@login_required\ndef delete_user_notification(notification_id):\n    \"\"\"Delete a single notification for current user\"\"\"\n    user = get_current_user()\n    notification = Notification.query.filter_by(id=notification_id, user_id=user.id).first_or_404()\n    db.session.delete(notification)\n    db.session.commit()\n    \n    flash('Notification deleted successfully!', 'success')\n    return redirect(request.referrer or url_for('dashboard'))\n\n@app.route('/notifications/delete_all', methods=['POST'])\n@login_required  \ndef delete_all_user_notifications():\n    \"\"\"Delete all notifications for current user\"\"\"\n    user = get_current_user()\n    try:\n        count = Notification.query.filter_by(user_id=user.id).count()\n        Notification.query.filter_by(user_id=user.id).delete()\n        db.session.commit()\n        \n        flash(f'All {count} notifications deleted successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash('Error deleting notifications. Please try again.', 'error')\n    \n    return redirect(request.referrer or url_for('dashboard'))\n\n# Note: Auditee routes are defined elsewhere in the file\n\n# Auditor evidence download route\n@app.route('/auditor/evidence/<int:evidence_id>/download')\n@role_required('auditor')\ndef auditor_download_evidence(evidence_id):\n    \"\"\"Auditor downloads evidence file\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    user = get_current_user()\n    \n    # Check permission - auditor can download evidence from their audits\n    if not evidence.finding or not evidence.finding.audit or evidence.finding.audit.auditor_id != user.id:\n        flash('You do not have permission to download this evidence.', 'error')\n        return redirect(url_for('auditor_dashboard'))\n    \n    try:\n        from flask import send_file\n        import os\n        \n        file_path = evidence.file_path\n        if os.path.exists(file_path):\n            return send_file(file_path, as_attachment=True, download_name=evidence.original_filename)\n        else:\n            flash('File not found.', 'error')\n    except Exception as e:\n        flash('Error downloading file.', 'error')\n    \n    return redirect(url_for('auditor_finding_detail', finding_id=evidence.finding_id))\n\n# Admin evidence download route\n@app.route('/admin/evidence/<int:evidence_id>/download')\n@role_required('admin')\ndef admin_download_evidence(evidence_id):\n    \"\"\"Admin downloads evidence file\"\"\"\n    evidence = EvidenceFile.query.get_or_404(evidence_id)\n    \n    try:\n        from flask import send_file\n        import os\n        \n        file_path = evidence.file_path\n        if os.path.exists(file_path):\n            return send_file(file_path, as_attachment=True, download_name=evidence.original_filename)\n        else:\n            flash('File not found.', 'error')\n    except Exception as e:\n        flash('Error downloading file.', 'error')\n    \n    return redirect(url_for('admin_audit_detail', audit_id=evidence.finding.audit_id if evidence.finding else 1))\n\n# Context processor for template globals\n@app.context_processor\ndef inject_user():\n    return dict(current_user=get_current_user())\n","size_bytes":70107}},"version":1}